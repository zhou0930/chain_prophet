{
  "version": 3,
  "sources": ["../node_modules/abitype/dist/esm/version.js", "../node_modules/abitype/dist/esm/errors.js", "../node_modules/abitype/dist/esm/regex.js", "../node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js", "../node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js", "../node_modules/abitype/dist/esm/human-readable/formatAbiItem.js", "../node_modules/abitype/dist/esm/human-readable/runtime/signatures.js", "../node_modules/abitype/dist/esm/human-readable/errors/abiItem.js", "../node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js", "../node_modules/abitype/dist/esm/human-readable/errors/signature.js", "../node_modules/abitype/dist/esm/human-readable/errors/struct.js", "../node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js", "../node_modules/abitype/dist/esm/human-readable/runtime/cache.js", "../node_modules/abitype/dist/esm/human-readable/runtime/utils.js", "../node_modules/abitype/dist/esm/human-readable/runtime/structs.js", "../node_modules/abitype/dist/esm/human-readable/parseAbi.js", "../node_modules/abitype/dist/esm/human-readable/parseAbiItem.js", "../node_modules/abitype/dist/esm/human-readable/parseAbiParameters.js", "../node_modules/abitype/dist/esm/exports/index.js", "../node_modules/viem/_esm/utils/getAction.js", "../node_modules/viem/_esm/utils/abi/formatAbiItem.js", "../node_modules/viem/_esm/utils/data/isHex.js", "../node_modules/viem/_esm/utils/data/size.js", "../node_modules/viem/_esm/errors/version.js", "../node_modules/viem/_esm/errors/base.js", "../node_modules/viem/_esm/errors/abi.js", "../node_modules/viem/_esm/errors/log.js", "../node_modules/viem/_esm/errors/data.js", "../node_modules/viem/_esm/utils/data/pad.js", "../node_modules/viem/_esm/errors/encoding.js", "../node_modules/viem/_esm/utils/data/trim.js", "../node_modules/viem/_esm/utils/encoding/fromHex.js", "../node_modules/viem/_esm/utils/encoding/toHex.js", "../node_modules/viem/_esm/utils/encoding/toBytes.js", "../node_modules/viem/node_modules/@noble/hashes/esm/_u64.js", "../node_modules/viem/node_modules/@noble/hashes/esm/cryptoNode.js", "../node_modules/viem/node_modules/@noble/hashes/esm/utils.js", "../node_modules/viem/node_modules/@noble/hashes/esm/sha3.js", "../node_modules/viem/_esm/utils/hash/keccak256.js", "../node_modules/viem/_esm/utils/hash/hashSignature.js", "../node_modules/viem/_esm/utils/hash/normalizeSignature.js", "../node_modules/viem/_esm/utils/hash/toSignature.js", "../node_modules/viem/_esm/utils/hash/toSignatureHash.js", "../node_modules/viem/_esm/utils/hash/toEventSelector.js", "../node_modules/viem/_esm/errors/address.js", "../node_modules/viem/_esm/utils/lru.js", "../node_modules/viem/_esm/utils/address/getAddress.js", "../node_modules/viem/_esm/utils/address/isAddress.js", "../node_modules/viem/_esm/utils/data/concat.js", "../node_modules/viem/_esm/utils/data/slice.js", "../node_modules/viem/_esm/utils/regex.js", "../node_modules/viem/_esm/utils/abi/encodeAbiParameters.js", "../node_modules/viem/_esm/utils/hash/toFunctionSelector.js", "../node_modules/viem/_esm/utils/abi/getAbiItem.js", "../node_modules/viem/_esm/utils/abi/encodeEventTopics.js", "../node_modules/viem/_esm/utils/filters/createFilterRequestScope.js", "../node_modules/viem/_esm/actions/public/createContractEventFilter.js", "../node_modules/viem/_esm/accounts/utils/parseAccount.js", "../node_modules/viem/_esm/utils/abi/prepareEncodeFunctionData.js", "../node_modules/viem/_esm/utils/abi/encodeFunctionData.js", "../node_modules/viem/_esm/constants/solidity.js", "../node_modules/viem/_esm/errors/cursor.js", "../node_modules/viem/_esm/utils/cursor.js", "../node_modules/viem/_esm/utils/encoding/fromBytes.js", "../node_modules/viem/_esm/utils/abi/decodeAbiParameters.js", "../node_modules/viem/_esm/utils/abi/decodeErrorResult.js", "../node_modules/viem/_esm/utils/stringify.js", "../node_modules/viem/_esm/utils/abi/formatAbiItemWithArgs.js", "../node_modules/viem/_esm/constants/unit.js", "../node_modules/viem/_esm/utils/unit/formatUnits.js", "../node_modules/viem/_esm/utils/unit/formatEther.js", "../node_modules/viem/_esm/utils/unit/formatGwei.js", "../node_modules/viem/_esm/errors/stateOverride.js", "../node_modules/viem/_esm/errors/transaction.js", "../node_modules/viem/_esm/errors/utils.js", "../node_modules/viem/_esm/errors/contract.js", "../node_modules/viem/_esm/errors/request.js", "../node_modules/viem/_esm/errors/rpc.js", "../node_modules/viem/_esm/utils/errors/getContractError.js", "../node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js", "../node_modules/viem/node_modules/@noble/hashes/esm/_md.js", "../node_modules/viem/node_modules/@noble/hashes/esm/sha2.js", "../node_modules/viem/node_modules/@noble/hashes/esm/hmac.js", "../node_modules/viem/node_modules/@noble/curves/esm/abstract/utils.js", "../node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js", "../node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js", "../node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js", "../node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js", "../node_modules/viem/node_modules/@noble/curves/esm/abstract/hash-to-curve.js", "../node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js", "../node_modules/viem/_esm/utils/signature/recoverPublicKey.js", "../node_modules/viem/_esm/utils/signature/recoverAddress.js", "../node_modules/viem/_esm/utils/encoding/toRlp.js", "../node_modules/viem/_esm/utils/authorization/hashAuthorization.js", "../node_modules/viem/_esm/utils/authorization/recoverAuthorizationAddress.js", "../node_modules/viem/_esm/errors/estimateGas.js", "../node_modules/viem/_esm/errors/node.js", "../node_modules/viem/_esm/utils/errors/getNodeError.js", "../node_modules/viem/_esm/utils/errors/getEstimateGasError.js", "../node_modules/viem/_esm/utils/formatters/extract.js", "../node_modules/viem/_esm/utils/formatters/transactionRequest.js", "../node_modules/viem/_esm/utils/stateOverride.js", "../node_modules/viem/_esm/constants/number.js", "../node_modules/viem/_esm/utils/transaction/assertRequest.js", "../node_modules/viem/_esm/errors/fee.js", "../node_modules/viem/_esm/errors/block.js", "../node_modules/viem/_esm/utils/formatters/transaction.js", "../node_modules/viem/_esm/utils/formatters/block.js", "../node_modules/viem/_esm/actions/public/getBlock.js", "../node_modules/viem/_esm/actions/public/getGasPrice.js", "../node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js", "../node_modules/viem/_esm/actions/public/estimateFeesPerGas.js", "../node_modules/viem/_esm/actions/public/getTransactionCount.js", "../node_modules/viem/_esm/utils/blob/blobsToCommitments.js", "../node_modules/viem/_esm/utils/blob/blobsToProofs.js", "../node_modules/viem/node_modules/@noble/hashes/esm/sha256.js", "../node_modules/viem/_esm/utils/hash/sha256.js", "../node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js", "../node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js", "../node_modules/viem/_esm/constants/blob.js", "../node_modules/viem/_esm/constants/kzg.js", "../node_modules/viem/_esm/errors/blob.js", "../node_modules/viem/_esm/utils/blob/toBlobs.js", "../node_modules/viem/_esm/utils/blob/toBlobSidecars.js", "../node_modules/viem/_esm/utils/transaction/getTransactionType.js", "../node_modules/viem/_esm/actions/public/getChainId.js", "../node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js", "../node_modules/viem/_esm/actions/public/estimateGas.js", "../node_modules/viem/_esm/actions/public/estimateContractGas.js", "../node_modules/viem/_esm/utils/address/isAddressEqual.js", "../node_modules/viem/_esm/utils/abi/decodeEventLog.js", "../node_modules/viem/_esm/utils/abi/parseEventLogs.js", "../node_modules/viem/_esm/utils/formatters/log.js", "../node_modules/viem/_esm/actions/public/getLogs.js", "../node_modules/viem/_esm/actions/public/getContractEvents.js", "../node_modules/viem/_esm/utils/abi/decodeFunctionResult.js", "../node_modules/ox/node_modules/@noble/curves/esm/abstract/utils.js", "../node_modules/ox/_esm/core/version.js", "../node_modules/ox/_esm/core/internal/errors.js", "../node_modules/ox/_esm/core/Errors.js", "../node_modules/ox/_esm/core/internal/bytes.js", "../node_modules/ox/_esm/core/internal/hex.js", "../node_modules/ox/_esm/core/Json.js", "../node_modules/ox/_esm/core/Bytes.js", "../node_modules/ox/_esm/core/Hex.js", "../node_modules/ox/_esm/core/Withdrawal.js", "../node_modules/ox/_esm/core/BlockOverrides.js", "../node_modules/viem/_esm/constants/abis.js", "../node_modules/viem/_esm/constants/contract.js", "../node_modules/viem/_esm/constants/contracts.js", "../node_modules/viem/_esm/errors/chain.js", "../node_modules/viem/_esm/utils/abi/encodeDeployData.js", "../node_modules/viem/_esm/utils/chain/getChainContractAddress.js", "../node_modules/viem/_esm/utils/errors/getCallError.js", "../node_modules/viem/_esm/utils/promise/withResolvers.js", "../node_modules/viem/_esm/utils/promise/createBatchScheduler.js", "../node_modules/viem/_esm/errors/ccip.js", "../node_modules/viem/_esm/utils/abi/decodeFunctionData.js", "../node_modules/viem/_esm/utils/abi/encodeErrorResult.js", "../node_modules/viem/_esm/utils/abi/encodeFunctionResult.js", "../node_modules/viem/_esm/utils/ens/localBatchGatewayRequest.js", "../node_modules/viem/_esm/utils/ccip.js", "../node_modules/viem/_esm/actions/public/call.js", "../node_modules/viem/_esm/actions/public/readContract.js", "../node_modules/viem/_esm/actions/public/simulateContract.js", "../node_modules/viem/_esm/utils/observe.js", "../node_modules/viem/_esm/utils/wait.js", "../node_modules/viem/_esm/utils/poll.js", "../node_modules/viem/_esm/utils/promise/withCache.js", "../node_modules/viem/_esm/actions/public/getBlockNumber.js", "../node_modules/viem/_esm/actions/public/getFilterChanges.js", "../node_modules/viem/_esm/actions/public/uninstallFilter.js", "../node_modules/viem/_esm/actions/public/watchContractEvent.js", "../node_modules/viem/_esm/errors/account.js", "../node_modules/viem/_esm/utils/chain/assertCurrentChain.js", "../node_modules/viem/_esm/utils/errors/getTransactionError.js", "../node_modules/viem/_esm/actions/wallet/sendRawTransaction.js", "../node_modules/viem/_esm/actions/wallet/sendTransaction.js", "../node_modules/viem/_esm/actions/wallet/writeContract.js", "../node_modules/viem/_esm/errors/calls.js", "../node_modules/viem/_esm/utils/promise/withRetry.js", "../node_modules/viem/_esm/utils/formatters/transactionReceipt.js", "../node_modules/viem/_esm/actions/wallet/sendCalls.js", "../node_modules/viem/_esm/actions/wallet/getCallsStatus.js", "../node_modules/viem/_esm/actions/wallet/waitForCallsStatus.js", "../node_modules/viem/_esm/utils/uid.js", "../node_modules/viem/_esm/clients/createClient.js", "../node_modules/viem/_esm/utils/ens/errors.js", "../node_modules/viem/_esm/utils/ens/encodedLabelToLabelhash.js", "../node_modules/viem/_esm/utils/ens/namehash.js", "../node_modules/viem/_esm/utils/ens/encodeLabelhash.js", "../node_modules/viem/_esm/utils/ens/labelhash.js", "../node_modules/viem/_esm/utils/ens/packetToBytes.js", "../node_modules/viem/_esm/actions/ens/getEnsAddress.js", "../node_modules/viem/_esm/errors/ens.js", "../node_modules/viem/_esm/utils/ens/avatar/utils.js", "../node_modules/viem/_esm/utils/ens/avatar/parseAvatarRecord.js", "../node_modules/viem/_esm/actions/ens/getEnsText.js", "../node_modules/viem/_esm/actions/ens/getEnsAvatar.js", "../node_modules/viem/_esm/actions/ens/getEnsName.js", "../node_modules/viem/_esm/actions/ens/getEnsResolver.js", "../node_modules/viem/_esm/actions/public/createAccessList.js", "../node_modules/viem/_esm/actions/public/createBlockFilter.js", "../node_modules/viem/_esm/actions/public/createEventFilter.js", "../node_modules/viem/_esm/actions/public/createPendingTransactionFilter.js", "../node_modules/viem/_esm/actions/public/getBalance.js", "../node_modules/viem/_esm/actions/public/getBlobBaseFee.js", "../node_modules/viem/_esm/actions/public/getBlockTransactionCount.js", "../node_modules/viem/_esm/actions/public/getCode.js", "../node_modules/viem/_esm/errors/eip712.js", "../node_modules/viem/_esm/actions/public/getEip712Domain.js", "../node_modules/viem/_esm/utils/formatters/feeHistory.js", "../node_modules/viem/_esm/actions/public/getFeeHistory.js", "../node_modules/viem/_esm/actions/public/getFilterLogs.js", "../node_modules/viem/_esm/utils/transaction/assertTransaction.js", "../node_modules/viem/_esm/utils/transaction/serializeAccessList.js", "../node_modules/viem/_esm/utils/transaction/serializeTransaction.js", "../node_modules/viem/_esm/utils/authorization/serializeAuthorizationList.js", "../node_modules/viem/_esm/utils/authorization/verifyAuthorization.js", "../node_modules/viem/_esm/utils/promise/withDedupe.js", "../node_modules/viem/_esm/utils/buildRequest.js", "../node_modules/viem/_esm/utils/chain/defineChain.js", "../node_modules/viem/_esm/utils/promise/withTimeout.js", "../node_modules/viem/_esm/utils/rpc/id.js", "../node_modules/viem/_esm/utils/rpc/http.js", "../node_modules/viem/_esm/constants/strings.js", "../node_modules/viem/_esm/utils/signature/toPrefixedMessage.js", "../node_modules/viem/_esm/utils/signature/hashMessage.js", "../node_modules/viem/_esm/errors/typedData.js", "../node_modules/viem/_esm/utils/typedData.js", "../node_modules/viem/_esm/utils/signature/hashTypedData.js", "../node_modules/ox/_esm/core/internal/lru.js", "../node_modules/ox/_esm/core/Caches.js", "../node_modules/ox/node_modules/@noble/hashes/esm/cryptoNode.js", "../node_modules/ox/node_modules/@noble/hashes/esm/utils.js", "../node_modules/ox/node_modules/@noble/hashes/esm/_md.js", "../node_modules/ox/node_modules/@noble/hashes/esm/_u64.js", "../node_modules/ox/node_modules/@noble/hashes/esm/sha3.js", "../node_modules/ox/node_modules/@noble/hashes/esm/sha2.js", "../node_modules/ox/_esm/core/Hash.js", "../node_modules/ox/_esm/core/PublicKey.js", "../node_modules/ox/_esm/core/Address.js", "../node_modules/ox/_esm/core/Solidity.js", "../node_modules/ox/_esm/core/internal/abiParameters.js", "../node_modules/ox/_esm/core/internal/cursor.js", "../node_modules/ox/_esm/core/AbiParameters.js", "../node_modules/ox/_esm/core/Rlp.js", "../node_modules/ox/node_modules/@noble/hashes/esm/hmac.js", "../node_modules/ox/node_modules/@noble/curves/esm/abstract/modular.js", "../node_modules/ox/node_modules/@noble/curves/esm/abstract/curve.js", "../node_modules/ox/node_modules/@noble/curves/esm/abstract/weierstrass.js", "../node_modules/ox/node_modules/@noble/curves/esm/_shortw_utils.js", "../node_modules/ox/node_modules/@noble/curves/esm/secp256k1.js", "../node_modules/ox/_esm/core/Signature.js", "../node_modules/ox/_esm/core/Authorization.js", "../node_modules/ox/_esm/core/Secp256k1.js", "../node_modules/ox/_esm/erc8010/SignatureErc8010.js", "../node_modules/ox/_esm/erc8010/index.js", "../node_modules/viem/_esm/errors/unit.js", "../node_modules/viem/_esm/utils/unit/parseUnits.js", "../node_modules/viem/_esm/utils/unit/parseEther.js", "../node_modules/viem/_esm/utils/index.js", "../node_modules/viem/_esm/utils/formatters/proof.js", "../node_modules/viem/_esm/actions/public/getProof.js", "../node_modules/viem/_esm/actions/public/getStorageAt.js", "../node_modules/viem/_esm/actions/public/getTransaction.js", "../node_modules/viem/_esm/actions/public/getTransactionConfirmations.js", "../node_modules/viem/_esm/actions/public/getTransactionReceipt.js", "../node_modules/viem/_esm/actions/public/multicall.js", "../node_modules/viem/_esm/actions/public/simulateBlocks.js", "../node_modules/ox/_esm/core/internal/abiItem.js", "../node_modules/ox/_esm/core/AbiItem.js", "../node_modules/ox/_esm/core/AbiConstructor.js", "../node_modules/ox/_esm/core/AbiFunction.js", "../node_modules/viem/_esm/constants/address.js", "../node_modules/viem/_esm/actions/public/simulateCalls.js", "../node_modules/ox/_esm/erc6492/SignatureErc6492.js", "../node_modules/ox/_esm/erc6492/index.js", "../node_modules/viem/_esm/utils/signature/serializeSignature.js", "../node_modules/viem/_esm/actions/public/verifyHash.js", "../node_modules/viem/_esm/actions/public/verifyMessage.js", "../node_modules/viem/_esm/actions/public/verifyTypedData.js", "../node_modules/viem/_esm/actions/public/watchBlockNumber.js", "../node_modules/viem/_esm/actions/public/waitForTransactionReceipt.js", "../node_modules/viem/_esm/actions/public/watchBlocks.js", "../node_modules/viem/_esm/actions/public/watchEvent.js", "../node_modules/viem/_esm/actions/public/watchPendingTransactions.js", "../node_modules/viem/_esm/utils/siwe/parseSiweMessage.js", "../node_modules/viem/_esm/utils/siwe/validateSiweMessage.js", "../node_modules/viem/_esm/actions/siwe/verifySiweMessage.js", "../node_modules/viem/_esm/actions/wallet/sendRawTransactionSync.js", "../node_modules/viem/_esm/clients/decorators/public.js", "../node_modules/viem/_esm/clients/createPublicClient.js", "../node_modules/viem/_esm/actions/wallet/addChain.js", "../node_modules/viem/_esm/actions/wallet/deployContract.js", "../node_modules/viem/_esm/actions/wallet/getAddresses.js", "../node_modules/viem/_esm/actions/wallet/getCapabilities.js", "../node_modules/viem/_esm/actions/wallet/getPermissions.js", "../node_modules/viem/_esm/actions/wallet/prepareAuthorization.js", "../node_modules/viem/_esm/actions/wallet/requestAddresses.js", "../node_modules/viem/_esm/actions/wallet/requestPermissions.js", "../node_modules/viem/_esm/actions/wallet/sendCallsSync.js", "../node_modules/viem/_esm/actions/wallet/sendTransactionSync.js", "../node_modules/viem/_esm/actions/wallet/showCallsStatus.js", "../node_modules/viem/_esm/actions/wallet/signAuthorization.js", "../node_modules/viem/_esm/actions/wallet/signMessage.js", "../node_modules/viem/_esm/actions/wallet/signTransaction.js", "../node_modules/viem/_esm/actions/wallet/signTypedData.js", "../node_modules/viem/_esm/actions/wallet/switchChain.js", "../node_modules/viem/_esm/actions/wallet/watchAsset.js", "../node_modules/viem/_esm/actions/wallet/writeContractSync.js", "../node_modules/viem/_esm/clients/decorators/wallet.js", "../node_modules/viem/_esm/clients/createWalletClient.js", "../node_modules/viem/_esm/clients/transports/createTransport.js", "../node_modules/viem/_esm/errors/transport.js", "../node_modules/viem/_esm/clients/transports/http.js", "../node_modules/viem/_esm/index.js", "../node_modules/viem/_esm/accounts/toAccount.js", "../node_modules/viem/_esm/accounts/utils/sign.js", "../node_modules/viem/_esm/accounts/utils/signAuthorization.js", "../node_modules/viem/_esm/accounts/utils/signMessage.js", "../node_modules/viem/_esm/accounts/utils/signTransaction.js", "../node_modules/viem/_esm/accounts/utils/signTypedData.js", "../node_modules/viem/_esm/accounts/privateKeyToAccount.js", "../node_modules/viem/_esm/accounts/index.js", "../node_modules/viem/_esm/chains/definitions/sepolia.js", "../node_modules/viem/_esm/chains/index.js", "../src/nft-service.ts", "../src/index.ts", "../src/plugin.ts", "../src/evm-balance-plugin.ts", "../src/nft-plugin.ts", "../src/character.ts"],
  "sourcesContent": [
    "export const version = '1.1.0';\n//# sourceMappingURL=version.js.map",
    "import { version } from './version.js';\nexport class BaseError extends Error {\n    constructor(shortMessage, args = {}) {\n        const details = args.cause instanceof BaseError\n            ? args.cause.details\n            : args.cause?.message\n                ? args.cause.message\n                : args.details;\n        const docsPath = args.cause instanceof BaseError\n            ? args.cause.docsPath || args.docsPath\n            : args.docsPath;\n        const message = [\n            shortMessage || 'An error occurred.',\n            '',\n            ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n            ...(docsPath ? [`Docs: https://abitype.dev${docsPath}`] : []),\n            ...(details ? [`Details: ${details}`] : []),\n            `Version: abitype@${version}`,\n        ].join('\\n');\n        super(message);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiTypeError'\n        });\n        if (args.cause)\n            this.cause = args.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n}\n//# sourceMappingURL=errors.js.map",
    "// TODO: This looks cool. Need to check the performance of `new RegExp` versus defined inline though.\n// https://twitter.com/GabrielVergnaud/status/1622906834343366657\nexport function execTyped(regex, string) {\n    const match = regex.exec(string);\n    return match?.groups;\n}\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nexport const isTupleRegex = /^\\(.+?\\).*?$/;\n//# sourceMappingURL=regex.js.map",
    "import { execTyped } from '../regex.js';\n// https://regexr.com/7f7rv\nconst tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/;\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param abiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * const result = formatAbiParameter({ type: 'address', name: 'from' })\n * //    ^? const result: 'address from'\n */\nexport function formatAbiParameter(abiParameter) {\n    let type = abiParameter.type;\n    if (tupleRegex.test(abiParameter.type) && 'components' in abiParameter) {\n        type = '(';\n        const length = abiParameter.components.length;\n        for (let i = 0; i < length; i++) {\n            const component = abiParameter.components[i];\n            type += formatAbiParameter(component);\n            if (i < length - 1)\n                type += ', ';\n        }\n        const result = execTyped(tupleRegex, abiParameter.type);\n        type += `)${result?.array ?? ''}`;\n        return formatAbiParameter({\n            ...abiParameter,\n            type,\n        });\n    }\n    // Add `indexed` to type if in `abiParameter`\n    if ('indexed' in abiParameter && abiParameter.indexed)\n        type = `${type} indexed`;\n    // Return human-readable ABI parameter\n    if (abiParameter.name)\n        return `${type} ${abiParameter.name}`;\n    return type;\n}\n//# sourceMappingURL=formatAbiParameter.js.map",
    "import { formatAbiParameter, } from './formatAbiParameter.js';\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameters.\n *\n * @param abiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * const result = formatAbiParameters([\n *   //  ^? const result: 'address from, uint256 tokenId'\n *   { type: 'address', name: 'from' },\n *   { type: 'uint256', name: 'tokenId' },\n * ])\n */\nexport function formatAbiParameters(abiParameters) {\n    let params = '';\n    const length = abiParameters.length;\n    for (let i = 0; i < length; i++) {\n        const abiParameter = abiParameters[i];\n        params += formatAbiParameter(abiParameter);\n        if (i !== length - 1)\n            params += ', ';\n    }\n    return params;\n}\n//# sourceMappingURL=formatAbiParameters.js.map",
    "import { formatAbiParameters, } from './formatAbiParameters.js';\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param abiItem - ABI item\n * @returns Human-readable ABI item\n */\nexport function formatAbiItem(abiItem) {\n    if (abiItem.type === 'function')\n        return `function ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== 'nonpayable'\n            ? ` ${abiItem.stateMutability}`\n            : ''}${abiItem.outputs?.length\n            ? ` returns (${formatAbiParameters(abiItem.outputs)})`\n            : ''}`;\n    if (abiItem.type === 'event')\n        return `event ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\n    if (abiItem.type === 'error')\n        return `error ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;\n    if (abiItem.type === 'constructor')\n        return `constructor(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability === 'payable' ? ' payable' : ''}`;\n    if (abiItem.type === 'fallback')\n        return `fallback() external${abiItem.stateMutability === 'payable' ? ' payable' : ''}`;\n    return 'receive() external payable';\n}\n//# sourceMappingURL=formatAbiItem.js.map",
    "import { execTyped } from '../../regex.js';\n// https://regexr.com/7gmok\nconst errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/;\nexport function isErrorSignature(signature) {\n    return errorSignatureRegex.test(signature);\n}\nexport function execErrorSignature(signature) {\n    return execTyped(errorSignatureRegex, signature);\n}\n// https://regexr.com/7gmoq\nconst eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/;\nexport function isEventSignature(signature) {\n    return eventSignatureRegex.test(signature);\n}\nexport function execEventSignature(signature) {\n    return execTyped(eventSignatureRegex, signature);\n}\n// https://regexr.com/7gmot\nconst functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\\s?\\((?<returns>.*?)\\))?$/;\nexport function isFunctionSignature(signature) {\n    return functionSignatureRegex.test(signature);\n}\nexport function execFunctionSignature(signature) {\n    return execTyped(functionSignatureRegex, signature);\n}\n// https://regexr.com/7gmp3\nconst structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \\{(?<properties>.*?)\\}$/;\nexport function isStructSignature(signature) {\n    return structSignatureRegex.test(signature);\n}\nexport function execStructSignature(signature) {\n    return execTyped(structSignatureRegex, signature);\n}\n// https://regexr.com/78u01\nconst constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nexport function isConstructorSignature(signature) {\n    return constructorSignatureRegex.test(signature);\n}\nexport function execConstructorSignature(signature) {\n    return execTyped(constructorSignatureRegex, signature);\n}\n// https://regexr.com/7srtn\nconst fallbackSignatureRegex = /^fallback\\(\\) external(?:\\s(?<stateMutability>payable{1}))?$/;\nexport function isFallbackSignature(signature) {\n    return fallbackSignatureRegex.test(signature);\n}\nexport function execFallbackSignature(signature) {\n    return execTyped(fallbackSignatureRegex, signature);\n}\n// https://regexr.com/78u1k\nconst receiveSignatureRegex = /^receive\\(\\) external payable$/;\nexport function isReceiveSignature(signature) {\n    return receiveSignatureRegex.test(signature);\n}\nexport const modifiers = new Set([\n    'memory',\n    'indexed',\n    'storage',\n    'calldata',\n]);\nexport const eventModifiers = new Set(['indexed']);\nexport const functionModifiers = new Set([\n    'calldata',\n    'memory',\n    'storage',\n]);\n//# sourceMappingURL=signatures.js.map",
    "import { BaseError } from '../../errors.js';\nexport class InvalidAbiItemError extends BaseError {\n    constructor({ signature }) {\n        super('Failed to parse ABI item.', {\n            details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\n            docsPath: '/api/human#parseabiitem-1',\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAbiItemError'\n        });\n    }\n}\nexport class UnknownTypeError extends BaseError {\n    constructor({ type }) {\n        super('Unknown type.', {\n            metaMessages: [\n                `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'UnknownTypeError'\n        });\n    }\n}\nexport class UnknownSolidityTypeError extends BaseError {\n    constructor({ type }) {\n        super('Unknown type.', {\n            metaMessages: [`Type \"${type}\" is not a valid ABI type.`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'UnknownSolidityTypeError'\n        });\n    }\n}\n//# sourceMappingURL=abiItem.js.map",
    "import { BaseError } from '../../errors.js';\nexport class InvalidAbiParameterError extends BaseError {\n    constructor({ param }) {\n        super('Failed to parse ABI parameter.', {\n            details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n            docsPath: '/api/human#parseabiparameter-1',\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAbiParameterError'\n        });\n    }\n}\nexport class InvalidAbiParametersError extends BaseError {\n    constructor({ params }) {\n        super('Failed to parse ABI parameters.', {\n            details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n            docsPath: '/api/human#parseabiparameters-1',\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAbiParametersError'\n        });\n    }\n}\nexport class InvalidParameterError extends BaseError {\n    constructor({ param }) {\n        super('Invalid ABI parameter.', {\n            details: param,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidParameterError'\n        });\n    }\n}\nexport class SolidityProtectedKeywordError extends BaseError {\n    constructor({ param, name }) {\n        super('Invalid ABI parameter.', {\n            details: param,\n            metaMessages: [\n                `\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SolidityProtectedKeywordError'\n        });\n    }\n}\nexport class InvalidModifierError extends BaseError {\n    constructor({ param, type, modifier, }) {\n        super('Invalid ABI parameter.', {\n            details: param,\n            metaMessages: [\n                `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : ''}.`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidModifierError'\n        });\n    }\n}\nexport class InvalidFunctionModifierError extends BaseError {\n    constructor({ param, type, modifier, }) {\n        super('Invalid ABI parameter.', {\n            details: param,\n            metaMessages: [\n                `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : ''}.`,\n                `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidFunctionModifierError'\n        });\n    }\n}\nexport class InvalidAbiTypeParameterError extends BaseError {\n    constructor({ abiParameter, }) {\n        super('Invalid ABI parameter.', {\n            details: JSON.stringify(abiParameter, null, 2),\n            metaMessages: ['ABI parameter type is invalid.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAbiTypeParameterError'\n        });\n    }\n}\n//# sourceMappingURL=abiParameter.js.map",
    "import { BaseError } from '../../errors.js';\nexport class InvalidSignatureError extends BaseError {\n    constructor({ signature, type, }) {\n        super(`Invalid ${type} signature.`, {\n            details: signature,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidSignatureError'\n        });\n    }\n}\nexport class UnknownSignatureError extends BaseError {\n    constructor({ signature }) {\n        super('Unknown signature.', {\n            details: signature,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'UnknownSignatureError'\n        });\n    }\n}\nexport class InvalidStructSignatureError extends BaseError {\n    constructor({ signature }) {\n        super('Invalid struct signature.', {\n            details: signature,\n            metaMessages: ['No properties exist.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidStructSignatureError'\n        });\n    }\n}\n//# sourceMappingURL=signature.js.map",
    "import { BaseError } from '../../errors.js';\nexport class CircularReferenceError extends BaseError {\n    constructor({ type }) {\n        super('Circular reference detected.', {\n            metaMessages: [`Struct \"${type}\" is a circular reference.`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'CircularReferenceError'\n        });\n    }\n}\n//# sourceMappingURL=struct.js.map",
    "import { BaseError } from '../../errors.js';\nexport class InvalidParenthesisError extends BaseError {\n    constructor({ current, depth }) {\n        super('Unbalanced parentheses.', {\n            metaMessages: [\n                `\"${current.trim()}\" has too many ${depth > 0 ? 'opening' : 'closing'} parentheses.`,\n            ],\n            details: `Depth \"${depth}\"`,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidParenthesisError'\n        });\n    }\n}\n//# sourceMappingURL=splitParameters.js.map",
    "/**\n * Gets {@link parameterCache} cache key namespaced by {@link type}. This prevents parameters from being accessible to types that don't allow them (e.g. `string indexed foo` not allowed outside of `type: 'event'`).\n * @param param ABI parameter string\n * @param type ABI parameter type\n * @returns Cache key for {@link parameterCache}\n */\nexport function getParameterCacheKey(param, type, structs) {\n    let structKey = '';\n    if (structs)\n        for (const struct of Object.entries(structs)) {\n            if (!struct)\n                continue;\n            let propertyKey = '';\n            for (const property of struct[1]) {\n                propertyKey += `[${property.type}${property.name ? `:${property.name}` : ''}]`;\n            }\n            structKey += `(${struct[0]}{${propertyKey}})`;\n        }\n    if (type)\n        return `${type}:${param}${structKey}`;\n    return param;\n}\n/**\n * Basic cache seeded with common ABI parameter strings.\n *\n * **Note: When seeding more parameters, make sure you benchmark performance. The current number is the ideal balance between performance and having an already existing cache.**\n */\nexport const parameterCache = new Map([\n    // Unnamed\n    ['address', { type: 'address' }],\n    ['bool', { type: 'bool' }],\n    ['bytes', { type: 'bytes' }],\n    ['bytes32', { type: 'bytes32' }],\n    ['int', { type: 'int256' }],\n    ['int256', { type: 'int256' }],\n    ['string', { type: 'string' }],\n    ['uint', { type: 'uint256' }],\n    ['uint8', { type: 'uint8' }],\n    ['uint16', { type: 'uint16' }],\n    ['uint24', { type: 'uint24' }],\n    ['uint32', { type: 'uint32' }],\n    ['uint64', { type: 'uint64' }],\n    ['uint96', { type: 'uint96' }],\n    ['uint112', { type: 'uint112' }],\n    ['uint160', { type: 'uint160' }],\n    ['uint192', { type: 'uint192' }],\n    ['uint256', { type: 'uint256' }],\n    // Named\n    ['address owner', { type: 'address', name: 'owner' }],\n    ['address to', { type: 'address', name: 'to' }],\n    ['bool approved', { type: 'bool', name: 'approved' }],\n    ['bytes _data', { type: 'bytes', name: '_data' }],\n    ['bytes data', { type: 'bytes', name: 'data' }],\n    ['bytes signature', { type: 'bytes', name: 'signature' }],\n    ['bytes32 hash', { type: 'bytes32', name: 'hash' }],\n    ['bytes32 r', { type: 'bytes32', name: 'r' }],\n    ['bytes32 root', { type: 'bytes32', name: 'root' }],\n    ['bytes32 s', { type: 'bytes32', name: 's' }],\n    ['string name', { type: 'string', name: 'name' }],\n    ['string symbol', { type: 'string', name: 'symbol' }],\n    ['string tokenURI', { type: 'string', name: 'tokenURI' }],\n    ['uint tokenId', { type: 'uint256', name: 'tokenId' }],\n    ['uint8 v', { type: 'uint8', name: 'v' }],\n    ['uint256 balance', { type: 'uint256', name: 'balance' }],\n    ['uint256 tokenId', { type: 'uint256', name: 'tokenId' }],\n    ['uint256 value', { type: 'uint256', name: 'value' }],\n    // Indexed\n    [\n        'event:address indexed from',\n        { type: 'address', name: 'from', indexed: true },\n    ],\n    ['event:address indexed to', { type: 'address', name: 'to', indexed: true }],\n    [\n        'event:uint indexed tokenId',\n        { type: 'uint256', name: 'tokenId', indexed: true },\n    ],\n    [\n        'event:uint256 indexed tokenId',\n        { type: 'uint256', name: 'tokenId', indexed: true },\n    ],\n]);\n//# sourceMappingURL=cache.js.map",
    "import { bytesRegex, execTyped, integerRegex, isTupleRegex, } from '../../regex.js';\nimport { UnknownSolidityTypeError } from '../errors/abiItem.js';\nimport { InvalidFunctionModifierError, InvalidModifierError, InvalidParameterError, SolidityProtectedKeywordError, } from '../errors/abiParameter.js';\nimport { InvalidSignatureError, UnknownSignatureError, } from '../errors/signature.js';\nimport { InvalidParenthesisError } from '../errors/splitParameters.js';\nimport { getParameterCacheKey, parameterCache } from './cache.js';\nimport { eventModifiers, execConstructorSignature, execErrorSignature, execEventSignature, execFallbackSignature, execFunctionSignature, functionModifiers, isConstructorSignature, isErrorSignature, isEventSignature, isFallbackSignature, isFunctionSignature, isReceiveSignature, } from './signatures.js';\nexport function parseSignature(signature, structs = {}) {\n    if (isFunctionSignature(signature))\n        return parseFunctionSignature(signature, structs);\n    if (isEventSignature(signature))\n        return parseEventSignature(signature, structs);\n    if (isErrorSignature(signature))\n        return parseErrorSignature(signature, structs);\n    if (isConstructorSignature(signature))\n        return parseConstructorSignature(signature, structs);\n    if (isFallbackSignature(signature))\n        return parseFallbackSignature(signature);\n    if (isReceiveSignature(signature))\n        return {\n            type: 'receive',\n            stateMutability: 'payable',\n        };\n    throw new UnknownSignatureError({ signature });\n}\nexport function parseFunctionSignature(signature, structs = {}) {\n    const match = execFunctionSignature(signature);\n    if (!match)\n        throw new InvalidSignatureError({ signature, type: 'function' });\n    const inputParams = splitParameters(match.parameters);\n    const inputs = [];\n    const inputLength = inputParams.length;\n    for (let i = 0; i < inputLength; i++) {\n        inputs.push(parseAbiParameter(inputParams[i], {\n            modifiers: functionModifiers,\n            structs,\n            type: 'function',\n        }));\n    }\n    const outputs = [];\n    if (match.returns) {\n        const outputParams = splitParameters(match.returns);\n        const outputLength = outputParams.length;\n        for (let i = 0; i < outputLength; i++) {\n            outputs.push(parseAbiParameter(outputParams[i], {\n                modifiers: functionModifiers,\n                structs,\n                type: 'function',\n            }));\n        }\n    }\n    return {\n        name: match.name,\n        type: 'function',\n        stateMutability: match.stateMutability ?? 'nonpayable',\n        inputs,\n        outputs,\n    };\n}\nexport function parseEventSignature(signature, structs = {}) {\n    const match = execEventSignature(signature);\n    if (!match)\n        throw new InvalidSignatureError({ signature, type: 'event' });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++)\n        abiParameters.push(parseAbiParameter(params[i], {\n            modifiers: eventModifiers,\n            structs,\n            type: 'event',\n        }));\n    return { name: match.name, type: 'event', inputs: abiParameters };\n}\nexport function parseErrorSignature(signature, structs = {}) {\n    const match = execErrorSignature(signature);\n    if (!match)\n        throw new InvalidSignatureError({ signature, type: 'error' });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++)\n        abiParameters.push(parseAbiParameter(params[i], { structs, type: 'error' }));\n    return { name: match.name, type: 'error', inputs: abiParameters };\n}\nexport function parseConstructorSignature(signature, structs = {}) {\n    const match = execConstructorSignature(signature);\n    if (!match)\n        throw new InvalidSignatureError({ signature, type: 'constructor' });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++)\n        abiParameters.push(parseAbiParameter(params[i], { structs, type: 'constructor' }));\n    return {\n        type: 'constructor',\n        stateMutability: match.stateMutability ?? 'nonpayable',\n        inputs: abiParameters,\n    };\n}\nexport function parseFallbackSignature(signature) {\n    const match = execFallbackSignature(signature);\n    if (!match)\n        throw new InvalidSignatureError({ signature, type: 'fallback' });\n    return {\n        type: 'fallback',\n        stateMutability: match.stateMutability ?? 'nonpayable',\n    };\n}\nconst abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*(?:\\spayable)?)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst dynamicIntegerRegex = /^u?int$/;\nexport function parseAbiParameter(param, options) {\n    // optional namespace cache by `type`\n    const parameterCacheKey = getParameterCacheKey(param, options?.type, options?.structs);\n    if (parameterCache.has(parameterCacheKey))\n        return parameterCache.get(parameterCacheKey);\n    const isTuple = isTupleRegex.test(param);\n    const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n    if (!match)\n        throw new InvalidParameterError({ param });\n    if (match.name && isSolidityKeyword(match.name))\n        throw new SolidityProtectedKeywordError({ param, name: match.name });\n    const name = match.name ? { name: match.name } : {};\n    const indexed = match.modifier === 'indexed' ? { indexed: true } : {};\n    const structs = options?.structs ?? {};\n    let type;\n    let components = {};\n    if (isTuple) {\n        type = 'tuple';\n        const params = splitParameters(match.type);\n        const components_ = [];\n        const length = params.length;\n        for (let i = 0; i < length; i++) {\n            // remove `modifiers` from `options` to prevent from being added to tuple components\n            components_.push(parseAbiParameter(params[i], { structs }));\n        }\n        components = { components: components_ };\n    }\n    else if (match.type in structs) {\n        type = 'tuple';\n        components = { components: structs[match.type] };\n    }\n    else if (dynamicIntegerRegex.test(match.type)) {\n        type = `${match.type}256`;\n    }\n    else if (match.type === 'address payable') {\n        type = 'address';\n    }\n    else {\n        type = match.type;\n        if (!(options?.type === 'struct') && !isSolidityType(type))\n            throw new UnknownSolidityTypeError({ type });\n    }\n    if (match.modifier) {\n        // Check if modifier exists, but is not allowed (e.g. `indexed` in `functionModifiers`)\n        if (!options?.modifiers?.has?.(match.modifier))\n            throw new InvalidModifierError({\n                param,\n                type: options?.type,\n                modifier: match.modifier,\n            });\n        // Check if resolved `type` is valid if there is a function modifier\n        if (functionModifiers.has(match.modifier) &&\n            !isValidDataLocation(type, !!match.array))\n            throw new InvalidFunctionModifierError({\n                param,\n                type: options?.type,\n                modifier: match.modifier,\n            });\n    }\n    const abiParameter = {\n        type: `${type}${match.array ?? ''}`,\n        ...name,\n        ...indexed,\n        ...components,\n    };\n    parameterCache.set(parameterCacheKey, abiParameter);\n    return abiParameter;\n}\n// s/o latika for this\nexport function splitParameters(params, result = [], current = '', depth = 0) {\n    const length = params.trim().length;\n    // biome-ignore lint/correctness/noUnreachable: recursive\n    for (let i = 0; i < length; i++) {\n        const char = params[i];\n        const tail = params.slice(i + 1);\n        switch (char) {\n            case ',':\n                return depth === 0\n                    ? splitParameters(tail, [...result, current.trim()])\n                    : splitParameters(tail, result, `${current}${char}`, depth);\n            case '(':\n                return splitParameters(tail, result, `${current}${char}`, depth + 1);\n            case ')':\n                return splitParameters(tail, result, `${current}${char}`, depth - 1);\n            default:\n                return splitParameters(tail, result, `${current}${char}`, depth);\n        }\n    }\n    if (current === '')\n        return result;\n    if (depth !== 0)\n        throw new InvalidParenthesisError({ current, depth });\n    result.push(current.trim());\n    return result;\n}\nexport function isSolidityType(type) {\n    return (type === 'address' ||\n        type === 'bool' ||\n        type === 'function' ||\n        type === 'string' ||\n        bytesRegex.test(type) ||\n        integerRegex.test(type));\n}\nconst protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\n/** @internal */\nexport function isSolidityKeyword(name) {\n    return (name === 'address' ||\n        name === 'bool' ||\n        name === 'function' ||\n        name === 'string' ||\n        name === 'tuple' ||\n        bytesRegex.test(name) ||\n        integerRegex.test(name) ||\n        protectedKeywordsRegex.test(name));\n}\n/** @internal */\nexport function isValidDataLocation(type, isArray) {\n    return isArray || type === 'bytes' || type === 'string' || type === 'tuple';\n}\n//# sourceMappingURL=utils.js.map",
    "import { execTyped, isTupleRegex } from '../../regex.js';\nimport { UnknownTypeError } from '../errors/abiItem.js';\nimport { InvalidAbiTypeParameterError } from '../errors/abiParameter.js';\nimport { InvalidSignatureError, InvalidStructSignatureError, } from '../errors/signature.js';\nimport { CircularReferenceError } from '../errors/struct.js';\nimport { execStructSignature, isStructSignature } from './signatures.js';\nimport { isSolidityType, parseAbiParameter } from './utils.js';\nexport function parseStructs(signatures) {\n    // Create \"shallow\" version of each struct (and filter out non-structs or invalid structs)\n    const shallowStructs = {};\n    const signaturesLength = signatures.length;\n    for (let i = 0; i < signaturesLength; i++) {\n        const signature = signatures[i];\n        if (!isStructSignature(signature))\n            continue;\n        const match = execStructSignature(signature);\n        if (!match)\n            throw new InvalidSignatureError({ signature, type: 'struct' });\n        const properties = match.properties.split(';');\n        const components = [];\n        const propertiesLength = properties.length;\n        for (let k = 0; k < propertiesLength; k++) {\n            const property = properties[k];\n            const trimmed = property.trim();\n            if (!trimmed)\n                continue;\n            const abiParameter = parseAbiParameter(trimmed, {\n                type: 'struct',\n            });\n            components.push(abiParameter);\n        }\n        if (!components.length)\n            throw new InvalidStructSignatureError({ signature });\n        shallowStructs[match.name] = components;\n    }\n    // Resolve nested structs inside each parameter\n    const resolvedStructs = {};\n    const entries = Object.entries(shallowStructs);\n    const entriesLength = entries.length;\n    for (let i = 0; i < entriesLength; i++) {\n        const [name, parameters] = entries[i];\n        resolvedStructs[name] = resolveStructs(parameters, shallowStructs);\n    }\n    return resolvedStructs;\n}\nconst typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs, ancestors = new Set()) {\n    const components = [];\n    const length = abiParameters.length;\n    for (let i = 0; i < length; i++) {\n        const abiParameter = abiParameters[i];\n        const isTuple = isTupleRegex.test(abiParameter.type);\n        if (isTuple)\n            components.push(abiParameter);\n        else {\n            const match = execTyped(typeWithoutTupleRegex, abiParameter.type);\n            if (!match?.type)\n                throw new InvalidAbiTypeParameterError({ abiParameter });\n            const { array, type } = match;\n            if (type in structs) {\n                if (ancestors.has(type))\n                    throw new CircularReferenceError({ type });\n                components.push({\n                    ...abiParameter,\n                    type: `tuple${array ?? ''}`,\n                    components: resolveStructs(structs[type] ?? [], structs, new Set([...ancestors, type])),\n                });\n            }\n            else {\n                if (isSolidityType(type))\n                    components.push(abiParameter);\n                else\n                    throw new UnknownTypeError({ type });\n            }\n        }\n    }\n    return components;\n}\n//# sourceMappingURL=structs.js.map",
    "import { isStructSignature } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { parseSignature } from './runtime/utils.js';\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param signatures - Human-Readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * const abi = parseAbi([\n *   //  ^? const abi: readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   'function balanceOf(address owner) view returns (uint256)',\n *   'event Transfer(address indexed from, address indexed to, uint256 amount)',\n * ])\n */\nexport function parseAbi(signatures) {\n    const structs = parseStructs(signatures);\n    const abi = [];\n    const length = signatures.length;\n    for (let i = 0; i < length; i++) {\n        const signature = signatures[i];\n        if (isStructSignature(signature))\n            continue;\n        abi.push(parseSignature(signature, structs));\n    }\n    return abi;\n}\n//# sourceMappingURL=parseAbi.js.map",
    "import { InvalidAbiItemError } from './errors/abiItem.js';\nimport { isStructSignature } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { parseSignature } from './runtime/utils.js';\n/**\n * Parses human-readable ABI item (e.g. error, event, function) into {@link Abi} item\n *\n * @param signature - Human-readable ABI item\n * @returns Parsed {@link Abi} item\n *\n * @example\n * const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\n * //    ^? const abiItem: { name: \"balanceOf\"; type: \"function\"; stateMutability: \"view\";...\n *\n * @example\n * const abiItem = parseAbiItem([\n *   //  ^? const abiItem: { name: \"foo\"; type: \"function\"; stateMutability: \"view\"; inputs:...\n *   'function foo(Baz bar) view returns (string)',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiItem(signature) {\n    let abiItem;\n    if (typeof signature === 'string')\n        abiItem = parseSignature(signature);\n    else {\n        const structs = parseStructs(signature);\n        const length = signature.length;\n        for (let i = 0; i < length; i++) {\n            const signature_ = signature[i];\n            if (isStructSignature(signature_))\n                continue;\n            abiItem = parseSignature(signature_, structs);\n            break;\n        }\n    }\n    if (!abiItem)\n        throw new InvalidAbiItemError({ signature });\n    return abiItem;\n}\n//# sourceMappingURL=parseAbiItem.js.map",
    "import { InvalidAbiParametersError } from './errors/abiParameter.js';\nimport { isStructSignature, modifiers } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { splitParameters } from './runtime/utils.js';\nimport { parseAbiParameter as parseAbiParameter_ } from './runtime/utils.js';\n/**\n * Parses human-readable ABI parameters into {@link AbiParameter}s\n *\n * @param params - Human-readable ABI parameters\n * @returns Parsed {@link AbiParameter}s\n *\n * @example\n * const abiParameters = parseAbiParameters('address from, address to, uint256 amount')\n * //    ^? const abiParameters: [{ type: \"address\"; name: \"from\"; }, { type: \"address\";...\n *\n * @example\n * const abiParameters = parseAbiParameters([\n *   //  ^? const abiParameters: [{ type: \"tuple\"; components: [{ type: \"string\"; name:...\n *   'Baz bar',\n *   'struct Baz { string name; }',\n * ])\n */\nexport function parseAbiParameters(params) {\n    const abiParameters = [];\n    if (typeof params === 'string') {\n        const parameters = splitParameters(params);\n        const length = parameters.length;\n        for (let i = 0; i < length; i++) {\n            abiParameters.push(parseAbiParameter_(parameters[i], { modifiers }));\n        }\n    }\n    else {\n        const structs = parseStructs(params);\n        const length = params.length;\n        for (let i = 0; i < length; i++) {\n            const signature = params[i];\n            if (isStructSignature(signature))\n                continue;\n            const parameters = splitParameters(signature);\n            const length = parameters.length;\n            for (let k = 0; k < length; k++) {\n                abiParameters.push(parseAbiParameter_(parameters[k], { modifiers, structs }));\n            }\n        }\n    }\n    if (abiParameters.length === 0)\n        throw new InvalidAbiParametersError({ params });\n    return abiParameters;\n}\n//# sourceMappingURL=parseAbiParameters.js.map",
    "// biome-ignore lint/performance/noBarrelFile: <explanation>\nexport { BaseError } from '../errors.js';\nexport { narrow } from '../narrow.js';\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Human-Readable\nexport { formatAbi, } from '../human-readable/formatAbi.js';\nexport { formatAbiItem, } from '../human-readable/formatAbiItem.js';\nexport { formatAbiParameter, } from '../human-readable/formatAbiParameter.js';\nexport { formatAbiParameters, } from '../human-readable/formatAbiParameters.js';\nexport { parseAbi } from '../human-readable/parseAbi.js';\nexport { parseAbiItem, } from '../human-readable/parseAbiItem.js';\nexport { parseAbiParameter, } from '../human-readable/parseAbiParameter.js';\nexport { parseAbiParameters, } from '../human-readable/parseAbiParameters.js';\nexport { UnknownTypeError, InvalidAbiItemError, UnknownSolidityTypeError, } from '../human-readable/errors/abiItem.js';\nexport { InvalidAbiTypeParameterError, InvalidFunctionModifierError, InvalidModifierError, SolidityProtectedKeywordError, InvalidParameterError, InvalidAbiParametersError, InvalidAbiParameterError, } from '../human-readable/errors/abiParameter.js';\nexport { InvalidStructSignatureError, InvalidSignatureError, UnknownSignatureError, } from '../human-readable/errors/signature.js';\nexport { InvalidParenthesisError } from '../human-readable/errors/splitParameters.js';\nexport { CircularReferenceError } from '../human-readable/errors/struct.js';\n//# sourceMappingURL=index.js.map",
    "/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction(client, actionFn, \n// Some minifiers drop `Function.prototype.name`, or replace it with short letters,\n// meaning that `actionFn.name` will not always work. For that case, the consumer\n// needs to pass the name explicitly.\nname) {\n    const action_implicit = client[actionFn.name];\n    if (typeof action_implicit === 'function')\n        return action_implicit;\n    const action_explicit = client[name];\n    if (typeof action_explicit === 'function')\n        return action_explicit;\n    return (params) => actionFn(client, params);\n}\n//# sourceMappingURL=getAction.js.map",
    "import { InvalidDefinitionTypeError, } from '../../errors/abi.js';\nexport function formatAbiItem(abiItem, { includeName = false } = {}) {\n    if (abiItem.type !== 'function' &&\n        abiItem.type !== 'event' &&\n        abiItem.type !== 'error')\n        throw new InvalidDefinitionTypeError(abiItem.type);\n    return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`;\n}\nexport function formatAbiParams(params, { includeName = false } = {}) {\n    if (!params)\n        return '';\n    return params\n        .map((param) => formatAbiParam(param, { includeName }))\n        .join(includeName ? ', ' : ',');\n}\nfunction formatAbiParam(param, { includeName }) {\n    if (param.type.startsWith('tuple')) {\n        return `(${formatAbiParams(param.components, { includeName })})${param.type.slice('tuple'.length)}`;\n    }\n    return param.type + (includeName && param.name ? ` ${param.name}` : '');\n}\n//# sourceMappingURL=formatAbiItem.js.map",
    "export function isHex(value, { strict = true } = {}) {\n    if (!value)\n        return false;\n    if (typeof value !== 'string')\n        return false;\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x');\n}\n//# sourceMappingURL=isHex.js.map",
    "import { isHex } from './isHex.js';\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value) {\n    if (isHex(value, { strict: false }))\n        return Math.ceil((value.length - 2) / 2);\n    return value.length;\n}\n//# sourceMappingURL=size.js.map",
    "export const version = '2.38.4';\n//# sourceMappingURL=version.js.map",
    "import { version } from './version.js';\nlet errorConfig = {\n    getDocsUrl: ({ docsBaseUrl, docsPath = '', docsSlug, }) => docsPath\n        ? `${docsBaseUrl ?? 'https://viem.sh'}${docsPath}${docsSlug ? `#${docsSlug}` : ''}`\n        : undefined,\n    version: `viem@${version}`,\n};\nexport function setErrorConfig(config) {\n    errorConfig = config;\n}\nexport class BaseError extends Error {\n    constructor(shortMessage, args = {}) {\n        const details = (() => {\n            if (args.cause instanceof BaseError)\n                return args.cause.details;\n            if (args.cause?.message)\n                return args.cause.message;\n            return args.details;\n        })();\n        const docsPath = (() => {\n            if (args.cause instanceof BaseError)\n                return args.cause.docsPath || args.docsPath;\n            return args.docsPath;\n        })();\n        const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath });\n        const message = [\n            shortMessage || 'An error occurred.',\n            '',\n            ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n            ...(docsUrl ? [`Docs: ${docsUrl}`] : []),\n            ...(details ? [`Details: ${details}`] : []),\n            ...(errorConfig.version ? [`Version: ${errorConfig.version}`] : []),\n        ].join('\\n');\n        super(message, args.cause ? { cause: args.cause } : undefined);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BaseError'\n        });\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.name = args.name ?? this.name;\n        this.shortMessage = shortMessage;\n        this.version = version;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\nfunction walk(err, fn) {\n    if (fn?.(err))\n        return err;\n    if (err &&\n        typeof err === 'object' &&\n        'cause' in err &&\n        err.cause !== undefined)\n        return walk(err.cause, fn);\n    return fn ? null : err;\n}\n//# sourceMappingURL=base.js.map",
    "import { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js';\nimport { size } from '../utils/data/size.js';\nimport { BaseError } from './base.js';\nexport class AbiConstructorNotFoundError extends BaseError {\n    constructor({ docsPath }) {\n        super([\n            'A constructor was not found on the ABI.',\n            'Make sure you are using the correct ABI and that the constructor exists on it.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiConstructorNotFoundError',\n        });\n    }\n}\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n    constructor({ docsPath }) {\n        super([\n            'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n            'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiConstructorParamsNotFoundError',\n        });\n    }\n}\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n    constructor({ data, size }) {\n        super([\n            `Data size of ${size} bytes is invalid.`,\n            'Size must be in increments of 32 bytes (size % 32 === 0).',\n        ].join('\\n'), {\n            metaMessages: [`Data: ${data} (${size} bytes)`],\n            name: 'AbiDecodingDataSizeInvalidError',\n        });\n    }\n}\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n    constructor({ data, params, size, }) {\n        super([`Data size of ${size} bytes is too small for given parameters.`].join('\\n'), {\n            metaMessages: [\n                `Params: (${formatAbiParams(params, { includeName: true })})`,\n                `Data:   ${data} (${size} bytes)`,\n            ],\n            name: 'AbiDecodingDataSizeTooSmallError',\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = data;\n        this.params = params;\n        this.size = size;\n    }\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n    constructor() {\n        super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n            name: 'AbiDecodingZeroDataError',\n        });\n    }\n}\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n    constructor({ expectedLength, givenLength, type, }) {\n        super([\n            `ABI encoding array length mismatch for type ${type}.`,\n            `Expected length: ${expectedLength}`,\n            `Given length: ${givenLength}`,\n        ].join('\\n'), { name: 'AbiEncodingArrayLengthMismatchError' });\n    }\n}\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n    constructor({ expectedSize, value }) {\n        super(`Size of bytes \"${value}\" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`, { name: 'AbiEncodingBytesSizeMismatchError' });\n    }\n}\nexport class AbiEncodingLengthMismatchError extends BaseError {\n    constructor({ expectedLength, givenLength, }) {\n        super([\n            'ABI encoding params/values length mismatch.',\n            `Expected length (params): ${expectedLength}`,\n            `Given length (values): ${givenLength}`,\n        ].join('\\n'), { name: 'AbiEncodingLengthMismatchError' });\n    }\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n    constructor(errorName, { docsPath }) {\n        super([\n            `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n            'Cannot encode error result without knowing what the parameter types are.',\n            'Make sure you are using the correct ABI and that the inputs exist on it.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiErrorInputsNotFoundError',\n        });\n    }\n}\nexport class AbiErrorNotFoundError extends BaseError {\n    constructor(errorName, { docsPath } = {}) {\n        super([\n            `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n            'Make sure you are using the correct ABI and that the error exists on it.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiErrorNotFoundError',\n        });\n    }\n}\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n    constructor(signature, { docsPath }) {\n        super([\n            `Encoded error signature \"${signature}\" not found on ABI.`,\n            'Make sure you are using the correct ABI and that the error exists on it.',\n            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiErrorSignatureNotFoundError',\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.signature = signature;\n    }\n}\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n    constructor({ docsPath }) {\n        super('Cannot extract event signature from empty topics.', {\n            docsPath,\n            name: 'AbiEventSignatureEmptyTopicsError',\n        });\n    }\n}\nexport class AbiEventSignatureNotFoundError extends BaseError {\n    constructor(signature, { docsPath }) {\n        super([\n            `Encoded event signature \"${signature}\" not found on ABI.`,\n            'Make sure you are using the correct ABI and that the event exists on it.',\n            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiEventSignatureNotFoundError',\n        });\n    }\n}\nexport class AbiEventNotFoundError extends BaseError {\n    constructor(eventName, { docsPath } = {}) {\n        super([\n            `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n            'Make sure you are using the correct ABI and that the event exists on it.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiEventNotFoundError',\n        });\n    }\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n    constructor(functionName, { docsPath } = {}) {\n        super([\n            `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n            'Make sure you are using the correct ABI and that the function exists on it.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiFunctionNotFoundError',\n        });\n    }\n}\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n    constructor(functionName, { docsPath }) {\n        super([\n            `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n            'Cannot decode function result without knowing what the parameter types are.',\n            'Make sure you are using the correct ABI and that the function exists on it.',\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiFunctionOutputsNotFoundError',\n        });\n    }\n}\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n    constructor(signature, { docsPath }) {\n        super([\n            `Encoded function signature \"${signature}\" not found on ABI.`,\n            'Make sure you are using the correct ABI and that the function exists on it.',\n            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n        ].join('\\n'), {\n            docsPath,\n            name: 'AbiFunctionSignatureNotFoundError',\n        });\n    }\n}\nexport class AbiItemAmbiguityError extends BaseError {\n    constructor(x, y) {\n        super('Found ambiguous types in overloaded ABI items.', {\n            metaMessages: [\n                `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n                `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n                '',\n                'These types encode differently and cannot be distinguished at runtime.',\n                'Remove one of the ambiguous items in the ABI.',\n            ],\n            name: 'AbiItemAmbiguityError',\n        });\n    }\n}\nexport class BytesSizeMismatchError extends BaseError {\n    constructor({ expectedSize, givenSize, }) {\n        super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\n            name: 'BytesSizeMismatchError',\n        });\n    }\n}\nexport class DecodeLogDataMismatch extends BaseError {\n    constructor({ abiItem, data, params, size, }) {\n        super([\n            `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n        ].join('\\n'), {\n            metaMessages: [\n                `Params: (${formatAbiParams(params, { includeName: true })})`,\n                `Data:   ${data} (${size} bytes)`,\n            ],\n            name: 'DecodeLogDataMismatch',\n        });\n        Object.defineProperty(this, \"abiItem\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.abiItem = abiItem;\n        this.data = data;\n        this.params = params;\n        this.size = size;\n    }\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n    constructor({ abiItem, param, }) {\n        super([\n            `Expected a topic for indexed event parameter${param.name ? ` \"${param.name}\"` : ''} on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n        ].join('\\n'), { name: 'DecodeLogTopicsMismatch' });\n        Object.defineProperty(this, \"abiItem\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.abiItem = abiItem;\n    }\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n    constructor(type, { docsPath }) {\n        super([\n            `Type \"${type}\" is not a valid encoding type.`,\n            'Please provide a valid ABI type.',\n        ].join('\\n'), { docsPath, name: 'InvalidAbiEncodingType' });\n    }\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n    constructor(type, { docsPath }) {\n        super([\n            `Type \"${type}\" is not a valid decoding type.`,\n            'Please provide a valid ABI type.',\n        ].join('\\n'), { docsPath, name: 'InvalidAbiDecodingType' });\n    }\n}\nexport class InvalidArrayError extends BaseError {\n    constructor(value) {\n        super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\n            name: 'InvalidArrayError',\n        });\n    }\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n    constructor(type) {\n        super([\n            `\"${type}\" is not a valid definition type.`,\n            'Valid types: \"function\", \"event\", \"error\"',\n        ].join('\\n'), { name: 'InvalidDefinitionTypeError' });\n    }\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n    constructor(type) {\n        super(`Type \"${type}\" is not supported for packed encoding.`, {\n            name: 'UnsupportedPackedAbiType',\n        });\n    }\n}\n//# sourceMappingURL=abi.js.map",
    "import { BaseError } from './base.js';\nexport class FilterTypeNotSupportedError extends BaseError {\n    constructor(type) {\n        super(`Filter type \"${type}\" is not supported.`, {\n            name: 'FilterTypeNotSupportedError',\n        });\n    }\n}\n//# sourceMappingURL=log.js.map",
    "import { BaseError } from './base.js';\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n    constructor({ offset, position, size, }) {\n        super(`Slice ${position === 'start' ? 'starting' : 'ending'} at offset \"${offset}\" is out-of-bounds (size: ${size}).`, { name: 'SliceOffsetOutOfBoundsError' });\n    }\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`, { name: 'SizeExceedsPaddingSizeError' });\n    }\n}\nexport class InvalidBytesLengthError extends BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`, { name: 'InvalidBytesLengthError' });\n    }\n}\n//# sourceMappingURL=data.js.map",
    "import { SizeExceedsPaddingSizeError, } from '../../errors/data.js';\nexport function pad(hexOrBytes, { dir, size = 32 } = {}) {\n    if (typeof hexOrBytes === 'string')\n        return padHex(hexOrBytes, { dir, size });\n    return padBytes(hexOrBytes, { dir, size });\n}\nexport function padHex(hex_, { dir, size = 32 } = {}) {\n    if (size === null)\n        return hex_;\n    const hex = hex_.replace('0x', '');\n    if (hex.length > size * 2)\n        throw new SizeExceedsPaddingSizeError({\n            size: Math.ceil(hex.length / 2),\n            targetSize: size,\n            type: 'hex',\n        });\n    return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n}\nexport function padBytes(bytes, { dir, size = 32 } = {}) {\n    if (size === null)\n        return bytes;\n    if (bytes.length > size)\n        throw new SizeExceedsPaddingSizeError({\n            size: bytes.length,\n            targetSize: size,\n            type: 'bytes',\n        });\n    const paddedBytes = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n        const padEnd = dir === 'right';\n        paddedBytes[padEnd ? i : size - i - 1] =\n            bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n}\n//# sourceMappingURL=pad.js.map",
    "import { BaseError } from './base.js';\nexport class IntegerOutOfRangeError extends BaseError {\n    constructor({ max, min, signed, size, value, }) {\n        super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: 'IntegerOutOfRangeError' });\n    }\n}\nexport class InvalidBytesBooleanError extends BaseError {\n    constructor(bytes) {\n        super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {\n            name: 'InvalidBytesBooleanError',\n        });\n    }\n}\nexport class InvalidHexBooleanError extends BaseError {\n    constructor(hex) {\n        super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`, { name: 'InvalidHexBooleanError' });\n    }\n}\nexport class InvalidHexValueError extends BaseError {\n    constructor(value) {\n        super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`, { name: 'InvalidHexValueError' });\n    }\n}\nexport class SizeOverflowError extends BaseError {\n    constructor({ givenSize, maxSize }) {\n        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: 'SizeOverflowError' });\n    }\n}\n//# sourceMappingURL=encoding.js.map",
    "export function trim(hexOrBytes, { dir = 'left' } = {}) {\n    let data = typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes;\n    let sliceLength = 0;\n    for (let i = 0; i < data.length - 1; i++) {\n        if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n            sliceLength++;\n        else\n            break;\n    }\n    data =\n        dir === 'left'\n            ? data.slice(sliceLength)\n            : data.slice(0, data.length - sliceLength);\n    if (typeof hexOrBytes === 'string') {\n        if (data.length === 1 && dir === 'right')\n            data = `${data}0`;\n        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;\n    }\n    return data;\n}\n//# sourceMappingURL=trim.js.map",
    "import { InvalidHexBooleanError, SizeOverflowError, } from '../../errors/encoding.js';\nimport { size as size_ } from '../data/size.js';\nimport { trim } from '../data/trim.js';\nimport { hexToBytes } from './toBytes.js';\nexport function assertSize(hexOrBytes, { size }) {\n    if (size_(hexOrBytes) > size)\n        throw new SizeOverflowError({\n            givenSize: size_(hexOrBytes),\n            maxSize: size,\n        });\n}\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex(hex, toOrOpts) {\n    const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts;\n    const to = opts.to;\n    if (to === 'number')\n        return hexToNumber(hex, opts);\n    if (to === 'bigint')\n        return hexToBigInt(hex, opts);\n    if (to === 'string')\n        return hexToString(hex, opts);\n    if (to === 'boolean')\n        return hexToBool(hex, opts);\n    return hexToBytes(hex, opts);\n}\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex, opts = {}) {\n    const { signed } = opts;\n    if (opts.size)\n        assertSize(hex, { size: opts.size });\n    const value = BigInt(hex);\n    if (!signed)\n        return value;\n    const size = (hex.length - 2) / 2;\n    const max = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n    if (value <= max)\n        return value;\n    return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n;\n}\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, { size: opts.size });\n        hex = trim(hex);\n    }\n    if (trim(hex) === '0x00')\n        return false;\n    if (trim(hex) === '0x01')\n        return true;\n    throw new InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex, opts = {}) {\n    return Number(hexToBigInt(hex, opts));\n}\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex, opts = {}) {\n    let bytes = hexToBytes(hex);\n    if (opts.size) {\n        assertSize(bytes, { size: opts.size });\n        bytes = trim(bytes, { dir: 'right' });\n    }\n    return new TextDecoder().decode(bytes);\n}\n//# sourceMappingURL=fromHex.js.map",
    "import { IntegerOutOfRangeError, } from '../../errors/encoding.js';\nimport { pad } from '../data/pad.js';\nimport { assertSize } from './fromHex.js';\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(value, opts = {}) {\n    if (typeof value === 'number' || typeof value === 'bigint')\n        return numberToHex(value, opts);\n    if (typeof value === 'string') {\n        return stringToHex(value, opts);\n    }\n    if (typeof value === 'boolean')\n        return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n}\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value, opts = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof opts.size === 'number') {\n        assertSize(hex, { size: opts.size });\n        return pad(hex, { size: opts.size });\n    }\n    return hex;\n}\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value, opts = {}) {\n    let string = '';\n    for (let i = 0; i < value.length; i++) {\n        string += hexes[value[i]];\n    }\n    const hex = `0x${string}`;\n    if (typeof opts.size === 'number') {\n        assertSize(hex, { size: opts.size });\n        return pad(hex, { dir: 'right', size: opts.size });\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(value_, opts = {}) {\n    const { signed, size } = opts;\n    const value = BigInt(value_);\n    let maxValue;\n    if (size) {\n        if (signed)\n            maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n        else\n            maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    }\n    else if (typeof value_ === 'number') {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0;\n    if ((maxValue && value > maxValue) || value < minValue) {\n        const suffix = typeof value_ === 'bigint' ? 'n' : '';\n        throw new IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value_}${suffix}`,\n        });\n    }\n    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16)}`;\n    if (size)\n        return pad(hex, { size });\n    return hex;\n}\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_, opts = {}) {\n    const value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n}\n//# sourceMappingURL=toHex.js.map",
    "import { BaseError } from '../../errors/base.js';\nimport { isHex } from '../data/isHex.js';\nimport { pad } from '../data/pad.js';\nimport { assertSize } from './fromHex.js';\nimport { numberToHex, } from './toHex.js';\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(value, opts = {}) {\n    if (typeof value === 'number' || typeof value === 'bigint')\n        return numberToBytes(value, opts);\n    if (typeof value === 'boolean')\n        return boolToBytes(value, opts);\n    if (isHex(value))\n        return hexToBytes(value, opts);\n    return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value, opts = {}) {\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof opts.size === 'number') {\n        assertSize(bytes, { size: opts.size });\n        return pad(bytes, { size: opts.size });\n    }\n    return bytes;\n}\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102,\n};\nfunction charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n        return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F)\n        return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f)\n        return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, { size: opts.size });\n        hex = pad(hex, { dir: 'right', size: opts.size });\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2)\n        hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for (let index = 0, j = 0; index < length; index++) {\n        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(value, opts) {\n    const hex = numberToHex(value, opts);\n    return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(value, opts = {}) {\n    const bytes = encoder.encode(value);\n    if (typeof opts.size === 'number') {\n        assertSize(bytes, { size: opts.size });\n        return pad(bytes, { dir: 'right', size: opts.size });\n    }\n    return bytes;\n}\n//# sourceMappingURL=toBytes.js.map",
    "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map",
    "/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto = nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? nc.webcrypto\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n        ? nc\n        : undefined;\n//# sourceMappingURL=cryptoNode.js.map",
    "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map",
    "/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from \"./_u64.js\";\n// prettier-ignore\nimport { abytes, aexists, anumber, aoutput, clean, createHasher, createXOFer, Hash, swap32IfBE, toBytes, u32 } from \"./utils.js\";\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst IOTAS = split(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    clean(B);\n}\n/** Keccak sponge function. */\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        this.enableXOF = false;\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (!(0 < blockLen && blockLen < 200))\n            throw new Error('only keccak-f1600 function is supported');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    keccak() {\n        swap32IfBE(this.state32);\n        keccakP(this.state32, this.rounds);\n        swap32IfBE(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { blockLen, state } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.state);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */\nexport const sha3_224 = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256 = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */\nexport const sha3_384 = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */\nexport const sha3_512 = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();\n/** keccak-224 hash function. */\nexport const keccak_224 = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256 = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();\n/** keccak-384 hash function. */\nexport const keccak_384 = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();\n/** keccak-512 hash function. */\nexport const keccak_512 = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();\nconst genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128 = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256 = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();\n//# sourceMappingURL=sha3.js.map",
    "import { keccak_256 } from '@noble/hashes/sha3';\nimport { isHex } from '../data/isHex.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { toHex } from '../encoding/toHex.js';\nexport function keccak256(value, to_) {\n    const to = to_ || 'hex';\n    const bytes = keccak_256(isHex(value, { strict: false }) ? toBytes(value) : value);\n    if (to === 'bytes')\n        return bytes;\n    return toHex(bytes);\n}\n//# sourceMappingURL=keccak256.js.map",
    "import { toBytes } from '../encoding/toBytes.js';\nimport { keccak256 } from './keccak256.js';\nconst hash = (value) => keccak256(toBytes(value));\nexport function hashSignature(sig) {\n    return hash(sig);\n}\n//# sourceMappingURL=hashSignature.js.map",
    "import { BaseError } from '../../errors/base.js';\nexport function normalizeSignature(signature) {\n    let active = true;\n    let current = '';\n    let level = 0;\n    let result = '';\n    let valid = false;\n    for (let i = 0; i < signature.length; i++) {\n        const char = signature[i];\n        // If the character is a separator, we want to reactivate.\n        if (['(', ')', ','].includes(char))\n            active = true;\n        // If the character is a \"level\" token, we want to increment/decrement.\n        if (char === '(')\n            level++;\n        if (char === ')')\n            level--;\n        // If we aren't active, we don't want to mutate the result.\n        if (!active)\n            continue;\n        // If level === 0, we are at the definition level.\n        if (level === 0) {\n            if (char === ' ' && ['event', 'function', ''].includes(result))\n                result = '';\n            else {\n                result += char;\n                // If we are at the end of the definition, we must be finished.\n                if (char === ')') {\n                    valid = true;\n                    break;\n                }\n            }\n            continue;\n        }\n        // Ignore spaces\n        if (char === ' ') {\n            // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n            if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n                current = '';\n                active = false;\n            }\n            continue;\n        }\n        result += char;\n        current += char;\n    }\n    if (!valid)\n        throw new BaseError('Unable to normalize signature.');\n    return result;\n}\n//# sourceMappingURL=normalizeSignature.js.map",
    "import { formatAbiItem } from 'abitype';\nimport { normalizeSignature, } from './normalizeSignature.js';\n/**\n * Returns the signature for a given function or event definition.\n *\n * @example\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\n * // 'ownerOf(uint256)'\n *\n * @example\n * const signature_3 = toSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // 'ownerOf(uint256)'\n */\nexport const toSignature = (def) => {\n    const def_ = (() => {\n        if (typeof def === 'string')\n            return def;\n        return formatAbiItem(def);\n    })();\n    return normalizeSignature(def_);\n};\n//# sourceMappingURL=toSignature.js.map",
    "import { hashSignature } from './hashSignature.js';\nimport { toSignature } from './toSignature.js';\n/**\n * Returns the hash (of the function/event signature) for a given event or function definition.\n */\nexport function toSignatureHash(fn) {\n    return hashSignature(toSignature(fn));\n}\n//# sourceMappingURL=toSignatureHash.js.map",
    "import { toSignatureHash, } from './toSignatureHash.js';\n/**\n * Returns the event selector for a given event definition.\n *\n * @example\n * const selector = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\n * // 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n */\nexport const toEventSelector = toSignatureHash;\n//# sourceMappingURL=toEventSelector.js.map",
    "import { BaseError } from './base.js';\nexport class InvalidAddressError extends BaseError {\n    constructor({ address }) {\n        super(`Address \"${address}\" is invalid.`, {\n            metaMessages: [\n                '- Address must be a hex value of 20 bytes (40 hex characters).',\n                '- Address must match its checksum counterpart.',\n            ],\n            name: 'InvalidAddressError',\n        });\n    }\n}\n//# sourceMappingURL=address.js.map",
    "/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap extends Map {\n    constructor(size) {\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    get(key) {\n        const value = super.get(key);\n        if (super.has(key) && value !== undefined) {\n            this.delete(key);\n            super.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize) {\n            const firstKey = this.keys().next().value;\n            if (firstKey)\n                this.delete(firstKey);\n        }\n        return this;\n    }\n}\n//# sourceMappingURL=lru.js.map",
    "import { InvalidAddressError } from '../../errors/address.js';\nimport { stringToBytes, } from '../encoding/toBytes.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { LruMap } from '../lru.js';\nimport { isAddress } from './isAddress.js';\nconst checksumAddressCache = /*#__PURE__*/ new LruMap(8192);\nexport function checksumAddress(address_, \n/**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */\nchainId) {\n    if (checksumAddressCache.has(`${address_}.${chainId}`))\n        return checksumAddressCache.get(`${address_}.${chainId}`);\n    const hexAddress = chainId\n        ? `${chainId}${address_.toLowerCase()}`\n        : address_.substring(2).toLowerCase();\n    const hash = keccak256(stringToBytes(hexAddress), 'bytes');\n    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split('');\n    for (let i = 0; i < 40; i += 2) {\n        if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n            address[i] = address[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n            address[i + 1] = address[i + 1].toUpperCase();\n        }\n    }\n    const result = `0x${address.join('')}`;\n    checksumAddressCache.set(`${address_}.${chainId}`, result);\n    return result;\n}\nexport function getAddress(address, \n/**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */\nchainId) {\n    if (!isAddress(address, { strict: false }))\n        throw new InvalidAddressError({ address });\n    return checksumAddress(address, chainId);\n}\n//# sourceMappingURL=getAddress.js.map",
    "import { LruMap } from '../lru.js';\nimport { checksumAddress } from './getAddress.js';\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap(8192);\nexport function isAddress(address, options) {\n    const { strict = true } = options ?? {};\n    const cacheKey = `${address}.${strict}`;\n    if (isAddressCache.has(cacheKey))\n        return isAddressCache.get(cacheKey);\n    const result = (() => {\n        if (!addressRegex.test(address))\n            return false;\n        if (address.toLowerCase() === address)\n            return true;\n        if (strict)\n            return checksumAddress(address) === address;\n        return true;\n    })();\n    isAddressCache.set(cacheKey, result);\n    return result;\n}\n//# sourceMappingURL=isAddress.js.map",
    "export function concat(values) {\n    if (typeof values[0] === 'string')\n        return concatHex(values);\n    return concatBytes(values);\n}\nexport function concatBytes(values) {\n    let length = 0;\n    for (const arr of values) {\n        length += arr.length;\n    }\n    const result = new Uint8Array(length);\n    let offset = 0;\n    for (const arr of values) {\n        result.set(arr, offset);\n        offset += arr.length;\n    }\n    return result;\n}\nexport function concatHex(values) {\n    return `0x${values.reduce((acc, x) => acc + x.replace('0x', ''), '')}`;\n}\n//# sourceMappingURL=concat.js.map",
    "import { SliceOffsetOutOfBoundsError, } from '../../errors/data.js';\nimport { isHex } from './isHex.js';\nimport { size } from './size.js';\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice(value, start, end, { strict } = {}) {\n    if (isHex(value, { strict: false }))\n        return sliceHex(value, start, end, {\n            strict,\n        });\n    return sliceBytes(value, start, end, {\n        strict,\n    });\n}\nfunction assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n        throw new SliceOffsetOutOfBoundsError({\n            offset: start,\n            position: 'start',\n            size: size(value),\n        });\n}\nfunction assertEndOffset(value, start, end) {\n    if (typeof start === 'number' &&\n        typeof end === 'number' &&\n        size(value) !== end - start) {\n        throw new SliceOffsetOutOfBoundsError({\n            offset: end,\n            position: 'end',\n            size: size(value),\n        });\n    }\n}\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(value_, start, end, { strict } = {}) {\n    assertStartOffset(value_, start);\n    const value = value_.slice(start, end);\n    if (strict)\n        assertEndOffset(value, start, end);\n    return value;\n}\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(value_, start, end, { strict } = {}) {\n    assertStartOffset(value_, start);\n    const value = `0x${value_\n        .replace('0x', '')\n        .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\n    if (strict)\n        assertEndOffset(value, start, end);\n    return value;\n}\n//# sourceMappingURL=slice.js.map",
    "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/;\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\n//# sourceMappingURL=regex.js.map",
    "import { AbiEncodingArrayLengthMismatchError, AbiEncodingBytesSizeMismatchError, AbiEncodingLengthMismatchError, InvalidAbiEncodingTypeError, InvalidArrayError, } from '../../errors/abi.js';\nimport { InvalidAddressError, } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { IntegerOutOfRangeError } from '../../errors/encoding.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { concat } from '../data/concat.js';\nimport { padHex } from '../data/pad.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { boolToHex, numberToHex, stringToHex, } from '../encoding/toHex.js';\nimport { integerRegex } from '../regex.js';\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nexport function encodeAbiParameters(params, values) {\n    if (params.length !== values.length)\n        throw new AbiEncodingLengthMismatchError({\n            expectedLength: params.length,\n            givenLength: values.length,\n        });\n    // Prepare the parameters to determine dynamic types to encode.\n    const preparedParams = prepareParams({\n        params: params,\n        values: values,\n    });\n    const data = encodeParams(preparedParams);\n    if (data.length === 0)\n        return '0x';\n    return data;\n}\nfunction prepareParams({ params, values, }) {\n    const preparedParams = [];\n    for (let i = 0; i < params.length; i++) {\n        preparedParams.push(prepareParam({ param: params[i], value: values[i] }));\n    }\n    return preparedParams;\n}\nfunction prepareParam({ param, value, }) {\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return encodeArray(value, { length, param: { ...param, type } });\n    }\n    if (param.type === 'tuple') {\n        return encodeTuple(value, {\n            param: param,\n        });\n    }\n    if (param.type === 'address') {\n        return encodeAddress(value);\n    }\n    if (param.type === 'bool') {\n        return encodeBool(value);\n    }\n    if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n        const signed = param.type.startsWith('int');\n        const [, , size = '256'] = integerRegex.exec(param.type) ?? [];\n        return encodeNumber(value, {\n            signed,\n            size: Number(size),\n        });\n    }\n    if (param.type.startsWith('bytes')) {\n        return encodeBytes(value, { param });\n    }\n    if (param.type === 'string') {\n        return encodeString(value);\n    }\n    throw new InvalidAbiEncodingTypeError(param.type, {\n        docsPath: '/docs/contract/encodeAbiParameters',\n    });\n}\nfunction encodeParams(preparedParams) {\n    // 1. Compute the size of the static part of the parameters.\n    let staticSize = 0;\n    for (let i = 0; i < preparedParams.length; i++) {\n        const { dynamic, encoded } = preparedParams[i];\n        if (dynamic)\n            staticSize += 32;\n        else\n            staticSize += size(encoded);\n    }\n    // 2. Split the parameters into static and dynamic parts.\n    const staticParams = [];\n    const dynamicParams = [];\n    let dynamicSize = 0;\n    for (let i = 0; i < preparedParams.length; i++) {\n        const { dynamic, encoded } = preparedParams[i];\n        if (dynamic) {\n            staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }));\n            dynamicParams.push(encoded);\n            dynamicSize += size(encoded);\n        }\n        else {\n            staticParams.push(encoded);\n        }\n    }\n    // 3. Concatenate static and dynamic parts.\n    return concat([...staticParams, ...dynamicParams]);\n}\nfunction encodeAddress(value) {\n    if (!isAddress(value))\n        throw new InvalidAddressError({ address: value });\n    return { dynamic: false, encoded: padHex(value.toLowerCase()) };\n}\nfunction encodeArray(value, { length, param, }) {\n    const dynamic = length === null;\n    if (!Array.isArray(value))\n        throw new InvalidArrayError(value);\n    if (!dynamic && value.length !== length)\n        throw new AbiEncodingArrayLengthMismatchError({\n            expectedLength: length,\n            givenLength: value.length,\n            type: `${param.type}[${length}]`,\n        });\n    let dynamicChild = false;\n    const preparedParams = [];\n    for (let i = 0; i < value.length; i++) {\n        const preparedParam = prepareParam({ param, value: value[i] });\n        if (preparedParam.dynamic)\n            dynamicChild = true;\n        preparedParams.push(preparedParam);\n    }\n    if (dynamic || dynamicChild) {\n        const data = encodeParams(preparedParams);\n        if (dynamic) {\n            const length = numberToHex(preparedParams.length, { size: 32 });\n            return {\n                dynamic: true,\n                encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n            };\n        }\n        if (dynamicChild)\n            return { dynamic: true, encoded: data };\n    }\n    return {\n        dynamic: false,\n        encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n    };\n}\nfunction encodeBytes(value, { param }) {\n    const [, paramSize] = param.type.split('bytes');\n    const bytesSize = size(value);\n    if (!paramSize) {\n        let value_ = value;\n        // If the size is not divisible by 32 bytes, pad the end\n        // with empty bytes to the ceiling 32 bytes.\n        if (bytesSize % 32 !== 0)\n            value_ = padHex(value_, {\n                dir: 'right',\n                size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n            });\n        return {\n            dynamic: true,\n            encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n        };\n    }\n    if (bytesSize !== Number.parseInt(paramSize, 10))\n        throw new AbiEncodingBytesSizeMismatchError({\n            expectedSize: Number.parseInt(paramSize, 10),\n            value,\n        });\n    return { dynamic: false, encoded: padHex(value, { dir: 'right' }) };\n}\nfunction encodeBool(value) {\n    if (typeof value !== 'boolean')\n        throw new BaseError(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`);\n    return { dynamic: false, encoded: padHex(boolToHex(value)) };\n}\nfunction encodeNumber(value, { signed, size = 256 }) {\n    if (typeof size === 'number') {\n        const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n;\n        const min = signed ? -max - 1n : 0n;\n        if (value > max || value < min)\n            throw new IntegerOutOfRangeError({\n                max: max.toString(),\n                min: min.toString(),\n                signed,\n                size: size / 8,\n                value: value.toString(),\n            });\n    }\n    return {\n        dynamic: false,\n        encoded: numberToHex(value, {\n            size: 32,\n            signed,\n        }),\n    };\n}\nfunction encodeString(value) {\n    const hexValue = stringToHex(value);\n    const partsLength = Math.ceil(size(hexValue) / 32);\n    const parts = [];\n    for (let i = 0; i < partsLength; i++) {\n        parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n            dir: 'right',\n        }));\n    }\n    return {\n        dynamic: true,\n        encoded: concat([\n            padHex(numberToHex(size(hexValue), { size: 32 })),\n            ...parts,\n        ]),\n    };\n}\nfunction encodeTuple(value, { param }) {\n    let dynamic = false;\n    const preparedParams = [];\n    for (let i = 0; i < param.components.length; i++) {\n        const param_ = param.components[i];\n        const index = Array.isArray(value) ? i : param_.name;\n        const preparedParam = prepareParam({\n            param: param_,\n            value: value[index],\n        });\n        preparedParams.push(preparedParam);\n        if (preparedParam.dynamic)\n            dynamic = true;\n    }\n    return {\n        dynamic,\n        encoded: dynamic\n            ? encodeParams(preparedParams)\n            : concat(preparedParams.map(({ encoded }) => encoded)),\n    };\n}\nexport function getArrayComponents(type) {\n    const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n    return matches\n        ? // Return `null` if the array is dynamic.\n            [matches[2] ? Number(matches[2]) : null, matches[1]]\n        : undefined;\n}\n//# sourceMappingURL=encodeAbiParameters.js.map",
    "import { slice } from '../data/slice.js';\nimport { toSignatureHash, } from './toSignatureHash.js';\n/**\n * Returns the function selector for a given function definition.\n *\n * @example\n * const selector = toFunctionSelector('function ownerOf(uint256 tokenId)')\n * // 0x6352211e\n */\nexport const toFunctionSelector = (fn) => slice(toSignatureHash(fn), 0, 4);\n//# sourceMappingURL=toFunctionSelector.js.map",
    "import { AbiItemAmbiguityError, } from '../../errors/abi.js';\nimport { isHex } from '../../utils/data/isHex.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { toEventSelector } from '../hash/toEventSelector.js';\nimport { toFunctionSelector, } from '../hash/toFunctionSelector.js';\nexport function getAbiItem(parameters) {\n    const { abi, args = [], name } = parameters;\n    const isSelector = isHex(name, { strict: false });\n    const abiItems = abi.filter((abiItem) => {\n        if (isSelector) {\n            if (abiItem.type === 'function')\n                return toFunctionSelector(abiItem) === name;\n            if (abiItem.type === 'event')\n                return toEventSelector(abiItem) === name;\n            return false;\n        }\n        return 'name' in abiItem && abiItem.name === name;\n    });\n    if (abiItems.length === 0)\n        return undefined;\n    if (abiItems.length === 1)\n        return abiItems[0];\n    let matchedAbiItem;\n    for (const abiItem of abiItems) {\n        if (!('inputs' in abiItem))\n            continue;\n        if (!args || args.length === 0) {\n            if (!abiItem.inputs || abiItem.inputs.length === 0)\n                return abiItem;\n            continue;\n        }\n        if (!abiItem.inputs)\n            continue;\n        if (abiItem.inputs.length === 0)\n            continue;\n        if (abiItem.inputs.length !== args.length)\n            continue;\n        const matched = args.every((arg, index) => {\n            const abiParameter = 'inputs' in abiItem && abiItem.inputs[index];\n            if (!abiParameter)\n                return false;\n            return isArgOfType(arg, abiParameter);\n        });\n        if (matched) {\n            // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n            if (matchedAbiItem &&\n                'inputs' in matchedAbiItem &&\n                matchedAbiItem.inputs) {\n                const ambiguousTypes = getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);\n                if (ambiguousTypes)\n                    throw new AbiItemAmbiguityError({\n                        abiItem,\n                        type: ambiguousTypes[0],\n                    }, {\n                        abiItem: matchedAbiItem,\n                        type: ambiguousTypes[1],\n                    });\n            }\n            matchedAbiItem = abiItem;\n        }\n    }\n    if (matchedAbiItem)\n        return matchedAbiItem;\n    return abiItems[0];\n}\n/** @internal */\nexport function isArgOfType(arg, abiParameter) {\n    const argType = typeof arg;\n    const abiParameterType = abiParameter.type;\n    switch (abiParameterType) {\n        case 'address':\n            return isAddress(arg, { strict: false });\n        case 'bool':\n            return argType === 'boolean';\n        case 'function':\n            return argType === 'string';\n        case 'string':\n            return argType === 'string';\n        default: {\n            if (abiParameterType === 'tuple' && 'components' in abiParameter)\n                return Object.values(abiParameter.components).every((component, index) => {\n                    return isArgOfType(Object.values(arg)[index], component);\n                });\n            // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n            // https://regexr.com/6v8hp\n            if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))\n                return argType === 'number' || argType === 'bigint';\n            // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n            // https://regexr.com/6va55\n            if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n                return argType === 'string' || arg instanceof Uint8Array;\n            // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n            // https://regexr.com/6va6i\n            if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n                return (Array.isArray(arg) &&\n                    arg.every((x) => isArgOfType(x, {\n                        ...abiParameter,\n                        // Pop off `[]` or `[M]` from end of type\n                        type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n                    })));\n            }\n            return false;\n        }\n    }\n}\n/** @internal */\nexport function getAmbiguousTypes(sourceParameters, targetParameters, args) {\n    for (const parameterIndex in sourceParameters) {\n        const sourceParameter = sourceParameters[parameterIndex];\n        const targetParameter = targetParameters[parameterIndex];\n        if (sourceParameter.type === 'tuple' &&\n            targetParameter.type === 'tuple' &&\n            'components' in sourceParameter &&\n            'components' in targetParameter)\n            return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);\n        const types = [sourceParameter.type, targetParameter.type];\n        const ambiguous = (() => {\n            if (types.includes('address') && types.includes('bytes20'))\n                return true;\n            if (types.includes('address') && types.includes('string'))\n                return isAddress(args[parameterIndex], { strict: false });\n            if (types.includes('address') && types.includes('bytes'))\n                return isAddress(args[parameterIndex], { strict: false });\n            return false;\n        })();\n        if (ambiguous)\n            return types;\n    }\n    return;\n}\n//# sourceMappingURL=getAbiItem.js.map",
    "import { AbiEventNotFoundError, } from '../../errors/abi.js';\nimport { FilterTypeNotSupportedError, } from '../../errors/log.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { toEventSelector, } from '../hash/toEventSelector.js';\nimport { encodeAbiParameters, } from './encodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeEventTopics';\nexport function encodeEventTopics(parameters) {\n    const { abi, eventName, args } = parameters;\n    let abiItem = abi[0];\n    if (eventName) {\n        const item = getAbiItem({ abi, name: eventName });\n        if (!item)\n            throw new AbiEventNotFoundError(eventName, { docsPath });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'event')\n        throw new AbiEventNotFoundError(undefined, { docsPath });\n    const definition = formatAbiItem(abiItem);\n    const signature = toEventSelector(definition);\n    let topics = [];\n    if (args && 'inputs' in abiItem) {\n        const indexedInputs = abiItem.inputs?.filter((param) => 'indexed' in param && param.indexed);\n        const args_ = Array.isArray(args)\n            ? args\n            : Object.values(args).length > 0\n                ? (indexedInputs?.map((x) => args[x.name]) ?? [])\n                : [];\n        if (args_.length > 0) {\n            topics =\n                indexedInputs?.map((param, i) => {\n                    if (Array.isArray(args_[i]))\n                        return args_[i].map((_, j) => encodeArg({ param, value: args_[i][j] }));\n                    return typeof args_[i] !== 'undefined' && args_[i] !== null\n                        ? encodeArg({ param, value: args_[i] })\n                        : null;\n                }) ?? [];\n        }\n    }\n    return [signature, ...topics];\n}\nfunction encodeArg({ param, value, }) {\n    if (param.type === 'string' || param.type === 'bytes')\n        return keccak256(toBytes(value));\n    if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n        throw new FilterTypeNotSupportedError(param.type);\n    return encodeAbiParameters([param], [value]);\n}\n//# sourceMappingURL=encodeEventTopics.js.map",
    "/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope(client, { method }) {\n    const requestMap = {};\n    if (client.transport.type === 'fallback')\n        client.transport.onResponse?.(({ method: method_, response: id, status, transport, }) => {\n            if (status === 'success' && method === method_)\n                requestMap[id] = transport.request;\n        });\n    return ((id) => requestMap[id] || client.request);\n}\n//# sourceMappingURL=createFilterRequestScope.js.map",
    "import { encodeEventTopics, } from '../../utils/abi/encodeEventTopics.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js';\n/**\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n *\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n *\n * @param client - Client to use\n * @param parameters - {@link CreateContractEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n * })\n */\nexport async function createContractEventFilter(client, parameters) {\n    const { address, abi, args, eventName, fromBlock, strict, toBlock } = parameters;\n    const getRequest = createFilterRequestScope(client, {\n        method: 'eth_newFilter',\n    });\n    const topics = eventName\n        ? encodeEventTopics({\n            abi,\n            args,\n            eventName,\n        })\n        : undefined;\n    const id = await client.request({\n        method: 'eth_newFilter',\n        params: [\n            {\n                address,\n                fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n                toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n                topics,\n            },\n        ],\n    });\n    return {\n        abi,\n        args,\n        eventName,\n        id,\n        request: getRequest(id),\n        strict: Boolean(strict),\n        type: 'event',\n    };\n}\n//# sourceMappingURL=createContractEventFilter.js.map",
    "export function parseAccount(account) {\n    if (typeof account === 'string')\n        return { address: account, type: 'json-rpc' };\n    return account;\n}\n//# sourceMappingURL=parseAccount.js.map",
    "import { AbiFunctionNotFoundError, } from '../../errors/abi.js';\nimport { toFunctionSelector, } from '../hash/toFunctionSelector.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeFunctionData';\nexport function prepareEncodeFunctionData(parameters) {\n    const { abi, args, functionName } = parameters;\n    let abiItem = abi[0];\n    if (functionName) {\n        const item = getAbiItem({\n            abi,\n            args,\n            name: functionName,\n        });\n        if (!item)\n            throw new AbiFunctionNotFoundError(functionName, { docsPath });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'function')\n        throw new AbiFunctionNotFoundError(undefined, { docsPath });\n    return {\n        abi: [abiItem],\n        functionName: toFunctionSelector(formatAbiItem(abiItem)),\n    };\n}\n//# sourceMappingURL=prepareEncodeFunctionData.js.map",
    "import { concatHex } from '../data/concat.js';\nimport { encodeAbiParameters, } from './encodeAbiParameters.js';\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js';\nexport function encodeFunctionData(parameters) {\n    const { args } = parameters;\n    const { abi, functionName } = (() => {\n        if (parameters.abi.length === 1 &&\n            parameters.functionName?.startsWith('0x'))\n            return parameters;\n        return prepareEncodeFunctionData(parameters);\n    })();\n    const abiItem = abi[0];\n    const signature = functionName;\n    const data = 'inputs' in abiItem && abiItem.inputs\n        ? encodeAbiParameters(abiItem.inputs, args ?? [])\n        : undefined;\n    return concatHex([signature, data ?? '0x']);\n}\n//# sourceMappingURL=encodeFunctionData.js.map",
    "// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nexport const panicReasons = {\n    1: 'An `assert` condition failed.',\n    17: 'Arithmetic operation resulted in underflow or overflow.',\n    18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n    33: 'Attempted to convert to an invalid type.',\n    34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n    49: 'Performed `.pop()` on an empty array',\n    50: 'Array index is out of bounds.',\n    65: 'Allocated too much memory or created an array which is too large.',\n    81: 'Attempted to call a zero-initialized variable of internal function type.',\n};\nexport const solidityError = {\n    inputs: [\n        {\n            name: 'message',\n            type: 'string',\n        },\n    ],\n    name: 'Error',\n    type: 'error',\n};\nexport const solidityPanic = {\n    inputs: [\n        {\n            name: 'reason',\n            type: 'uint256',\n        },\n    ],\n    name: 'Panic',\n    type: 'error',\n};\n//# sourceMappingURL=solidity.js.map",
    "import { BaseError } from './base.js';\nexport class NegativeOffsetError extends BaseError {\n    constructor({ offset }) {\n        super(`Offset \\`${offset}\\` cannot be negative.`, {\n            name: 'NegativeOffsetError',\n        });\n    }\n}\nexport class PositionOutOfBoundsError extends BaseError {\n    constructor({ length, position }) {\n        super(`Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`, { name: 'PositionOutOfBoundsError' });\n    }\n}\nexport class RecursiveReadLimitExceededError extends BaseError {\n    constructor({ count, limit }) {\n        super(`Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`, { name: 'RecursiveReadLimitExceededError' });\n    }\n}\n//# sourceMappingURL=cursor.js.map",
    "import { NegativeOffsetError, PositionOutOfBoundsError, RecursiveReadLimitExceededError, } from '../errors/cursor.js';\nconst staticCursor = {\n    bytes: new Uint8Array(),\n    dataView: new DataView(new ArrayBuffer(0)),\n    position: 0,\n    positionReadCount: new Map(),\n    recursiveReadCount: 0,\n    recursiveReadLimit: Number.POSITIVE_INFINITY,\n    assertReadLimit() {\n        if (this.recursiveReadCount >= this.recursiveReadLimit)\n            throw new RecursiveReadLimitExceededError({\n                count: this.recursiveReadCount + 1,\n                limit: this.recursiveReadLimit,\n            });\n    },\n    assertPosition(position) {\n        if (position < 0 || position > this.bytes.length - 1)\n            throw new PositionOutOfBoundsError({\n                length: this.bytes.length,\n                position,\n            });\n    },\n    decrementPosition(offset) {\n        if (offset < 0)\n            throw new NegativeOffsetError({ offset });\n        const position = this.position - offset;\n        this.assertPosition(position);\n        this.position = position;\n    },\n    getReadCount(position) {\n        return this.positionReadCount.get(position || this.position) || 0;\n    },\n    incrementPosition(offset) {\n        if (offset < 0)\n            throw new NegativeOffsetError({ offset });\n        const position = this.position + offset;\n        this.assertPosition(position);\n        this.position = position;\n    },\n    inspectByte(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position);\n        return this.bytes[position];\n    },\n    inspectBytes(length, position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + length - 1);\n        return this.bytes.subarray(position, position + length);\n    },\n    inspectUint8(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position);\n        return this.bytes[position];\n    },\n    inspectUint16(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 1);\n        return this.dataView.getUint16(position);\n    },\n    inspectUint24(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 2);\n        return ((this.dataView.getUint16(position) << 8) +\n            this.dataView.getUint8(position + 2));\n    },\n    inspectUint32(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 3);\n        return this.dataView.getUint32(position);\n    },\n    pushByte(byte) {\n        this.assertPosition(this.position);\n        this.bytes[this.position] = byte;\n        this.position++;\n    },\n    pushBytes(bytes) {\n        this.assertPosition(this.position + bytes.length - 1);\n        this.bytes.set(bytes, this.position);\n        this.position += bytes.length;\n    },\n    pushUint8(value) {\n        this.assertPosition(this.position);\n        this.bytes[this.position] = value;\n        this.position++;\n    },\n    pushUint16(value) {\n        this.assertPosition(this.position + 1);\n        this.dataView.setUint16(this.position, value);\n        this.position += 2;\n    },\n    pushUint24(value) {\n        this.assertPosition(this.position + 2);\n        this.dataView.setUint16(this.position, value >> 8);\n        this.dataView.setUint8(this.position + 2, value & ~4294967040);\n        this.position += 3;\n    },\n    pushUint32(value) {\n        this.assertPosition(this.position + 3);\n        this.dataView.setUint32(this.position, value);\n        this.position += 4;\n    },\n    readByte() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectByte();\n        this.position++;\n        return value;\n    },\n    readBytes(length, size) {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectBytes(length);\n        this.position += size ?? length;\n        return value;\n    },\n    readUint8() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint8();\n        this.position += 1;\n        return value;\n    },\n    readUint16() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint16();\n        this.position += 2;\n        return value;\n    },\n    readUint24() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint24();\n        this.position += 3;\n        return value;\n    },\n    readUint32() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint32();\n        this.position += 4;\n        return value;\n    },\n    get remaining() {\n        return this.bytes.length - this.position;\n    },\n    setPosition(position) {\n        const oldPosition = this.position;\n        this.assertPosition(position);\n        this.position = position;\n        return () => (this.position = oldPosition);\n    },\n    _touch() {\n        if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)\n            return;\n        const count = this.getReadCount();\n        this.positionReadCount.set(this.position, count + 1);\n        if (count > 0)\n            this.recursiveReadCount++;\n    },\n};\nexport function createCursor(bytes, { recursiveReadLimit = 8_192 } = {}) {\n    const cursor = Object.create(staticCursor);\n    cursor.bytes = bytes;\n    cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    cursor.positionReadCount = new Map();\n    cursor.recursiveReadLimit = recursiveReadLimit;\n    return cursor;\n}\n//# sourceMappingURL=cursor.js.map",
    "import { InvalidBytesBooleanError } from '../../errors/encoding.js';\nimport { trim } from '../data/trim.js';\nimport { assertSize, hexToBigInt, hexToNumber, } from './fromHex.js';\nimport { bytesToHex } from './toHex.js';\n/**\n * Decodes a byte array into a UTF-8 string, hex value, number, bigint or boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes\n * - Example: https://viem.sh/docs/utilities/fromBytes#usage\n *\n * @param bytes Byte array to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(new Uint8Array([1, 164]), 'number')\n * // 420\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(\n *   new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\n *   'string'\n * )\n * // 'Hello world'\n */\nexport function fromBytes(bytes, toOrOpts) {\n    const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts;\n    const to = opts.to;\n    if (to === 'number')\n        return bytesToNumber(bytes, opts);\n    if (to === 'bigint')\n        return bytesToBigInt(bytes, opts);\n    if (to === 'boolean')\n        return bytesToBool(bytes, opts);\n    if (to === 'string')\n        return bytesToString(bytes, opts);\n    return bytesToHex(bytes, opts);\n}\n/**\n * Decodes a byte array into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobigint\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { bytesToBigInt } from 'viem'\n * const data = bytesToBigInt(new Uint8Array([1, 164]))\n * // 420n\n */\nexport function bytesToBigInt(bytes, opts = {}) {\n    if (typeof opts.size !== 'undefined')\n        assertSize(bytes, { size: opts.size });\n    const hex = bytesToHex(bytes, opts);\n    return hexToBigInt(hex, opts);\n}\n/**\n * Decodes a byte array into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobool\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { bytesToBool } from 'viem'\n * const data = bytesToBool(new Uint8Array([1]))\n * // true\n */\nexport function bytesToBool(bytes_, opts = {}) {\n    let bytes = bytes_;\n    if (typeof opts.size !== 'undefined') {\n        assertSize(bytes, { size: opts.size });\n        bytes = trim(bytes);\n    }\n    if (bytes.length > 1 || bytes[0] > 1)\n        throw new InvalidBytesBooleanError(bytes);\n    return Boolean(bytes[0]);\n}\n/**\n * Decodes a byte array into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestonumber\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { bytesToNumber } from 'viem'\n * const data = bytesToNumber(new Uint8Array([1, 164]))\n * // 420\n */\nexport function bytesToNumber(bytes, opts = {}) {\n    if (typeof opts.size !== 'undefined')\n        assertSize(bytes, { size: opts.size });\n    const hex = bytesToHex(bytes, opts);\n    return hexToNumber(hex, opts);\n}\n/**\n * Decodes a byte array into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestostring\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { bytesToString } from 'viem'\n * const data = bytesToString(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // 'Hello world'\n */\nexport function bytesToString(bytes_, opts = {}) {\n    let bytes = bytes_;\n    if (typeof opts.size !== 'undefined') {\n        assertSize(bytes, { size: opts.size });\n        bytes = trim(bytes, { dir: 'right' });\n    }\n    return new TextDecoder().decode(bytes);\n}\n//# sourceMappingURL=fromBytes.js.map",
    "import { AbiDecodingDataSizeTooSmallError, AbiDecodingZeroDataError, InvalidAbiDecodingTypeError, } from '../../errors/abi.js';\nimport { checksumAddress, } from '../address/getAddress.js';\nimport { createCursor, } from '../cursor.js';\nimport { size } from '../data/size.js';\nimport { sliceBytes } from '../data/slice.js';\nimport { trim } from '../data/trim.js';\nimport { bytesToBigInt, bytesToBool, bytesToNumber, bytesToString, } from '../encoding/fromBytes.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\nimport { getArrayComponents } from './encodeAbiParameters.js';\nexport function decodeAbiParameters(params, data) {\n    const bytes = typeof data === 'string' ? hexToBytes(data) : data;\n    const cursor = createCursor(bytes);\n    if (size(bytes) === 0 && params.length > 0)\n        throw new AbiDecodingZeroDataError();\n    if (size(data) && size(data) < 32)\n        throw new AbiDecodingDataSizeTooSmallError({\n            data: typeof data === 'string' ? data : bytesToHex(data),\n            params: params,\n            size: size(data),\n        });\n    let consumed = 0;\n    const values = [];\n    for (let i = 0; i < params.length; ++i) {\n        const param = params[i];\n        cursor.setPosition(consumed);\n        const [data, consumed_] = decodeParameter(cursor, param, {\n            staticPosition: 0,\n        });\n        consumed += consumed_;\n        values.push(data);\n    }\n    return values;\n}\nfunction decodeParameter(cursor, param, { staticPosition }) {\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return decodeArray(cursor, { ...param, type }, { length, staticPosition });\n    }\n    if (param.type === 'tuple')\n        return decodeTuple(cursor, param, { staticPosition });\n    if (param.type === 'address')\n        return decodeAddress(cursor);\n    if (param.type === 'bool')\n        return decodeBool(cursor);\n    if (param.type.startsWith('bytes'))\n        return decodeBytes(cursor, param, { staticPosition });\n    if (param.type.startsWith('uint') || param.type.startsWith('int'))\n        return decodeNumber(cursor, param);\n    if (param.type === 'string')\n        return decodeString(cursor, { staticPosition });\n    throw new InvalidAbiDecodingTypeError(param.type, {\n        docsPath: '/docs/contract/decodeAbiParameters',\n    });\n}\n////////////////////////////////////////////////////////////////////\n// Type Decoders\nconst sizeOfLength = 32;\nconst sizeOfOffset = 32;\nfunction decodeAddress(cursor) {\n    const value = cursor.readBytes(32);\n    return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32];\n}\nfunction decodeArray(cursor, param, { length, staticPosition }) {\n    // If the length of the array is not known in advance (dynamic array),\n    // this means we will need to wonder off to the pointer and decode.\n    if (!length) {\n        // Dealing with a dynamic type, so get the offset of the array data.\n        const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of current slot + offset.\n        const start = staticPosition + offset;\n        const startOfData = start + sizeOfLength;\n        // Get the length of the array from the offset.\n        cursor.setPosition(start);\n        const length = bytesToNumber(cursor.readBytes(sizeOfLength));\n        // Check if the array has any dynamic children.\n        const dynamicChild = hasDynamicChild(param);\n        let consumed = 0;\n        const value = [];\n        for (let i = 0; i < length; ++i) {\n            // If any of the children is dynamic, then all elements will be offset pointer, thus size of one slot (32 bytes).\n            // Otherwise, elements will be the size of their encoding (consumed bytes).\n            cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed));\n            const [data, consumed_] = decodeParameter(cursor, param, {\n                staticPosition: startOfData,\n            });\n            consumed += consumed_;\n            value.push(data);\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the length of the array is known in advance,\n    // and the length of an element deeply nested in the array is not known,\n    // we need to decode the offset of the array data.\n    if (hasDynamicChild(param)) {\n        // Dealing with dynamic types, so get the offset of the array data.\n        const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of current slot + offset.\n        const start = staticPosition + offset;\n        const value = [];\n        for (let i = 0; i < length; ++i) {\n            // Move cursor along to the next slot (next offset pointer).\n            cursor.setPosition(start + i * 32);\n            const [data] = decodeParameter(cursor, param, {\n                staticPosition: start,\n            });\n            value.push(data);\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the length of the array is known in advance and the array is deeply static,\n    // then we can just decode each element in sequence.\n    let consumed = 0;\n    const value = [];\n    for (let i = 0; i < length; ++i) {\n        const [data, consumed_] = decodeParameter(cursor, param, {\n            staticPosition: staticPosition + consumed,\n        });\n        consumed += consumed_;\n        value.push(data);\n    }\n    return [value, consumed];\n}\nfunction decodeBool(cursor) {\n    return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32];\n}\nfunction decodeBytes(cursor, param, { staticPosition }) {\n    const [_, size] = param.type.split('bytes');\n    if (!size) {\n        // Dealing with dynamic types, so get the offset of the bytes data.\n        const offset = bytesToNumber(cursor.readBytes(32));\n        // Set position of the cursor to start of bytes data.\n        cursor.setPosition(staticPosition + offset);\n        const length = bytesToNumber(cursor.readBytes(32));\n        // If there is no length, we have zero data.\n        if (length === 0) {\n            // As we have gone wondering, restore to the original position + next slot.\n            cursor.setPosition(staticPosition + 32);\n            return ['0x', 32];\n        }\n        const data = cursor.readBytes(length);\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [bytesToHex(data), 32];\n    }\n    const value = bytesToHex(cursor.readBytes(Number.parseInt(size, 10), 32));\n    return [value, 32];\n}\nfunction decodeNumber(cursor, param) {\n    const signed = param.type.startsWith('int');\n    const size = Number.parseInt(param.type.split('int')[1] || '256', 10);\n    const value = cursor.readBytes(32);\n    return [\n        size > 48\n            ? bytesToBigInt(value, { signed })\n            : bytesToNumber(value, { signed }),\n        32,\n    ];\n}\nfunction decodeTuple(cursor, param, { staticPosition }) {\n    // Tuples can have unnamed components (i.e. they are arrays), so we must\n    // determine whether the tuple is named or unnamed. In the case of a named\n    // tuple, the value will be an object where each property is the name of the\n    // component. In the case of an unnamed tuple, the value will be an array.\n    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);\n    // Initialize the value to an object or an array, depending on whether the\n    // tuple is named or unnamed.\n    const value = hasUnnamedChild ? [] : {};\n    let consumed = 0;\n    // If the tuple has a dynamic child, we must first decode the offset to the\n    // tuple data.\n    if (hasDynamicChild(param)) {\n        // Dealing with dynamic types, so get the offset of the tuple data.\n        const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of referencing slot + offset.\n        const start = staticPosition + offset;\n        for (let i = 0; i < param.components.length; ++i) {\n            const component = param.components[i];\n            cursor.setPosition(start + consumed);\n            const [data, consumed_] = decodeParameter(cursor, component, {\n                staticPosition: start,\n            });\n            consumed += consumed_;\n            value[hasUnnamedChild ? i : component?.name] = data;\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the tuple has static children, we can just decode each component\n    // in sequence.\n    for (let i = 0; i < param.components.length; ++i) {\n        const component = param.components[i];\n        const [data, consumed_] = decodeParameter(cursor, component, {\n            staticPosition,\n        });\n        value[hasUnnamedChild ? i : component?.name] = data;\n        consumed += consumed_;\n    }\n    return [value, consumed];\n}\nfunction decodeString(cursor, { staticPosition }) {\n    // Get offset to start of string data.\n    const offset = bytesToNumber(cursor.readBytes(32));\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset;\n    cursor.setPosition(start);\n    const length = bytesToNumber(cursor.readBytes(32));\n    // If there is no length, we have zero data (empty string).\n    if (length === 0) {\n        cursor.setPosition(staticPosition + 32);\n        return ['', 32];\n    }\n    const data = cursor.readBytes(length, 32);\n    const value = bytesToString(trim(data));\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32);\n    return [value, 32];\n}\nfunction hasDynamicChild(param) {\n    const { type } = param;\n    if (type === 'string')\n        return true;\n    if (type === 'bytes')\n        return true;\n    if (type.endsWith('[]'))\n        return true;\n    if (type === 'tuple')\n        return param.components?.some(hasDynamicChild);\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents &&\n        hasDynamicChild({ ...param, type: arrayComponents[1] }))\n        return true;\n    return false;\n}\n//# sourceMappingURL=decodeAbiParameters.js.map",
    "import { solidityError, solidityPanic } from '../../constants/solidity.js';\nimport { AbiDecodingZeroDataError, AbiErrorSignatureNotFoundError, } from '../../errors/abi.js';\nimport { slice } from '../data/slice.js';\nimport { toFunctionSelector, } from '../hash/toFunctionSelector.js';\nimport { decodeAbiParameters, } from './decodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nexport function decodeErrorResult(parameters) {\n    const { abi, data } = parameters;\n    const signature = slice(data, 0, 4);\n    if (signature === '0x')\n        throw new AbiDecodingZeroDataError();\n    const abi_ = [...(abi || []), solidityError, solidityPanic];\n    const abiItem = abi_.find((x) => x.type === 'error' && signature === toFunctionSelector(formatAbiItem(x)));\n    if (!abiItem)\n        throw new AbiErrorSignatureNotFoundError(signature, {\n            docsPath: '/docs/contract/decodeErrorResult',\n        });\n    return {\n        abiItem,\n        args: 'inputs' in abiItem && abiItem.inputs && abiItem.inputs.length > 0\n            ? decodeAbiParameters(abiItem.inputs, slice(data, 4))\n            : undefined,\n        errorName: abiItem.name,\n    };\n}\n//# sourceMappingURL=decodeErrorResult.js.map",
    "export const stringify = (value, replacer, space) => JSON.stringify(value, (key, value_) => {\n    const value = typeof value_ === 'bigint' ? value_.toString() : value_;\n    return typeof replacer === 'function' ? replacer(key, value) : value;\n}, space);\n//# sourceMappingURL=stringify.js.map",
    "import { stringify } from '../stringify.js';\nexport function formatAbiItemWithArgs({ abiItem, args, includeFunctionName = true, includeName = false, }) {\n    if (!('name' in abiItem))\n        return;\n    if (!('inputs' in abiItem))\n        return;\n    if (!abiItem.inputs)\n        return;\n    return `${includeFunctionName ? abiItem.name : ''}(${abiItem.inputs\n        .map((input, i) => `${includeName && input.name ? `${input.name}: ` : ''}${typeof args[i] === 'object' ? stringify(args[i]) : args[i]}`)\n        .join(', ')})`;\n}\n//# sourceMappingURL=formatAbiItemWithArgs.js.map",
    "export const etherUnits = {\n    gwei: 9,\n    wei: 18,\n};\nexport const gweiUnits = {\n    ether: -9,\n    wei: 9,\n};\nexport const weiUnits = {\n    ether: -18,\n    gwei: -9,\n};\n//# sourceMappingURL=unit.js.map",
    "/**\n *  Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\n *\n * - Docs: https://viem.sh/docs/utilities/formatUnits\n *\n * @example\n * import { formatUnits } from 'viem'\n *\n * formatUnits(420000000000n, 9)\n * // '420'\n */\nexport function formatUnits(value, decimals) {\n    let display = value.toString();\n    const negative = display.startsWith('-');\n    if (negative)\n        display = display.slice(1);\n    display = display.padStart(decimals, '0');\n    let [integer, fraction] = [\n        display.slice(0, display.length - decimals),\n        display.slice(display.length - decimals),\n    ];\n    fraction = fraction.replace(/(0+)$/, '');\n    return `${negative ? '-' : ''}${integer || '0'}${fraction ? `.${fraction}` : ''}`;\n}\n//# sourceMappingURL=formatUnits.js.map",
    "import { etherUnits } from '../../constants/unit.js';\nimport { formatUnits } from './formatUnits.js';\n/**\n * Converts numerical wei to a string representation of ether.\n *\n * - Docs: https://viem.sh/docs/utilities/formatEther\n *\n * @example\n * import { formatEther } from 'viem'\n *\n * formatEther(1000000000000000000n)\n * // '1'\n */\nexport function formatEther(wei, unit = 'wei') {\n    return formatUnits(wei, etherUnits[unit]);\n}\n//# sourceMappingURL=formatEther.js.map",
    "import { gweiUnits } from '../../constants/unit.js';\nimport { formatUnits } from './formatUnits.js';\n/**\n * Converts numerical wei to a string representation of gwei.\n *\n * - Docs: https://viem.sh/docs/utilities/formatGwei\n *\n * @example\n * import { formatGwei } from 'viem'\n *\n * formatGwei(1000000000n)\n * // '1'\n */\nexport function formatGwei(wei, unit = 'wei') {\n    return formatUnits(wei, gweiUnits[unit]);\n}\n//# sourceMappingURL=formatGwei.js.map",
    "import { BaseError } from './base.js';\nexport class AccountStateConflictError extends BaseError {\n    constructor({ address }) {\n        super(`State for account \"${address}\" is set multiple times.`, {\n            name: 'AccountStateConflictError',\n        });\n    }\n}\nexport class StateAssignmentConflictError extends BaseError {\n    constructor() {\n        super('state and stateDiff are set on the same account.', {\n            name: 'StateAssignmentConflictError',\n        });\n    }\n}\n/** @internal */\nexport function prettyStateMapping(stateMapping) {\n    return stateMapping.reduce((pretty, { slot, value }) => {\n        return `${pretty}        ${slot}: ${value}\\n`;\n    }, '');\n}\nexport function prettyStateOverride(stateOverride) {\n    return stateOverride\n        .reduce((pretty, { address, ...state }) => {\n        let val = `${pretty}    ${address}:\\n`;\n        if (state.nonce)\n            val += `      nonce: ${state.nonce}\\n`;\n        if (state.balance)\n            val += `      balance: ${state.balance}\\n`;\n        if (state.code)\n            val += `      code: ${state.code}\\n`;\n        if (state.state) {\n            val += '      state:\\n';\n            val += prettyStateMapping(state.state);\n        }\n        if (state.stateDiff) {\n            val += '      stateDiff:\\n';\n            val += prettyStateMapping(state.stateDiff);\n        }\n        return val;\n    }, '  State Override:\\n')\n        .slice(0, -1);\n}\n//# sourceMappingURL=stateOverride.js.map",
    "import { formatEther } from '../utils/unit/formatEther.js';\nimport { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nexport function prettyPrint(args) {\n    const entries = Object.entries(args)\n        .map(([key, value]) => {\n        if (value === undefined || value === false)\n            return null;\n        return [key, value];\n    })\n        .filter(Boolean);\n    const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);\n    return entries\n        .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\n        .join('\\n');\n}\nexport class FeeConflictError extends BaseError {\n    constructor() {\n        super([\n            'Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.',\n            'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.',\n        ].join('\\n'), { name: 'FeeConflictError' });\n    }\n}\nexport class InvalidLegacyVError extends BaseError {\n    constructor({ v }) {\n        super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`, {\n            name: 'InvalidLegacyVError',\n        });\n    }\n}\nexport class InvalidSerializableTransactionError extends BaseError {\n    constructor({ transaction }) {\n        super('Cannot infer a transaction type from provided transaction.', {\n            metaMessages: [\n                'Provided Transaction:',\n                '{',\n                prettyPrint(transaction),\n                '}',\n                '',\n                'To infer the type, either provide:',\n                '- a `type` to the Transaction, or',\n                '- an EIP-1559 Transaction with `maxFeePerGas`, or',\n                '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or',\n                '- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or',\n                '- an EIP-7702 Transaction with `authorizationList`, or',\n                '- a Legacy Transaction with `gasPrice`',\n            ],\n            name: 'InvalidSerializableTransactionError',\n        });\n    }\n}\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n    constructor({ serializedType }) {\n        super(`Serialized transaction type \"${serializedType}\" is invalid.`, {\n            name: 'InvalidSerializedTransactionType',\n        });\n        Object.defineProperty(this, \"serializedType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.serializedType = serializedType;\n    }\n}\nexport class InvalidSerializedTransactionError extends BaseError {\n    constructor({ attributes, serializedTransaction, type, }) {\n        const missing = Object.entries(attributes)\n            .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n            .filter(Boolean);\n        super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n            metaMessages: [\n                `Serialized Transaction: \"${serializedTransaction}\"`,\n                missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n            ].filter(Boolean),\n            name: 'InvalidSerializedTransactionError',\n        });\n        Object.defineProperty(this, \"serializedTransaction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.serializedTransaction = serializedTransaction;\n        this.type = type;\n    }\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n    constructor({ storageKey }) {\n        super(`Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`, { name: 'InvalidStorageKeySizeError' });\n    }\n}\nexport class TransactionExecutionError extends BaseError {\n    constructor(cause, { account, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, }) {\n        const prettyArgs = prettyPrint({\n            chain: chain && `${chain?.name} (id: ${chain?.id})`,\n            from: account?.address,\n            to,\n            value: typeof value !== 'undefined' &&\n                `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n            data,\n            gas,\n            gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n            maxFeePerGas: typeof maxFeePerGas !== 'undefined' &&\n                `${formatGwei(maxFeePerGas)} gwei`,\n            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' &&\n                `${formatGwei(maxPriorityFeePerGas)} gwei`,\n            nonce,\n        });\n        super(cause.shortMessage, {\n            cause,\n            docsPath,\n            metaMessages: [\n                ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n                'Request Arguments:',\n                prettyArgs,\n            ].filter(Boolean),\n            name: 'TransactionExecutionError',\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cause = cause;\n    }\n}\nexport class TransactionNotFoundError extends BaseError {\n    constructor({ blockHash, blockNumber, blockTag, hash, index, }) {\n        let identifier = 'Transaction';\n        if (blockTag && index !== undefined)\n            identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`;\n        if (blockHash && index !== undefined)\n            identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`;\n        if (blockNumber && index !== undefined)\n            identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`;\n        if (hash)\n            identifier = `Transaction with hash \"${hash}\"`;\n        super(`${identifier} could not be found.`, {\n            name: 'TransactionNotFoundError',\n        });\n    }\n}\nexport class TransactionReceiptNotFoundError extends BaseError {\n    constructor({ hash }) {\n        super(`Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`, {\n            name: 'TransactionReceiptNotFoundError',\n        });\n    }\n}\nexport class TransactionReceiptRevertedError extends BaseError {\n    constructor({ receipt }) {\n        super(`Transaction with hash \"${receipt.transactionHash}\" reverted.`, {\n            metaMessages: [\n                'The receipt marked the transaction as \"reverted\". This could mean that the function on the contract you are trying to call threw an error.',\n                ' ',\n                'You can attempt to extract the revert reason by:',\n                '- calling the `simulateContract` or `simulateCalls` Action with the `abi` and `functionName` of the contract',\n                '- using the `call` Action with raw `data`',\n            ],\n            name: 'TransactionReceiptRevertedError',\n        });\n        Object.defineProperty(this, \"receipt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.receipt = receipt;\n    }\n}\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n    constructor({ hash }) {\n        super(`Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`, { name: 'WaitForTransactionReceiptTimeoutError' });\n    }\n}\n//# sourceMappingURL=transaction.js.map",
    "export const getContractAddress = (address) => address;\nexport const getUrl = (url) => url;\n//# sourceMappingURL=utils.js.map",
    "import { parseAccount } from '../accounts/utils/parseAccount.js';\nimport { panicReasons } from '../constants/solidity.js';\nimport { decodeErrorResult, } from '../utils/abi/decodeErrorResult.js';\nimport { formatAbiItem } from '../utils/abi/formatAbiItem.js';\nimport { formatAbiItemWithArgs } from '../utils/abi/formatAbiItemWithArgs.js';\nimport { getAbiItem } from '../utils/abi/getAbiItem.js';\nimport { formatEther } from '../utils/unit/formatEther.js';\nimport { formatGwei } from '../utils/unit/formatGwei.js';\nimport { AbiErrorSignatureNotFoundError } from './abi.js';\nimport { BaseError } from './base.js';\nimport { prettyStateOverride } from './stateOverride.js';\nimport { prettyPrint } from './transaction.js';\nimport { getContractAddress } from './utils.js';\nexport class CallExecutionError extends BaseError {\n    constructor(cause, { account: account_, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, }) {\n        const account = account_ ? parseAccount(account_) : undefined;\n        let prettyArgs = prettyPrint({\n            from: account?.address,\n            to,\n            value: typeof value !== 'undefined' &&\n                `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n            data,\n            gas,\n            gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n            maxFeePerGas: typeof maxFeePerGas !== 'undefined' &&\n                `${formatGwei(maxFeePerGas)} gwei`,\n            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' &&\n                `${formatGwei(maxPriorityFeePerGas)} gwei`,\n            nonce,\n        });\n        if (stateOverride) {\n            prettyArgs += `\\n${prettyStateOverride(stateOverride)}`;\n        }\n        super(cause.shortMessage, {\n            cause,\n            docsPath,\n            metaMessages: [\n                ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n                'Raw Call Arguments:',\n                prettyArgs,\n            ].filter(Boolean),\n            name: 'CallExecutionError',\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cause = cause;\n    }\n}\nexport class ContractFunctionExecutionError extends BaseError {\n    constructor(cause, { abi, args, contractAddress, docsPath, functionName, sender, }) {\n        const abiItem = getAbiItem({ abi, args, name: functionName });\n        const formattedArgs = abiItem\n            ? formatAbiItemWithArgs({\n                abiItem,\n                args,\n                includeFunctionName: false,\n                includeName: false,\n            })\n            : undefined;\n        const functionWithParams = abiItem\n            ? formatAbiItem(abiItem, { includeName: true })\n            : undefined;\n        const prettyArgs = prettyPrint({\n            address: contractAddress && getContractAddress(contractAddress),\n            function: functionWithParams,\n            args: formattedArgs &&\n                formattedArgs !== '()' &&\n                `${[...Array(functionName?.length ?? 0).keys()]\n                    .map(() => ' ')\n                    .join('')}${formattedArgs}`,\n            sender,\n        });\n        super(cause.shortMessage ||\n            `An unknown error occurred while executing the contract function \"${functionName}\".`, {\n            cause,\n            docsPath,\n            metaMessages: [\n                ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n                prettyArgs && 'Contract Call:',\n                prettyArgs,\n            ].filter(Boolean),\n            name: 'ContractFunctionExecutionError',\n        });\n        Object.defineProperty(this, \"abi\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"args\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"contractAddress\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"formattedArgs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"functionName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sender\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.abi = abi;\n        this.args = args;\n        this.cause = cause;\n        this.contractAddress = contractAddress;\n        this.functionName = functionName;\n        this.sender = sender;\n    }\n}\nexport class ContractFunctionRevertedError extends BaseError {\n    constructor({ abi, data, functionName, message, }) {\n        let cause;\n        let decodedData;\n        let metaMessages;\n        let reason;\n        if (data && data !== '0x') {\n            try {\n                decodedData = decodeErrorResult({ abi, data });\n                const { abiItem, errorName, args: errorArgs } = decodedData;\n                if (errorName === 'Error') {\n                    reason = errorArgs[0];\n                }\n                else if (errorName === 'Panic') {\n                    const [firstArg] = errorArgs;\n                    reason = panicReasons[firstArg];\n                }\n                else {\n                    const errorWithParams = abiItem\n                        ? formatAbiItem(abiItem, { includeName: true })\n                        : undefined;\n                    const formattedArgs = abiItem && errorArgs\n                        ? formatAbiItemWithArgs({\n                            abiItem,\n                            args: errorArgs,\n                            includeFunctionName: false,\n                            includeName: false,\n                        })\n                        : undefined;\n                    metaMessages = [\n                        errorWithParams ? `Error: ${errorWithParams}` : '',\n                        formattedArgs && formattedArgs !== '()'\n                            ? `       ${[...Array(errorName?.length ?? 0).keys()]\n                                .map(() => ' ')\n                                .join('')}${formattedArgs}`\n                            : '',\n                    ];\n                }\n            }\n            catch (err) {\n                cause = err;\n            }\n        }\n        else if (message)\n            reason = message;\n        let signature;\n        if (cause instanceof AbiErrorSignatureNotFoundError) {\n            signature = cause.signature;\n            metaMessages = [\n                `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\n                'Make sure you are using the correct ABI and that the error exists on it.',\n                `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n            ];\n        }\n        super((reason && reason !== 'execution reverted') || signature\n            ? [\n                `The contract function \"${functionName}\" reverted with the following ${signature ? 'signature' : 'reason'}:`,\n                reason || signature,\n            ].join('\\n')\n            : `The contract function \"${functionName}\" reverted.`, {\n            cause,\n            metaMessages,\n            name: 'ContractFunctionRevertedError',\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"raw\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reason\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = decodedData;\n        this.raw = data;\n        this.reason = reason;\n        this.signature = signature;\n    }\n}\nexport class ContractFunctionZeroDataError extends BaseError {\n    constructor({ functionName }) {\n        super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\n            metaMessages: [\n                'This could be due to any of the following:',\n                `  - The contract does not have the function \"${functionName}\",`,\n                '  - The parameters passed to the contract function may be invalid, or',\n                '  - The address is not a contract.',\n            ],\n            name: 'ContractFunctionZeroDataError',\n        });\n    }\n}\nexport class CounterfactualDeploymentFailedError extends BaseError {\n    constructor({ factory }) {\n        super(`Deployment for counterfactual contract call failed${factory ? ` for factory \"${factory}\".` : ''}`, {\n            metaMessages: [\n                'Please ensure:',\n                '- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).',\n                '- The `factoryData` is a valid encoded function call for contract deployment function on the factory.',\n            ],\n            name: 'CounterfactualDeploymentFailedError',\n        });\n    }\n}\nexport class RawContractError extends BaseError {\n    constructor({ data, message, }) {\n        super(message || '', { name: 'RawContractError' });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = data;\n    }\n}\n//# sourceMappingURL=contract.js.map",
    "import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class HttpRequestError extends BaseError {\n    constructor({ body, cause, details, headers, status, url, }) {\n        super('HTTP request failed.', {\n            cause,\n            details,\n            metaMessages: [\n                status && `Status: ${status}`,\n                `URL: ${getUrl(url)}`,\n                body && `Request body: ${stringify(body)}`,\n            ].filter(Boolean),\n            name: 'HttpRequestError',\n        });\n        Object.defineProperty(this, \"body\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.url = url;\n    }\n}\nexport class WebSocketRequestError extends BaseError {\n    constructor({ body, cause, details, url, }) {\n        super('WebSocket request failed.', {\n            cause,\n            details,\n            metaMessages: [\n                `URL: ${getUrl(url)}`,\n                body && `Request body: ${stringify(body)}`,\n            ].filter(Boolean),\n            name: 'WebSocketRequestError',\n        });\n    }\n}\nexport class RpcRequestError extends BaseError {\n    constructor({ body, error, url, }) {\n        super('RPC Request failed.', {\n            cause: error,\n            details: error.message,\n            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n            name: 'RpcRequestError',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.code = error.code;\n        this.data = error.data;\n    }\n}\nexport class SocketClosedError extends BaseError {\n    constructor({ url, } = {}) {\n        super('The socket has been closed.', {\n            metaMessages: [url && `URL: ${getUrl(url)}`].filter(Boolean),\n            name: 'SocketClosedError',\n        });\n    }\n}\nexport class TimeoutError extends BaseError {\n    constructor({ body, url, }) {\n        super('The request took too long to respond.', {\n            details: 'The request timed out.',\n            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n            name: 'TimeoutError',\n        });\n    }\n}\n//# sourceMappingURL=request.js.map",
    "import { BaseError } from './base.js';\nimport { RpcRequestError } from './request.js';\nconst unknownErrorCode = -1;\nexport class RpcError extends BaseError {\n    constructor(cause, { code, docsPath, metaMessages, name, shortMessage, }) {\n        super(shortMessage, {\n            cause,\n            docsPath,\n            metaMessages: metaMessages || cause?.metaMessages,\n            name: name || 'RpcError',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = name || cause.name;\n        this.code = (cause instanceof RpcRequestError ? cause.code : (code ?? unknownErrorCode));\n    }\n}\nexport class ProviderRpcError extends RpcError {\n    constructor(cause, options) {\n        super(cause, options);\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = options.data;\n    }\n}\nexport class ParseRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: ParseRpcError.code,\n            name: 'ParseRpcError',\n            shortMessage: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n        });\n    }\n}\nObject.defineProperty(ParseRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32700\n});\nexport class InvalidRequestRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: InvalidRequestRpcError.code,\n            name: 'InvalidRequestRpcError',\n            shortMessage: 'JSON is not a valid request object.',\n        });\n    }\n}\nObject.defineProperty(InvalidRequestRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32600\n});\nexport class MethodNotFoundRpcError extends RpcError {\n    constructor(cause, { method } = {}) {\n        super(cause, {\n            code: MethodNotFoundRpcError.code,\n            name: 'MethodNotFoundRpcError',\n            shortMessage: `The method${method ? ` \"${method}\"` : ''} does not exist / is not available.`,\n        });\n    }\n}\nObject.defineProperty(MethodNotFoundRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32601\n});\nexport class InvalidParamsRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: InvalidParamsRpcError.code,\n            name: 'InvalidParamsRpcError',\n            shortMessage: [\n                'Invalid parameters were provided to the RPC method.',\n                'Double check you have provided the correct parameters.',\n            ].join('\\n'),\n        });\n    }\n}\nObject.defineProperty(InvalidParamsRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32602\n});\nexport class InternalRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: InternalRpcError.code,\n            name: 'InternalRpcError',\n            shortMessage: 'An internal error was received.',\n        });\n    }\n}\nObject.defineProperty(InternalRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32603\n});\nexport class InvalidInputRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: InvalidInputRpcError.code,\n            name: 'InvalidInputRpcError',\n            shortMessage: [\n                'Missing or invalid parameters.',\n                'Double check you have provided the correct parameters.',\n            ].join('\\n'),\n        });\n    }\n}\nObject.defineProperty(InvalidInputRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32000\n});\nexport class ResourceNotFoundRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: ResourceNotFoundRpcError.code,\n            name: 'ResourceNotFoundRpcError',\n            shortMessage: 'Requested resource not found.',\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ResourceNotFoundRpcError'\n        });\n    }\n}\nObject.defineProperty(ResourceNotFoundRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32001\n});\nexport class ResourceUnavailableRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: ResourceUnavailableRpcError.code,\n            name: 'ResourceUnavailableRpcError',\n            shortMessage: 'Requested resource not available.',\n        });\n    }\n}\nObject.defineProperty(ResourceUnavailableRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32002\n});\nexport class TransactionRejectedRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: TransactionRejectedRpcError.code,\n            name: 'TransactionRejectedRpcError',\n            shortMessage: 'Transaction creation failed.',\n        });\n    }\n}\nObject.defineProperty(TransactionRejectedRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32003\n});\nexport class MethodNotSupportedRpcError extends RpcError {\n    constructor(cause, { method } = {}) {\n        super(cause, {\n            code: MethodNotSupportedRpcError.code,\n            name: 'MethodNotSupportedRpcError',\n            shortMessage: `Method${method ? ` \"${method}\"` : ''} is not supported.`,\n        });\n    }\n}\nObject.defineProperty(MethodNotSupportedRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32004\n});\nexport class LimitExceededRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: LimitExceededRpcError.code,\n            name: 'LimitExceededRpcError',\n            shortMessage: 'Request exceeds defined limit.',\n        });\n    }\n}\nObject.defineProperty(LimitExceededRpcError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32005\n});\nexport class JsonRpcVersionUnsupportedError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            code: JsonRpcVersionUnsupportedError.code,\n            name: 'JsonRpcVersionUnsupportedError',\n            shortMessage: 'Version of JSON-RPC protocol is not supported.',\n        });\n    }\n}\nObject.defineProperty(JsonRpcVersionUnsupportedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32006\n});\nexport class UserRejectedRequestError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: UserRejectedRequestError.code,\n            name: 'UserRejectedRequestError',\n            shortMessage: 'User rejected the request.',\n        });\n    }\n}\nObject.defineProperty(UserRejectedRequestError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4001\n});\nexport class UnauthorizedProviderError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: UnauthorizedProviderError.code,\n            name: 'UnauthorizedProviderError',\n            shortMessage: 'The requested method and/or account has not been authorized by the user.',\n        });\n    }\n}\nObject.defineProperty(UnauthorizedProviderError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4100\n});\nexport class UnsupportedProviderMethodError extends ProviderRpcError {\n    constructor(cause, { method } = {}) {\n        super(cause, {\n            code: UnsupportedProviderMethodError.code,\n            name: 'UnsupportedProviderMethodError',\n            shortMessage: `The Provider does not support the requested method${method ? ` \" ${method}\"` : ''}.`,\n        });\n    }\n}\nObject.defineProperty(UnsupportedProviderMethodError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4200\n});\nexport class ProviderDisconnectedError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: ProviderDisconnectedError.code,\n            name: 'ProviderDisconnectedError',\n            shortMessage: 'The Provider is disconnected from all chains.',\n        });\n    }\n}\nObject.defineProperty(ProviderDisconnectedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4900\n});\nexport class ChainDisconnectedError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: ChainDisconnectedError.code,\n            name: 'ChainDisconnectedError',\n            shortMessage: 'The Provider is not connected to the requested chain.',\n        });\n    }\n}\nObject.defineProperty(ChainDisconnectedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4901\n});\nexport class SwitchChainError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: SwitchChainError.code,\n            name: 'SwitchChainError',\n            shortMessage: 'An error occurred when attempting to switch chain.',\n        });\n    }\n}\nObject.defineProperty(SwitchChainError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4902\n});\nexport class UnsupportedNonOptionalCapabilityError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: UnsupportedNonOptionalCapabilityError.code,\n            name: 'UnsupportedNonOptionalCapabilityError',\n            shortMessage: 'This Wallet does not support a capability that was not marked as optional.',\n        });\n    }\n}\nObject.defineProperty(UnsupportedNonOptionalCapabilityError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5700\n});\nexport class UnsupportedChainIdError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: UnsupportedChainIdError.code,\n            name: 'UnsupportedChainIdError',\n            shortMessage: 'This Wallet does not support the requested chain ID.',\n        });\n    }\n}\nObject.defineProperty(UnsupportedChainIdError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5710\n});\nexport class DuplicateIdError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: DuplicateIdError.code,\n            name: 'DuplicateIdError',\n            shortMessage: 'There is already a bundle submitted with this ID.',\n        });\n    }\n}\nObject.defineProperty(DuplicateIdError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5720\n});\nexport class UnknownBundleIdError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: UnknownBundleIdError.code,\n            name: 'UnknownBundleIdError',\n            shortMessage: 'This bundle id is unknown / has not been submitted',\n        });\n    }\n}\nObject.defineProperty(UnknownBundleIdError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5730\n});\nexport class BundleTooLargeError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: BundleTooLargeError.code,\n            name: 'BundleTooLargeError',\n            shortMessage: 'The call bundle is too large for the Wallet to process.',\n        });\n    }\n}\nObject.defineProperty(BundleTooLargeError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5740\n});\nexport class AtomicReadyWalletRejectedUpgradeError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: AtomicReadyWalletRejectedUpgradeError.code,\n            name: 'AtomicReadyWalletRejectedUpgradeError',\n            shortMessage: 'The Wallet can support atomicity after an upgrade, but the user rejected the upgrade.',\n        });\n    }\n}\nObject.defineProperty(AtomicReadyWalletRejectedUpgradeError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5750\n});\nexport class AtomicityNotSupportedError extends ProviderRpcError {\n    constructor(cause) {\n        super(cause, {\n            code: AtomicityNotSupportedError.code,\n            name: 'AtomicityNotSupportedError',\n            shortMessage: 'The wallet does not support atomic execution but the request requires it.',\n        });\n    }\n}\nObject.defineProperty(AtomicityNotSupportedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5760\n});\nexport class UnknownRpcError extends RpcError {\n    constructor(cause) {\n        super(cause, {\n            name: 'UnknownRpcError',\n            shortMessage: 'An unknown RPC error occurred.',\n        });\n    }\n}\n//# sourceMappingURL=rpc.js.map",
    "import { AbiDecodingZeroDataError } from '../../errors/abi.js';\nimport { BaseError } from '../../errors/base.js';\nimport { ContractFunctionExecutionError, ContractFunctionRevertedError, ContractFunctionZeroDataError, RawContractError, } from '../../errors/contract.js';\nimport { RpcRequestError } from '../../errors/request.js';\nimport { InternalRpcError } from '../../errors/rpc.js';\nconst EXECUTION_REVERTED_ERROR_CODE = 3;\nexport function getContractError(err, { abi, address, args, docsPath, functionName, sender, }) {\n    const error = (err instanceof RawContractError\n        ? err\n        : err instanceof BaseError\n            ? err.walk((err) => 'data' in err) || err.walk()\n            : {});\n    const { code, data, details, message, shortMessage } = error;\n    const cause = (() => {\n        if (err instanceof AbiDecodingZeroDataError)\n            return new ContractFunctionZeroDataError({ functionName });\n        if ([EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) &&\n            (data || details || message || shortMessage)) {\n            return new ContractFunctionRevertedError({\n                abi,\n                data: typeof data === 'object' ? data.data : data,\n                functionName,\n                message: error instanceof RpcRequestError\n                    ? details\n                    : (shortMessage ?? message),\n            });\n        }\n        return err;\n    })();\n    return new ContractFunctionExecutionError(cause, {\n        abi,\n        args,\n        contractAddress: address,\n        docsPath,\n        functionName,\n        sender,\n    });\n}\n//# sourceMappingURL=getContractError.js.map",
    "import { checksumAddress, } from '../../utils/address/getAddress.js';\nimport { keccak256, } from '../../utils/hash/keccak256.js';\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */\nexport function publicKeyToAddress(publicKey) {\n    const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);\n    return checksumAddress(`0x${address}`);\n}\n//# sourceMappingURL=publicKeyToAddress.js.map",
    "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map",
    "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map",
    "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map",
    "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function';\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n// DRBG\nconst u8n = (len) => new Uint8Array(len); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map",
    "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from \"./utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map",
    "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from \"./modular.js\";\nimport { bitLen, bitMask, validateObject } from \"./utils.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(constTimeNegate(isNeg, precomputes[offset]));\n                }\n            }\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map",
    "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Parameters\n *\n * To initialize a weierstrass curve, one needs to pass following params:\n *\n * * a: formula param\n * * b: formula param\n * * Fp: finite field of prime characteristic P; may be complex (Fp2). Arithmetics is done in field\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * Gx: Base point (x, y) aka generator point. Gx = x coordinate\n * * Gy: ...y coordinate\n * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)\n * * lowS: whether to enable (default) or disable \"low-s\" non-malleable signatures\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// prettier-ignore\nimport { pippenger, validateBasic, wNAF } from \"./curve.js\";\n// prettier-ignore\nimport { Field, FpInvertBatch, getMinHashLength, invert, mapHashToField, mod, validateField } from \"./modular.js\";\n// prettier-ignore\nimport { aInRange, abool, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToBytesBE, numberToHexUnpadded, validateObject } from \"./utils.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowInfinityPoint: 'boolean',\n        allowedPrivateKeyLengths: 'array',\n        clearCofactor: 'function',\n        fromBytes: 'function',\n        isTorsionFree: 'function',\n        toBytes: 'function',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endo: CURVE.a must be 0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\nfunction numToSizedHex(num, size) {\n    return bytesToHex(numberToBytesBE(num, size));\n}\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (isBytes(key))\n                key = bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py) || Fp.is0(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = FpInvertBatch(Fp, points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            /** See docs for {@link EndomorphismOpts} */\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    const { endo, nBitLength } = CURVE;\n    const wnaf = wNAF(Point, endo ? Math.ceil(nBitLength / 2) : nBitLength);\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = bytesToNumberBE(tail);\n                if (!inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aInRange('r', r, _1n, CURVE_ORDER); // r in [1..N]\n            aInRange('s', s, _1n, CURVE_ORDER); // s in [1..N]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig(this);\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            const l = nByteLength;\n            return numToSizedHex(this.r, l) + numToSizedHex(this.s, l);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const len = arr.length;\n        const fpl = Fp.BYTES;\n        const compLen = fpl + 1; // e.g. 33 for 32\n        const uncompLen = 2 * fpl + 1; // e.g. 65 for 32\n        if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {\n            return undefined;\n        }\n        else {\n            return len === compLen || len === uncompLen;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        aInRange('num < 2^' + nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return numberToBytesBE(num, nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map",
    "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map",
    "import { FpInvertBatch, mod } from \"./modular.js\";\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from \"./utils.js\";\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << (8 * length))\n        throw new Error('invalid I2OSP input: ' + value);\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255)\n        throw new Error('expand_message_xmd: invalid lenInBytes');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const coeff = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xn, xd, yn, yd] = coeff.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        // 6.6.3\n        // Exceptional cases of iso_map are inputs that cause the denominator of\n        // either rational function to evaluate to zero; such cases MUST return\n        // the identity point on E.\n        const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\n        x = field.mul(xn, xd_inv); // xNum / xDen\n        y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher(Point, mapToCurve, defaults) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    function map(num) {\n        return Point.fromAffine(mapToCurve(num));\n    }\n    function clear(initial) {\n        const P = initial.clearCofactor();\n        if (P.equals(Point.ZERO))\n            return Point.ZERO; // zero will throw in assert\n        P.assertValidity();\n        return P;\n    }\n    return {\n        defaults,\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options });\n            const u0 = map(u[0]);\n            const u1 = map(u[1]);\n            return clear(u0.add(u1));\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options });\n            return clear(map(u[0]));\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve(scalars) {\n            if (!Array.isArray(scalars))\n                throw new Error('expected array of bigints');\n            for (const i of scalars)\n                if (typeof i !== 'bigint')\n                    throw new Error('expected array of bigints');\n            return clear(map(scalars));\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map",
    "/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./abstract/utils.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    a: _0n,\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = /* @__PURE__ */ (() => secp256k1.ProjectivePoint)();\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map",
    "import { isHex } from '../data/isHex.js';\nimport { size } from '../data/size.js';\nimport { hexToBigInt, hexToNumber, } from '../encoding/fromHex.js';\nimport { toHex } from '../encoding/toHex.js';\nexport async function recoverPublicKey({ hash, signature, }) {\n    const hashHex = isHex(hash) ? hash : toHex(hash);\n    const { secp256k1 } = await import('@noble/curves/secp256k1');\n    const signature_ = (() => {\n        // typeof signature: `Signature`\n        if (typeof signature === 'object' && 'r' in signature && 's' in signature) {\n            const { r, s, v, yParity } = signature;\n            const yParityOrV = Number(yParity ?? v);\n            const recoveryBit = toRecoveryBit(yParityOrV);\n            return new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).addRecoveryBit(recoveryBit);\n        }\n        // typeof signature: `Hex | ByteArray`\n        const signatureHex = isHex(signature) ? signature : toHex(signature);\n        if (size(signatureHex) !== 65)\n            throw new Error('invalid signature length');\n        const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);\n        const recoveryBit = toRecoveryBit(yParityOrV);\n        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\n    })();\n    const publicKey = signature_\n        .recoverPublicKey(hashHex.substring(2))\n        .toHex(false);\n    return `0x${publicKey}`;\n}\nfunction toRecoveryBit(yParityOrV) {\n    if (yParityOrV === 0 || yParityOrV === 1)\n        return yParityOrV;\n    if (yParityOrV === 27)\n        return 0;\n    if (yParityOrV === 28)\n        return 1;\n    throw new Error('Invalid yParityOrV value');\n}\n//# sourceMappingURL=recoverPublicKey.js.map",
    "import { publicKeyToAddress } from '../../accounts/utils/publicKeyToAddress.js';\nimport { recoverPublicKey } from './recoverPublicKey.js';\nexport async function recoverAddress({ hash, signature, }) {\n    return publicKeyToAddress(await recoverPublicKey({ hash, signature }));\n}\n//# sourceMappingURL=recoverAddress.js.map",
    "import { BaseError } from '../../errors/base.js';\nimport { createCursor, } from '../cursor.js';\nimport { hexToBytes } from './toBytes.js';\nimport { bytesToHex } from './toHex.js';\nexport function toRlp(bytes, to = 'hex') {\n    const encodable = getEncodable(bytes);\n    const cursor = createCursor(new Uint8Array(encodable.length));\n    encodable.encode(cursor);\n    if (to === 'hex')\n        return bytesToHex(cursor.bytes);\n    return cursor.bytes;\n}\nexport function bytesToRlp(bytes, to = 'bytes') {\n    return toRlp(bytes, to);\n}\nexport function hexToRlp(hex, to = 'hex') {\n    return toRlp(hex, to);\n}\nfunction getEncodable(bytes) {\n    if (Array.isArray(bytes))\n        return getEncodableList(bytes.map((x) => getEncodable(x)));\n    return getEncodableBytes(bytes);\n}\nfunction getEncodableList(list) {\n    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);\n    const sizeOfBodyLength = getSizeOfLength(bodyLength);\n    const length = (() => {\n        if (bodyLength <= 55)\n            return 1 + bodyLength;\n        return 1 + sizeOfBodyLength + bodyLength;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bodyLength <= 55) {\n                cursor.pushByte(0xc0 + bodyLength);\n            }\n            else {\n                cursor.pushByte(0xc0 + 55 + sizeOfBodyLength);\n                if (sizeOfBodyLength === 1)\n                    cursor.pushUint8(bodyLength);\n                else if (sizeOfBodyLength === 2)\n                    cursor.pushUint16(bodyLength);\n                else if (sizeOfBodyLength === 3)\n                    cursor.pushUint24(bodyLength);\n                else\n                    cursor.pushUint32(bodyLength);\n            }\n            for (const { encode } of list) {\n                encode(cursor);\n            }\n        },\n    };\n}\nfunction getEncodableBytes(bytesOrHex) {\n    const bytes = typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex;\n    const sizeOfBytesLength = getSizeOfLength(bytes.length);\n    const length = (() => {\n        if (bytes.length === 1 && bytes[0] < 0x80)\n            return 1;\n        if (bytes.length <= 55)\n            return 1 + bytes.length;\n        return 1 + sizeOfBytesLength + bytes.length;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bytes.length === 1 && bytes[0] < 0x80) {\n                cursor.pushBytes(bytes);\n            }\n            else if (bytes.length <= 55) {\n                cursor.pushByte(0x80 + bytes.length);\n                cursor.pushBytes(bytes);\n            }\n            else {\n                cursor.pushByte(0x80 + 55 + sizeOfBytesLength);\n                if (sizeOfBytesLength === 1)\n                    cursor.pushUint8(bytes.length);\n                else if (sizeOfBytesLength === 2)\n                    cursor.pushUint16(bytes.length);\n                else if (sizeOfBytesLength === 3)\n                    cursor.pushUint24(bytes.length);\n                else\n                    cursor.pushUint32(bytes.length);\n                cursor.pushBytes(bytes);\n            }\n        },\n    };\n}\nfunction getSizeOfLength(length) {\n    if (length < 2 ** 8)\n        return 1;\n    if (length < 2 ** 16)\n        return 2;\n    if (length < 2 ** 24)\n        return 3;\n    if (length < 2 ** 32)\n        return 4;\n    throw new BaseError('Length is too large.');\n}\n//# sourceMappingURL=toRlp.js.map",
    "import { concatHex } from '../data/concat.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { numberToHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { keccak256 } from '../hash/keccak256.js';\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization(parameters) {\n    const { chainId, nonce, to } = parameters;\n    const address = parameters.contractAddress ?? parameters.address;\n    const hash = keccak256(concatHex([\n        '0x05',\n        toRlp([\n            chainId ? numberToHex(chainId) : '0x',\n            address,\n            nonce ? numberToHex(nonce) : '0x',\n        ]),\n    ]));\n    if (to === 'bytes')\n        return hexToBytes(hash);\n    return hash;\n}\n//# sourceMappingURL=hashAuthorization.js.map",
    "import { recoverAddress, } from '../signature/recoverAddress.js';\nimport { hashAuthorization, } from './hashAuthorization.js';\nexport async function recoverAuthorizationAddress(parameters) {\n    const { authorization, signature } = parameters;\n    return recoverAddress({\n        hash: hashAuthorization(authorization),\n        signature: (signature ?? authorization),\n    });\n}\n//# sourceMappingURL=recoverAuthorizationAddress.js.map",
    "import { formatEther } from '../utils/unit/formatEther.js';\nimport { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nimport { prettyPrint } from './transaction.js';\nexport class EstimateGasExecutionError extends BaseError {\n    constructor(cause, { account, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, }) {\n        const prettyArgs = prettyPrint({\n            from: account?.address,\n            to,\n            value: typeof value !== 'undefined' &&\n                `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n            data,\n            gas,\n            gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n            maxFeePerGas: typeof maxFeePerGas !== 'undefined' &&\n                `${formatGwei(maxFeePerGas)} gwei`,\n            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' &&\n                `${formatGwei(maxPriorityFeePerGas)} gwei`,\n            nonce,\n        });\n        super(cause.shortMessage, {\n            cause,\n            docsPath,\n            metaMessages: [\n                ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n                'Estimate Gas Arguments:',\n                prettyArgs,\n            ].filter(Boolean),\n            name: 'EstimateGasExecutionError',\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cause = cause;\n    }\n}\n//# sourceMappingURL=estimateGas.js.map",
    "import { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nexport class ExecutionRevertedError extends BaseError {\n    constructor({ cause, message, } = {}) {\n        const reason = message\n            ?.replace('execution reverted: ', '')\n            ?.replace('execution reverted', '');\n        super(`Execution reverted ${reason ? `with reason: ${reason}` : 'for an unknown reason'}.`, {\n            cause,\n            name: 'ExecutionRevertedError',\n        });\n    }\n}\nObject.defineProperty(ExecutionRevertedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 3\n});\nObject.defineProperty(ExecutionRevertedError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /execution reverted/\n});\nexport class FeeCapTooHighError extends BaseError {\n    constructor({ cause, maxFeePerGas, } = {}) {\n        super(`The fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''}) cannot be higher than the maximum allowed value (2^256-1).`, {\n            cause,\n            name: 'FeeCapTooHighError',\n        });\n    }\n}\nObject.defineProperty(FeeCapTooHighError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\n});\nexport class FeeCapTooLowError extends BaseError {\n    constructor({ cause, maxFeePerGas, } = {}) {\n        super(`The fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ''} gwei) cannot be lower than the block base fee.`, {\n            cause,\n            name: 'FeeCapTooLowError',\n        });\n    }\n}\nObject.defineProperty(FeeCapTooLowError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\n});\nexport class NonceTooHighError extends BaseError {\n    constructor({ cause, nonce, } = {}) {\n        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ''}is higher than the next one expected.`, { cause, name: 'NonceTooHighError' });\n    }\n}\nObject.defineProperty(NonceTooHighError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /nonce too high/\n});\nexport class NonceTooLowError extends BaseError {\n    constructor({ cause, nonce, } = {}) {\n        super([\n            `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ''}is lower than the current nonce of the account.`,\n            'Try increasing the nonce or find the latest nonce with `getTransactionCount`.',\n        ].join('\\n'), { cause, name: 'NonceTooLowError' });\n    }\n}\nObject.defineProperty(NonceTooLowError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /nonce too low|transaction already imported|already known/\n});\nexport class NonceMaxValueError extends BaseError {\n    constructor({ cause, nonce, } = {}) {\n        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ''}exceeds the maximum allowed nonce.`, { cause, name: 'NonceMaxValueError' });\n    }\n}\nObject.defineProperty(NonceMaxValueError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /nonce has max value/\n});\nexport class InsufficientFundsError extends BaseError {\n    constructor({ cause } = {}) {\n        super([\n            'The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.',\n        ].join('\\n'), {\n            cause,\n            metaMessages: [\n                'This error could arise when the account does not have enough funds to:',\n                ' - pay for the total gas fee,',\n                ' - pay for the value to send.',\n                ' ',\n                'The cost of the transaction is calculated as `gas * gas fee + value`, where:',\n                ' - `gas` is the amount of gas needed for transaction to execute,',\n                ' - `gas fee` is the gas fee,',\n                ' - `value` is the amount of ether to send to the recipient.',\n            ],\n            name: 'InsufficientFundsError',\n        });\n    }\n}\nObject.defineProperty(InsufficientFundsError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /insufficient funds|exceeds transaction sender account balance/\n});\nexport class IntrinsicGasTooHighError extends BaseError {\n    constructor({ cause, gas, } = {}) {\n        super(`The amount of gas ${gas ? `(${gas}) ` : ''}provided for the transaction exceeds the limit allowed for the block.`, {\n            cause,\n            name: 'IntrinsicGasTooHighError',\n        });\n    }\n}\nObject.defineProperty(IntrinsicGasTooHighError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /intrinsic gas too high|gas limit reached/\n});\nexport class IntrinsicGasTooLowError extends BaseError {\n    constructor({ cause, gas, } = {}) {\n        super(`The amount of gas ${gas ? `(${gas}) ` : ''}provided for the transaction is too low.`, {\n            cause,\n            name: 'IntrinsicGasTooLowError',\n        });\n    }\n}\nObject.defineProperty(IntrinsicGasTooLowError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /intrinsic gas too low/\n});\nexport class TransactionTypeNotSupportedError extends BaseError {\n    constructor({ cause }) {\n        super('The transaction type is not supported for this chain.', {\n            cause,\n            name: 'TransactionTypeNotSupportedError',\n        });\n    }\n}\nObject.defineProperty(TransactionTypeNotSupportedError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /transaction type not valid/\n});\nexport class TipAboveFeeCapError extends BaseError {\n    constructor({ cause, maxPriorityFeePerGas, maxFeePerGas, } = {}) {\n        super([\n            `The provided tip (\\`maxPriorityFeePerGas\\`${maxPriorityFeePerGas\n                ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei`\n                : ''}) cannot be higher than the fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''}).`,\n        ].join('\\n'), {\n            cause,\n            name: 'TipAboveFeeCapError',\n        });\n    }\n}\nObject.defineProperty(TipAboveFeeCapError, \"nodeMessage\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\n});\nexport class UnknownNodeError extends BaseError {\n    constructor({ cause }) {\n        super(`An error occurred while executing: ${cause?.shortMessage}`, {\n            cause,\n            name: 'UnknownNodeError',\n        });\n    }\n}\n//# sourceMappingURL=node.js.map",
    "import { BaseError } from '../../errors/base.js';\nimport { ExecutionRevertedError, FeeCapTooHighError, FeeCapTooLowError, InsufficientFundsError, IntrinsicGasTooHighError, IntrinsicGasTooLowError, NonceMaxValueError, NonceTooHighError, NonceTooLowError, TipAboveFeeCapError, TransactionTypeNotSupportedError, UnknownNodeError, } from '../../errors/node.js';\nimport { RpcRequestError } from '../../errors/request.js';\nimport { InvalidInputRpcError, TransactionRejectedRpcError, } from '../../errors/rpc.js';\nexport function containsNodeError(err) {\n    return (err instanceof TransactionRejectedRpcError ||\n        err instanceof InvalidInputRpcError ||\n        (err instanceof RpcRequestError && err.code === ExecutionRevertedError.code));\n}\nexport function getNodeError(err, args) {\n    const message = (err.details || '').toLowerCase();\n    const executionRevertedError = err instanceof BaseError\n        ? err.walk((e) => e?.code ===\n            ExecutionRevertedError.code)\n        : err;\n    if (executionRevertedError instanceof BaseError)\n        return new ExecutionRevertedError({\n            cause: err,\n            message: executionRevertedError.details,\n        });\n    if (ExecutionRevertedError.nodeMessage.test(message))\n        return new ExecutionRevertedError({\n            cause: err,\n            message: err.details,\n        });\n    if (FeeCapTooHighError.nodeMessage.test(message))\n        return new FeeCapTooHighError({\n            cause: err,\n            maxFeePerGas: args?.maxFeePerGas,\n        });\n    if (FeeCapTooLowError.nodeMessage.test(message))\n        return new FeeCapTooLowError({\n            cause: err,\n            maxFeePerGas: args?.maxFeePerGas,\n        });\n    if (NonceTooHighError.nodeMessage.test(message))\n        return new NonceTooHighError({ cause: err, nonce: args?.nonce });\n    if (NonceTooLowError.nodeMessage.test(message))\n        return new NonceTooLowError({ cause: err, nonce: args?.nonce });\n    if (NonceMaxValueError.nodeMessage.test(message))\n        return new NonceMaxValueError({ cause: err, nonce: args?.nonce });\n    if (InsufficientFundsError.nodeMessage.test(message))\n        return new InsufficientFundsError({ cause: err });\n    if (IntrinsicGasTooHighError.nodeMessage.test(message))\n        return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas });\n    if (IntrinsicGasTooLowError.nodeMessage.test(message))\n        return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas });\n    if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n        return new TransactionTypeNotSupportedError({ cause: err });\n    if (TipAboveFeeCapError.nodeMessage.test(message))\n        return new TipAboveFeeCapError({\n            cause: err,\n            maxFeePerGas: args?.maxFeePerGas,\n            maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\n        });\n    return new UnknownNodeError({\n        cause: err,\n    });\n}\n//# sourceMappingURL=getNodeError.js.map",
    "import { EstimateGasExecutionError, } from '../../errors/estimateGas.js';\nimport { UnknownNodeError } from '../../errors/node.js';\nimport { getNodeError, } from './getNodeError.js';\nexport function getEstimateGasError(err, { docsPath, ...args }) {\n    const cause = (() => {\n        const cause = getNodeError(err, args);\n        if (cause instanceof UnknownNodeError)\n            return err;\n        return cause;\n    })();\n    return new EstimateGasExecutionError(cause, {\n        docsPath,\n        ...args,\n    });\n}\n//# sourceMappingURL=getEstimateGasError.js.map",
    "/**\n * @description Picks out the keys from `value` that exist in the formatter..\n */\nexport function extract(value_, { format }) {\n    if (!format)\n        return {};\n    const value = {};\n    function extract_(formatted) {\n        const keys = Object.keys(formatted);\n        for (const key of keys) {\n            if (key in value_)\n                value[key] = value_[key];\n            if (formatted[key] &&\n                typeof formatted[key] === 'object' &&\n                !Array.isArray(formatted[key]))\n                extract_(formatted[key]);\n        }\n    }\n    const formatted = format(value_ || {});\n    extract_(formatted);\n    return value;\n}\n//# sourceMappingURL=extract.js.map",
    "import { bytesToHex, numberToHex } from '../encoding/toHex.js';\nimport { defineFormatter } from './formatter.js';\nexport const rpcTransactionType = {\n    legacy: '0x0',\n    eip2930: '0x1',\n    eip1559: '0x2',\n    eip4844: '0x3',\n    eip7702: '0x4',\n};\nexport function formatTransactionRequest(request, _) {\n    const rpcRequest = {};\n    if (typeof request.authorizationList !== 'undefined')\n        rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);\n    if (typeof request.accessList !== 'undefined')\n        rpcRequest.accessList = request.accessList;\n    if (typeof request.blobVersionedHashes !== 'undefined')\n        rpcRequest.blobVersionedHashes = request.blobVersionedHashes;\n    if (typeof request.blobs !== 'undefined') {\n        if (typeof request.blobs[0] !== 'string')\n            rpcRequest.blobs = request.blobs.map((x) => bytesToHex(x));\n        else\n            rpcRequest.blobs = request.blobs;\n    }\n    if (typeof request.data !== 'undefined')\n        rpcRequest.data = request.data;\n    if (request.account)\n        rpcRequest.from = request.account.address;\n    if (typeof request.from !== 'undefined')\n        rpcRequest.from = request.from;\n    if (typeof request.gas !== 'undefined')\n        rpcRequest.gas = numberToHex(request.gas);\n    if (typeof request.gasPrice !== 'undefined')\n        rpcRequest.gasPrice = numberToHex(request.gasPrice);\n    if (typeof request.maxFeePerBlobGas !== 'undefined')\n        rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas);\n    if (typeof request.maxFeePerGas !== 'undefined')\n        rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas);\n    if (typeof request.maxPriorityFeePerGas !== 'undefined')\n        rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas);\n    if (typeof request.nonce !== 'undefined')\n        rpcRequest.nonce = numberToHex(request.nonce);\n    if (typeof request.to !== 'undefined')\n        rpcRequest.to = request.to;\n    if (typeof request.type !== 'undefined')\n        rpcRequest.type = rpcTransactionType[request.type];\n    if (typeof request.value !== 'undefined')\n        rpcRequest.value = numberToHex(request.value);\n    return rpcRequest;\n}\nexport const defineTransactionRequest = /*#__PURE__*/ defineFormatter('transactionRequest', formatTransactionRequest);\n//////////////////////////////////////////////////////////////////////////////\nfunction formatAuthorizationList(authorizationList) {\n    return authorizationList.map((authorization) => ({\n        address: authorization.address,\n        r: authorization.r\n            ? numberToHex(BigInt(authorization.r))\n            : authorization.r,\n        s: authorization.s\n            ? numberToHex(BigInt(authorization.s))\n            : authorization.s,\n        chainId: numberToHex(authorization.chainId),\n        nonce: numberToHex(authorization.nonce),\n        ...(typeof authorization.yParity !== 'undefined'\n            ? { yParity: numberToHex(authorization.yParity) }\n            : {}),\n        ...(typeof authorization.v !== 'undefined' &&\n            typeof authorization.yParity === 'undefined'\n            ? { v: numberToHex(authorization.v) }\n            : {}),\n    }));\n}\n//# sourceMappingURL=transactionRequest.js.map",
    "import { InvalidAddressError, } from '../errors/address.js';\nimport { InvalidBytesLengthError, } from '../errors/data.js';\nimport { AccountStateConflictError, StateAssignmentConflictError, } from '../errors/stateOverride.js';\nimport { isAddress } from './address/isAddress.js';\nimport { numberToHex } from './encoding/toHex.js';\n/** @internal */\nexport function serializeStateMapping(stateMapping) {\n    if (!stateMapping || stateMapping.length === 0)\n        return undefined;\n    return stateMapping.reduce((acc, { slot, value }) => {\n        if (slot.length !== 66)\n            throw new InvalidBytesLengthError({\n                size: slot.length,\n                targetSize: 66,\n                type: 'hex',\n            });\n        if (value.length !== 66)\n            throw new InvalidBytesLengthError({\n                size: value.length,\n                targetSize: 66,\n                type: 'hex',\n            });\n        acc[slot] = value;\n        return acc;\n    }, {});\n}\n/** @internal */\nexport function serializeAccountStateOverride(parameters) {\n    const { balance, nonce, state, stateDiff, code } = parameters;\n    const rpcAccountStateOverride = {};\n    if (code !== undefined)\n        rpcAccountStateOverride.code = code;\n    if (balance !== undefined)\n        rpcAccountStateOverride.balance = numberToHex(balance);\n    if (nonce !== undefined)\n        rpcAccountStateOverride.nonce = numberToHex(nonce);\n    if (state !== undefined)\n        rpcAccountStateOverride.state = serializeStateMapping(state);\n    if (stateDiff !== undefined) {\n        if (rpcAccountStateOverride.state)\n            throw new StateAssignmentConflictError();\n        rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);\n    }\n    return rpcAccountStateOverride;\n}\n/** @internal */\nexport function serializeStateOverride(parameters) {\n    if (!parameters)\n        return undefined;\n    const rpcStateOverride = {};\n    for (const { address, ...accountState } of parameters) {\n        if (!isAddress(address, { strict: false }))\n            throw new InvalidAddressError({ address });\n        if (rpcStateOverride[address])\n            throw new AccountStateConflictError({ address: address });\n        rpcStateOverride[address] = serializeAccountStateOverride(accountState);\n    }\n    return rpcStateOverride;\n}\n//# sourceMappingURL=stateOverride.js.map",
    "export const maxInt8 = 2n ** (8n - 1n) - 1n;\nexport const maxInt16 = 2n ** (16n - 1n) - 1n;\nexport const maxInt24 = 2n ** (24n - 1n) - 1n;\nexport const maxInt32 = 2n ** (32n - 1n) - 1n;\nexport const maxInt40 = 2n ** (40n - 1n) - 1n;\nexport const maxInt48 = 2n ** (48n - 1n) - 1n;\nexport const maxInt56 = 2n ** (56n - 1n) - 1n;\nexport const maxInt64 = 2n ** (64n - 1n) - 1n;\nexport const maxInt72 = 2n ** (72n - 1n) - 1n;\nexport const maxInt80 = 2n ** (80n - 1n) - 1n;\nexport const maxInt88 = 2n ** (88n - 1n) - 1n;\nexport const maxInt96 = 2n ** (96n - 1n) - 1n;\nexport const maxInt104 = 2n ** (104n - 1n) - 1n;\nexport const maxInt112 = 2n ** (112n - 1n) - 1n;\nexport const maxInt120 = 2n ** (120n - 1n) - 1n;\nexport const maxInt128 = 2n ** (128n - 1n) - 1n;\nexport const maxInt136 = 2n ** (136n - 1n) - 1n;\nexport const maxInt144 = 2n ** (144n - 1n) - 1n;\nexport const maxInt152 = 2n ** (152n - 1n) - 1n;\nexport const maxInt160 = 2n ** (160n - 1n) - 1n;\nexport const maxInt168 = 2n ** (168n - 1n) - 1n;\nexport const maxInt176 = 2n ** (176n - 1n) - 1n;\nexport const maxInt184 = 2n ** (184n - 1n) - 1n;\nexport const maxInt192 = 2n ** (192n - 1n) - 1n;\nexport const maxInt200 = 2n ** (200n - 1n) - 1n;\nexport const maxInt208 = 2n ** (208n - 1n) - 1n;\nexport const maxInt216 = 2n ** (216n - 1n) - 1n;\nexport const maxInt224 = 2n ** (224n - 1n) - 1n;\nexport const maxInt232 = 2n ** (232n - 1n) - 1n;\nexport const maxInt240 = 2n ** (240n - 1n) - 1n;\nexport const maxInt248 = 2n ** (248n - 1n) - 1n;\nexport const maxInt256 = 2n ** (256n - 1n) - 1n;\nexport const minInt8 = -(2n ** (8n - 1n));\nexport const minInt16 = -(2n ** (16n - 1n));\nexport const minInt24 = -(2n ** (24n - 1n));\nexport const minInt32 = -(2n ** (32n - 1n));\nexport const minInt40 = -(2n ** (40n - 1n));\nexport const minInt48 = -(2n ** (48n - 1n));\nexport const minInt56 = -(2n ** (56n - 1n));\nexport const minInt64 = -(2n ** (64n - 1n));\nexport const minInt72 = -(2n ** (72n - 1n));\nexport const minInt80 = -(2n ** (80n - 1n));\nexport const minInt88 = -(2n ** (88n - 1n));\nexport const minInt96 = -(2n ** (96n - 1n));\nexport const minInt104 = -(2n ** (104n - 1n));\nexport const minInt112 = -(2n ** (112n - 1n));\nexport const minInt120 = -(2n ** (120n - 1n));\nexport const minInt128 = -(2n ** (128n - 1n));\nexport const minInt136 = -(2n ** (136n - 1n));\nexport const minInt144 = -(2n ** (144n - 1n));\nexport const minInt152 = -(2n ** (152n - 1n));\nexport const minInt160 = -(2n ** (160n - 1n));\nexport const minInt168 = -(2n ** (168n - 1n));\nexport const minInt176 = -(2n ** (176n - 1n));\nexport const minInt184 = -(2n ** (184n - 1n));\nexport const minInt192 = -(2n ** (192n - 1n));\nexport const minInt200 = -(2n ** (200n - 1n));\nexport const minInt208 = -(2n ** (208n - 1n));\nexport const minInt216 = -(2n ** (216n - 1n));\nexport const minInt224 = -(2n ** (224n - 1n));\nexport const minInt232 = -(2n ** (232n - 1n));\nexport const minInt240 = -(2n ** (240n - 1n));\nexport const minInt248 = -(2n ** (248n - 1n));\nexport const minInt256 = -(2n ** (256n - 1n));\nexport const maxUint8 = 2n ** 8n - 1n;\nexport const maxUint16 = 2n ** 16n - 1n;\nexport const maxUint24 = 2n ** 24n - 1n;\nexport const maxUint32 = 2n ** 32n - 1n;\nexport const maxUint40 = 2n ** 40n - 1n;\nexport const maxUint48 = 2n ** 48n - 1n;\nexport const maxUint56 = 2n ** 56n - 1n;\nexport const maxUint64 = 2n ** 64n - 1n;\nexport const maxUint72 = 2n ** 72n - 1n;\nexport const maxUint80 = 2n ** 80n - 1n;\nexport const maxUint88 = 2n ** 88n - 1n;\nexport const maxUint96 = 2n ** 96n - 1n;\nexport const maxUint104 = 2n ** 104n - 1n;\nexport const maxUint112 = 2n ** 112n - 1n;\nexport const maxUint120 = 2n ** 120n - 1n;\nexport const maxUint128 = 2n ** 128n - 1n;\nexport const maxUint136 = 2n ** 136n - 1n;\nexport const maxUint144 = 2n ** 144n - 1n;\nexport const maxUint152 = 2n ** 152n - 1n;\nexport const maxUint160 = 2n ** 160n - 1n;\nexport const maxUint168 = 2n ** 168n - 1n;\nexport const maxUint176 = 2n ** 176n - 1n;\nexport const maxUint184 = 2n ** 184n - 1n;\nexport const maxUint192 = 2n ** 192n - 1n;\nexport const maxUint200 = 2n ** 200n - 1n;\nexport const maxUint208 = 2n ** 208n - 1n;\nexport const maxUint216 = 2n ** 216n - 1n;\nexport const maxUint224 = 2n ** 224n - 1n;\nexport const maxUint232 = 2n ** 232n - 1n;\nexport const maxUint240 = 2n ** 240n - 1n;\nexport const maxUint248 = 2n ** 248n - 1n;\nexport const maxUint256 = 2n ** 256n - 1n;\n//# sourceMappingURL=number.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { maxUint256 } from '../../constants/number.js';\nimport { InvalidAddressError, } from '../../errors/address.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError, } from '../../errors/node.js';\nimport { FeeConflictError, } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\nexport function assertRequest(args) {\n    const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, } = args;\n    const account = account_ ? parseAccount(account_) : undefined;\n    if (account && !isAddress(account.address))\n        throw new InvalidAddressError({ address: account.address });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (typeof gasPrice !== 'undefined' &&\n        (typeof maxFeePerGas !== 'undefined' ||\n            typeof maxPriorityFeePerGas !== 'undefined'))\n        throw new FeeConflictError();\n    if (maxFeePerGas && maxFeePerGas > maxUint256)\n        throw new FeeCapTooHighError({ maxFeePerGas });\n    if (maxPriorityFeePerGas &&\n        maxFeePerGas &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n}\n//# sourceMappingURL=assertRequest.js.map",
    "import { formatGwei } from '../utils/unit/formatGwei.js';\nimport { BaseError } from './base.js';\nexport class BaseFeeScalarError extends BaseError {\n    constructor() {\n        super('`baseFeeMultiplier` must be greater than 1.', {\n            name: 'BaseFeeScalarError',\n        });\n    }\n}\nexport class Eip1559FeesNotSupportedError extends BaseError {\n    constructor() {\n        super('Chain does not support EIP-1559 fees.', {\n            name: 'Eip1559FeesNotSupportedError',\n        });\n    }\n}\nexport class MaxFeePerGasTooLowError extends BaseError {\n    constructor({ maxPriorityFeePerGas }) {\n        super(`\\`maxFeePerGas\\` cannot be less than the \\`maxPriorityFeePerGas\\` (${formatGwei(maxPriorityFeePerGas)} gwei).`, { name: 'MaxFeePerGasTooLowError' });\n    }\n}\n//# sourceMappingURL=fee.js.map",
    "import { BaseError } from './base.js';\nexport class BlockNotFoundError extends BaseError {\n    constructor({ blockHash, blockNumber, }) {\n        let identifier = 'Block';\n        if (blockHash)\n            identifier = `Block at hash \"${blockHash}\"`;\n        if (blockNumber)\n            identifier = `Block at number \"${blockNumber}\"`;\n        super(`${identifier} could not be found.`, { name: 'BlockNotFoundError' });\n    }\n}\n//# sourceMappingURL=block.js.map",
    "import { hexToNumber } from '../encoding/fromHex.js';\nimport { defineFormatter } from './formatter.js';\nexport const transactionType = {\n    '0x0': 'legacy',\n    '0x1': 'eip2930',\n    '0x2': 'eip1559',\n    '0x3': 'eip4844',\n    '0x4': 'eip7702',\n};\nexport function formatTransaction(transaction, _) {\n    const transaction_ = {\n        ...transaction,\n        blockHash: transaction.blockHash ? transaction.blockHash : null,\n        blockNumber: transaction.blockNumber\n            ? BigInt(transaction.blockNumber)\n            : null,\n        chainId: transaction.chainId ? hexToNumber(transaction.chainId) : undefined,\n        gas: transaction.gas ? BigInt(transaction.gas) : undefined,\n        gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : undefined,\n        maxFeePerBlobGas: transaction.maxFeePerBlobGas\n            ? BigInt(transaction.maxFeePerBlobGas)\n            : undefined,\n        maxFeePerGas: transaction.maxFeePerGas\n            ? BigInt(transaction.maxFeePerGas)\n            : undefined,\n        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n            ? BigInt(transaction.maxPriorityFeePerGas)\n            : undefined,\n        nonce: transaction.nonce ? hexToNumber(transaction.nonce) : undefined,\n        to: transaction.to ? transaction.to : null,\n        transactionIndex: transaction.transactionIndex\n            ? Number(transaction.transactionIndex)\n            : null,\n        type: transaction.type\n            ? transactionType[transaction.type]\n            : undefined,\n        typeHex: transaction.type ? transaction.type : undefined,\n        value: transaction.value ? BigInt(transaction.value) : undefined,\n        v: transaction.v ? BigInt(transaction.v) : undefined,\n    };\n    if (transaction.authorizationList)\n        transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);\n    transaction_.yParity = (() => {\n        // If `yParity` is provided, we will use it.\n        if (transaction.yParity)\n            return Number(transaction.yParity);\n        // If no `yParity` provided, try derive from `v`.\n        if (typeof transaction_.v === 'bigint') {\n            if (transaction_.v === 0n || transaction_.v === 27n)\n                return 0;\n            if (transaction_.v === 1n || transaction_.v === 28n)\n                return 1;\n            if (transaction_.v >= 35n)\n                return transaction_.v % 2n === 0n ? 1 : 0;\n        }\n        return undefined;\n    })();\n    if (transaction_.type === 'legacy') {\n        delete transaction_.accessList;\n        delete transaction_.maxFeePerBlobGas;\n        delete transaction_.maxFeePerGas;\n        delete transaction_.maxPriorityFeePerGas;\n        delete transaction_.yParity;\n    }\n    if (transaction_.type === 'eip2930') {\n        delete transaction_.maxFeePerBlobGas;\n        delete transaction_.maxFeePerGas;\n        delete transaction_.maxPriorityFeePerGas;\n    }\n    if (transaction_.type === 'eip1559') {\n        delete transaction_.maxFeePerBlobGas;\n    }\n    return transaction_;\n}\nexport const defineTransaction = /*#__PURE__*/ defineFormatter('transaction', formatTransaction);\n//////////////////////////////////////////////////////////////////////////////\nfunction formatAuthorizationList(authorizationList) {\n    return authorizationList.map((authorization) => ({\n        address: authorization.address,\n        chainId: Number(authorization.chainId),\n        nonce: Number(authorization.nonce),\n        r: authorization.r,\n        s: authorization.s,\n        yParity: Number(authorization.yParity),\n    }));\n}\n//# sourceMappingURL=transaction.js.map",
    "import { defineFormatter } from './formatter.js';\nimport { formatTransaction } from './transaction.js';\nexport function formatBlock(block, _) {\n    const transactions = (block.transactions ?? []).map((transaction) => {\n        if (typeof transaction === 'string')\n            return transaction;\n        return formatTransaction(transaction);\n    });\n    return {\n        ...block,\n        baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n        blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n        difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n        excessBlobGas: block.excessBlobGas\n            ? BigInt(block.excessBlobGas)\n            : undefined,\n        gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n        gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n        hash: block.hash ? block.hash : null,\n        logsBloom: block.logsBloom ? block.logsBloom : null,\n        nonce: block.nonce ? block.nonce : null,\n        number: block.number ? BigInt(block.number) : null,\n        size: block.size ? BigInt(block.size) : undefined,\n        timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n        transactions,\n        totalDifficulty: block.totalDifficulty\n            ? BigInt(block.totalDifficulty)\n            : null,\n    };\n}\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock);\n//# sourceMappingURL=block.js.map",
    "import { BlockNotFoundError, } from '../../errors/block.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { formatBlock, } from '../../utils/formatters/block.js';\n/**\n * Returns information about a block at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlock\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockParameters}\n * @returns Information about the block. {@link GetBlockReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlock } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getBlock(client)\n */\nexport async function getBlock(client, { blockHash, blockNumber, blockTag = client.experimental_blockTag ?? 'latest', includeTransactions: includeTransactions_, } = {}) {\n    const includeTransactions = includeTransactions_ ?? false;\n    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n    let block = null;\n    if (blockHash) {\n        block = await client.request({\n            method: 'eth_getBlockByHash',\n            params: [blockHash, includeTransactions],\n        }, { dedupe: true });\n    }\n    else {\n        block = await client.request({\n            method: 'eth_getBlockByNumber',\n            params: [blockNumberHex || blockTag, includeTransactions],\n        }, { dedupe: Boolean(blockNumberHex) });\n    }\n    if (!block)\n        throw new BlockNotFoundError({ blockHash, blockNumber });\n    const format = client.chain?.formatters?.block?.format || formatBlock;\n    return format(block, 'getBlock');\n}\n//# sourceMappingURL=getBlock.js.map",
    "/**\n * Returns the current price of gas (in wei).\n *\n * - Docs: https://viem.sh/docs/actions/public/getGasPrice\n * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n *\n * @param client - Client to use\n * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getGasPrice } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasPrice = await getGasPrice(client)\n */\nexport async function getGasPrice(client) {\n    const gasPrice = await client.request({\n        method: 'eth_gasPrice',\n    });\n    return BigInt(gasPrice);\n}\n//# sourceMappingURL=getGasPrice.js.map",
    "import { Eip1559FeesNotSupportedError, } from '../../errors/fee.js';\nimport { hexToBigInt, } from '../../utils/encoding/fromHex.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas(client, args) {\n    return internal_estimateMaxPriorityFeePerGas(client, args);\n}\nexport async function internal_estimateMaxPriorityFeePerGas(client, args) {\n    const { block: block_, chain = client.chain, request } = args || {};\n    try {\n        const maxPriorityFeePerGas = chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee;\n        if (typeof maxPriorityFeePerGas === 'function') {\n            const block = block_ || (await getAction(client, getBlock, 'getBlock')({}));\n            const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({\n                block,\n                client,\n                request,\n            });\n            if (maxPriorityFeePerGas_ === null)\n                throw new Error();\n            return maxPriorityFeePerGas_;\n        }\n        if (typeof maxPriorityFeePerGas !== 'undefined')\n            return maxPriorityFeePerGas;\n        const maxPriorityFeePerGasHex = await client.request({\n            method: 'eth_maxPriorityFeePerGas',\n        });\n        return hexToBigInt(maxPriorityFeePerGasHex);\n    }\n    catch {\n        // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n        // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n        // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n        const [block, gasPrice] = await Promise.all([\n            block_\n                ? Promise.resolve(block_)\n                : getAction(client, getBlock, 'getBlock')({}),\n            getAction(client, getGasPrice, 'getGasPrice')({}),\n        ]);\n        if (typeof block.baseFeePerGas !== 'bigint')\n            throw new Eip1559FeesNotSupportedError();\n        const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;\n        if (maxPriorityFeePerGas < 0n)\n            return 0n;\n        return maxPriorityFeePerGas;\n    }\n}\n//# sourceMappingURL=estimateMaxPriorityFeePerGas.js.map",
    "import { BaseFeeScalarError, Eip1559FeesNotSupportedError, } from '../../errors/fee.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { internal_estimateMaxPriorityFeePerGas, } from './estimateMaxPriorityFeePerGas.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas(client, args) {\n    return internal_estimateFeesPerGas(client, args);\n}\nexport async function internal_estimateFeesPerGas(client, args) {\n    const { block: block_, chain = client.chain, request, type = 'eip1559', } = args || {};\n    const baseFeeMultiplier = await (async () => {\n        if (typeof chain?.fees?.baseFeeMultiplier === 'function')\n            return chain.fees.baseFeeMultiplier({\n                block: block_,\n                client,\n                request,\n            });\n        return chain?.fees?.baseFeeMultiplier ?? 1.2;\n    })();\n    if (baseFeeMultiplier < 1)\n        throw new BaseFeeScalarError();\n    const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0;\n    const denominator = 10 ** decimals;\n    const multiply = (base) => (base * BigInt(Math.ceil(baseFeeMultiplier * denominator))) /\n        BigInt(denominator);\n    const block = block_\n        ? block_\n        : await getAction(client, getBlock, 'getBlock')({});\n    if (typeof chain?.fees?.estimateFeesPerGas === 'function') {\n        const fees = (await chain.fees.estimateFeesPerGas({\n            block: block_,\n            client,\n            multiply,\n            request,\n            type,\n        }));\n        if (fees !== null)\n            return fees;\n    }\n    if (type === 'eip1559') {\n        if (typeof block.baseFeePerGas !== 'bigint')\n            throw new Eip1559FeesNotSupportedError();\n        const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === 'bigint'\n            ? request.maxPriorityFeePerGas\n            : await internal_estimateMaxPriorityFeePerGas(client, {\n                block: block,\n                chain,\n                request,\n            });\n        const baseFeePerGas = multiply(block.baseFeePerGas);\n        const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;\n        return {\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n        };\n    }\n    const gasPrice = request?.gasPrice ??\n        multiply(await getAction(client, getGasPrice, 'getGasPrice')({}));\n    return {\n        gasPrice,\n    };\n}\n//# sourceMappingURL=estimateFeesPerGas.js.map",
    "import { hexToNumber, } from '../../utils/encoding/fromHex.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount(client, { address, blockTag = 'latest', blockNumber }) {\n    const count = await client.request({\n        method: 'eth_getTransactionCount',\n        params: [\n            address,\n            typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : blockTag,\n        ],\n    }, {\n        dedupe: Boolean(blockNumber),\n    });\n    return hexToNumber(count);\n}\n//# sourceMappingURL=getTransactionCount.js.map",
    "import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Compute commitments from a list of blobs.\n *\n * @example\n * ```ts\n * import { blobsToCommitments, toBlobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * ```\n */\nexport function blobsToCommitments(parameters) {\n    const { kzg } = parameters;\n    const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n    const blobs = (typeof parameters.blobs[0] === 'string'\n        ? parameters.blobs.map((x) => hexToBytes(x))\n        : parameters.blobs);\n    const commitments = [];\n    for (const blob of blobs)\n        commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));\n    return (to === 'bytes'\n        ? commitments\n        : commitments.map((x) => bytesToHex(x)));\n}\n//# sourceMappingURL=blobsToCommitments.js.map",
    "import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Compute the proofs for a list of blobs and their commitments.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n * ```\n */\nexport function blobsToProofs(parameters) {\n    const { kzg } = parameters;\n    const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n    const blobs = (typeof parameters.blobs[0] === 'string'\n        ? parameters.blobs.map((x) => hexToBytes(x))\n        : parameters.blobs);\n    const commitments = (typeof parameters.commitments[0] === 'string'\n        ? parameters.commitments.map((x) => hexToBytes(x))\n        : parameters.commitments);\n    const proofs = [];\n    for (let i = 0; i < blobs.length; i++) {\n        const blob = blobs[i];\n        const commitment = commitments[i];\n        proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));\n    }\n    return (to === 'bytes'\n        ? proofs\n        : proofs.map((x) => bytesToHex(x)));\n}\n//# sourceMappingURL=blobsToProofs.js.map",
    "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport { SHA224 as SHA224n, sha224 as sha224n, SHA256 as SHA256n, sha256 as sha256n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256 = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256 = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224 = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224 = sha224n;\n//# sourceMappingURL=sha256.js.map",
    "import { sha256 as noble_sha256 } from '@noble/hashes/sha256';\nimport { isHex } from '../data/isHex.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { toHex } from '../encoding/toHex.js';\nexport function sha256(value, to_) {\n    const to = to_ || 'hex';\n    const bytes = noble_sha256(isHex(value, { strict: false }) ? toBytes(value) : value);\n    if (to === 'bytes')\n        return bytes;\n    return toHex(bytes);\n}\n//# sourceMappingURL=sha256.js.map",
    "import { bytesToHex } from '../encoding/toHex.js';\nimport { sha256 } from '../hash/sha256.js';\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash(parameters) {\n    const { commitment, version = 1 } = parameters;\n    const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes');\n    const versionedHash = sha256(commitment, 'bytes');\n    versionedHash.set([version], 0);\n    return (to === 'bytes' ? versionedHash : bytesToHex(versionedHash));\n}\n//# sourceMappingURL=commitmentToVersionedHash.js.map",
    "import { commitmentToVersionedHash, } from './commitmentToVersionedHash.js';\n/**\n * Transform a list of commitments to their versioned hashes.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentsToVersionedHashes,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const versionedHashes = commitmentsToVersionedHashes({ commitments })\n * ```\n */\nexport function commitmentsToVersionedHashes(parameters) {\n    const { commitments, version } = parameters;\n    const to = parameters.to ?? (typeof commitments[0] === 'string' ? 'hex' : 'bytes');\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(commitmentToVersionedHash({\n            commitment,\n            to,\n            version,\n        }));\n    }\n    return hashes;\n}\n//# sourceMappingURL=commitmentsToVersionedHashes.js.map",
    "// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n/** Blob limit per transaction. */\nconst blobsPerTransaction = 6;\n/** The number of bytes in a BLS scalar field element. */\nexport const bytesPerFieldElement = 32;\n/** The number of field elements in a blob. */\nexport const fieldElementsPerBlob = 4096;\n/** The number of bytes in a blob. */\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;\n/** Blob bytes limit per transaction. */\nexport const maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction -\n    // terminator byte (0x80).\n    1 -\n    // zero byte (0x00) appended to each field element.\n    1 * fieldElementsPerBlob * blobsPerTransaction;\n//# sourceMappingURL=blob.js.map",
    "// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\nexport const versionedHashVersionKzg = 1;\n//# sourceMappingURL=kzg.js.map",
    "import { versionedHashVersionKzg } from '../constants/kzg.js';\nimport { BaseError } from './base.js';\nexport class BlobSizeTooLargeError extends BaseError {\n    constructor({ maxSize, size }) {\n        super('Blob size is too large.', {\n            metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n            name: 'BlobSizeTooLargeError',\n        });\n    }\n}\nexport class EmptyBlobError extends BaseError {\n    constructor() {\n        super('Blob data must not be empty.', { name: 'EmptyBlobError' });\n    }\n}\nexport class InvalidVersionedHashSizeError extends BaseError {\n    constructor({ hash, size, }) {\n        super(`Versioned hash \"${hash}\" size is invalid.`, {\n            metaMessages: ['Expected: 32', `Received: ${size}`],\n            name: 'InvalidVersionedHashSizeError',\n        });\n    }\n}\nexport class InvalidVersionedHashVersionError extends BaseError {\n    constructor({ hash, version, }) {\n        super(`Versioned hash \"${hash}\" version is invalid.`, {\n            metaMessages: [\n                `Expected: ${versionedHashVersionKzg}`,\n                `Received: ${version}`,\n            ],\n            name: 'InvalidVersionedHashVersionError',\n        });\n    }\n}\n//# sourceMappingURL=blob.js.map",
    "import { bytesPerBlob, bytesPerFieldElement, fieldElementsPerBlob, maxBytesPerTransaction, } from '../../constants/blob.js';\nimport { BlobSizeTooLargeError, EmptyBlobError, } from '../../errors/blob.js';\nimport { createCursor } from '../cursor.js';\nimport { size } from '../data/size.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Transforms arbitrary data to blobs.\n *\n * @example\n * ```ts\n * import { toBlobs, stringToHex } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * ```\n */\nexport function toBlobs(parameters) {\n    const to = parameters.to ?? (typeof parameters.data === 'string' ? 'hex' : 'bytes');\n    const data = (typeof parameters.data === 'string'\n        ? hexToBytes(parameters.data)\n        : parameters.data);\n    const size_ = size(data);\n    if (!size_)\n        throw new EmptyBlobError();\n    if (size_ > maxBytesPerTransaction)\n        throw new BlobSizeTooLargeError({\n            maxSize: maxBytesPerTransaction,\n            size: size_,\n        });\n    const blobs = [];\n    let active = true;\n    let position = 0;\n    while (active) {\n        const blob = createCursor(new Uint8Array(bytesPerBlob));\n        let size = 0;\n        while (size < fieldElementsPerBlob) {\n            const bytes = data.slice(position, position + (bytesPerFieldElement - 1));\n            // Push a zero byte so the field element doesn't overflow the BLS modulus.\n            blob.pushByte(0x00);\n            // Push the current segment of data bytes.\n            blob.pushBytes(bytes);\n            // If we detect that the current segment of data bytes is less than 31 bytes,\n            // we can stop processing and push a terminator byte to indicate the end of the blob.\n            if (bytes.length < 31) {\n                blob.pushByte(0x80);\n                active = false;\n                break;\n            }\n            size++;\n            position += 31;\n        }\n        blobs.push(blob);\n    }\n    return (to === 'bytes'\n        ? blobs.map((x) => x.bytes)\n        : blobs.map((x) => bytesToHex(x.bytes)));\n}\n//# sourceMappingURL=toBlobs.js.map",
    "import { blobsToCommitments, } from './blobsToCommitments.js';\nimport { blobsToProofs } from './blobsToProofs.js';\nimport { toBlobs } from './toBlobs.js';\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars(parameters) {\n    const { data, kzg, to } = parameters;\n    const blobs = parameters.blobs ?? toBlobs({ data: data, to });\n    const commitments = parameters.commitments ?? blobsToCommitments({ blobs, kzg: kzg, to });\n    const proofs = parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg: kzg, to });\n    const sidecars = [];\n    for (let i = 0; i < blobs.length; i++)\n        sidecars.push({\n            blob: blobs[i],\n            commitment: commitments[i],\n            proof: proofs[i],\n        });\n    return sidecars;\n}\n//# sourceMappingURL=toBlobSidecars.js.map",
    "import { InvalidSerializableTransactionError, } from '../../errors/transaction.js';\nexport function getTransactionType(transaction) {\n    if (transaction.type)\n        return transaction.type;\n    if (typeof transaction.authorizationList !== 'undefined')\n        return 'eip7702';\n    if (typeof transaction.blobs !== 'undefined' ||\n        typeof transaction.blobVersionedHashes !== 'undefined' ||\n        typeof transaction.maxFeePerBlobGas !== 'undefined' ||\n        typeof transaction.sidecars !== 'undefined')\n        return 'eip4844';\n    if (typeof transaction.maxFeePerGas !== 'undefined' ||\n        typeof transaction.maxPriorityFeePerGas !== 'undefined') {\n        return 'eip1559';\n    }\n    if (typeof transaction.gasPrice !== 'undefined') {\n        if (typeof transaction.accessList !== 'undefined')\n            return 'eip2930';\n        return 'legacy';\n    }\n    throw new InvalidSerializableTransactionError({ transaction });\n}\n//# sourceMappingURL=getTransactionType.js.map",
    "import { hexToNumber, } from '../../utils/encoding/fromHex.js';\n/**\n * Returns the chain ID associated with the current network.\n *\n * - Docs: https://viem.sh/docs/actions/public/getChainId\n * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n *\n * @param client - Client to use\n * @returns The current chain ID. {@link GetChainIdReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getChainId } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const chainId = await getChainId(client)\n * // 1\n */\nexport async function getChainId(client) {\n    const chainIdHex = await client.request({\n        method: 'eth_chainId',\n    }, { dedupe: true });\n    return hexToNumber(chainIdHex);\n}\n//# sourceMappingURL=getChainId.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { internal_estimateFeesPerGas, } from '../../actions/public/estimateFeesPerGas.js';\nimport { estimateGas, } from '../../actions/public/estimateGas.js';\nimport { getBlock as getBlock_, } from '../../actions/public/getBlock.js';\nimport { getTransactionCount, } from '../../actions/public/getTransactionCount.js';\nimport { Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError, } from '../../errors/fee.js';\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js';\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest, } from '../../utils/transaction/assertRequest.js';\nimport { getTransactionType, } from '../../utils/transaction/getTransactionType.js';\nimport { getChainId as getChainId_ } from '../public/getChainId.js';\nexport const defaultParameters = [\n    'blobVersionedHashes',\n    'chainId',\n    'fees',\n    'gas',\n    'nonce',\n    'type',\n];\n/** @internal */\nexport const eip1559NetworkCache = /*#__PURE__*/ new Map();\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest(client, args) {\n    const { account: account_ = client.account, blobs, chain, gas, kzg, nonce, nonceManager, parameters = defaultParameters, type, } = args;\n    const account = account_ ? parseAccount(account_) : account_;\n    const request = { ...args, ...(account ? { from: account?.address } : {}) };\n    let block;\n    async function getBlock() {\n        if (block)\n            return block;\n        block = await getAction(client, getBlock_, 'getBlock')({ blockTag: 'latest' });\n        return block;\n    }\n    let chainId;\n    async function getChainId() {\n        if (chainId)\n            return chainId;\n        if (chain)\n            return chain.id;\n        if (typeof args.chainId !== 'undefined')\n            return args.chainId;\n        const chainId_ = await getAction(client, getChainId_, 'getChainId')({});\n        chainId = chainId_;\n        return chainId;\n    }\n    if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {\n        if (nonceManager) {\n            const chainId = await getChainId();\n            request.nonce = await nonceManager.consume({\n                address: account.address,\n                chainId,\n                client,\n            });\n        }\n        else {\n            request.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({\n                address: account.address,\n                blockTag: 'pending',\n            });\n        }\n    }\n    if ((parameters.includes('blobVersionedHashes') ||\n        parameters.includes('sidecars')) &&\n        blobs &&\n        kzg) {\n        const commitments = blobsToCommitments({ blobs, kzg });\n        if (parameters.includes('blobVersionedHashes')) {\n            const versionedHashes = commitmentsToVersionedHashes({\n                commitments,\n                to: 'hex',\n            });\n            request.blobVersionedHashes = versionedHashes;\n        }\n        if (parameters.includes('sidecars')) {\n            const proofs = blobsToProofs({ blobs, commitments, kzg });\n            const sidecars = toBlobSidecars({\n                blobs,\n                commitments,\n                proofs,\n                to: 'hex',\n            });\n            request.sidecars = sidecars;\n        }\n    }\n    if (parameters.includes('chainId'))\n        request.chainId = await getChainId();\n    if ((parameters.includes('fees') || parameters.includes('type')) &&\n        typeof type === 'undefined') {\n        try {\n            request.type = getTransactionType(request);\n        }\n        catch {\n            let isEip1559Network = eip1559NetworkCache.get(client.uid);\n            if (typeof isEip1559Network === 'undefined') {\n                const block = await getBlock();\n                isEip1559Network = typeof block?.baseFeePerGas === 'bigint';\n                eip1559NetworkCache.set(client.uid, isEip1559Network);\n            }\n            request.type = isEip1559Network ? 'eip1559' : 'legacy';\n        }\n    }\n    if (parameters.includes('fees')) {\n        // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n        if (request.type !== 'legacy' && request.type !== 'eip2930') {\n            // EIP-1559 fees\n            if (typeof request.maxFeePerGas === 'undefined' ||\n                typeof request.maxPriorityFeePerGas === 'undefined') {\n                const block = await getBlock();\n                const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas(client, {\n                    block: block,\n                    chain,\n                    request: request,\n                });\n                if (typeof args.maxPriorityFeePerGas === 'undefined' &&\n                    args.maxFeePerGas &&\n                    args.maxFeePerGas < maxPriorityFeePerGas)\n                    throw new MaxFeePerGasTooLowError({\n                        maxPriorityFeePerGas,\n                    });\n                request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n                request.maxFeePerGas = maxFeePerGas;\n            }\n        }\n        else {\n            // Legacy fees\n            if (typeof args.maxFeePerGas !== 'undefined' ||\n                typeof args.maxPriorityFeePerGas !== 'undefined')\n                throw new Eip1559FeesNotSupportedError();\n            if (typeof args.gasPrice === 'undefined') {\n                const block = await getBlock();\n                const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {\n                    block: block,\n                    chain,\n                    request: request,\n                    type: 'legacy',\n                });\n                request.gasPrice = gasPrice_;\n            }\n        }\n    }\n    if (parameters.includes('gas') && typeof gas === 'undefined')\n        request.gas = await getAction(client, estimateGas, 'estimateGas')({\n            ...request,\n            account,\n            prepare: account?.type === 'local' ? [] : ['blobVersionedHashes'],\n        });\n    assertRequest(request);\n    delete request.parameters;\n    return request;\n}\n//# sourceMappingURL=prepareTransactionRequest.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { BaseError } from '../../errors/base.js';\nimport { recoverAuthorizationAddress, } from '../../utils/authorization/recoverAuthorizationAddress.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { getEstimateGasError, } from '../../utils/errors/getEstimateGasError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { serializeStateOverride } from '../../utils/stateOverride.js';\nimport { assertRequest, } from '../../utils/transaction/assertRequest.js';\nimport { prepareTransactionRequest, } from '../wallet/prepareTransactionRequest.js';\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in gas units). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas(client, args) {\n    const { account: account_ = client.account, prepare = true } = args;\n    const account = account_ ? parseAccount(account_) : undefined;\n    const parameters = (() => {\n        if (Array.isArray(prepare))\n            return prepare;\n        // Some RPC Providers do not compute versioned hashes from blobs. We will need\n        // to compute them.\n        if (account?.type !== 'local')\n            return ['blobVersionedHashes'];\n        return undefined;\n    })();\n    try {\n        const { accessList, authorizationList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, stateOverride, ...rest } = prepare\n            ? (await prepareTransactionRequest(client, {\n                ...args,\n                parameters,\n            }))\n            : args;\n        const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        const rpcStateOverride = serializeStateOverride(stateOverride);\n        const to = await (async () => {\n            // If `to` exists on the parameters, use that.\n            if (rest.to)\n                return rest.to;\n            // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n            // address of the first authorization in the list.\n            if (authorizationList && authorizationList.length > 0)\n                return await recoverAuthorizationAddress({\n                    authorization: authorizationList[0],\n                }).catch(() => {\n                    throw new BaseError('`to` is required. Could not infer from `authorizationList`');\n                });\n            // Otherwise, we are sending a deployment transaction.\n            return undefined;\n        })();\n        assertRequest(args);\n        const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n        const format = chainFormat || formatTransactionRequest;\n        const request = format({\n            // Pick out extra data that might exist on the chain's transaction request type.\n            ...extract(rest, { format: chainFormat }),\n            account,\n            accessList,\n            authorizationList,\n            blobs,\n            blobVersionedHashes,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerBlobGas,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value,\n        }, 'estimateGas');\n        return BigInt(await client.request({\n            method: 'eth_estimateGas',\n            params: rpcStateOverride\n                ? [\n                    request,\n                    block ?? client.experimental_blockTag ?? 'latest',\n                    rpcStateOverride,\n                ]\n                : block\n                    ? [request, block]\n                    : [request],\n        }));\n    }\n    catch (err) {\n        throw getEstimateGasError(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\n//# sourceMappingURL=estimateGas.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getContractError, } from '../../utils/errors/getContractError.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { estimateGas, } from './estimateGas.js';\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas(client, parameters) {\n    const { abi, address, args, functionName, dataSuffix, ...request } = parameters;\n    const data = encodeFunctionData({\n        abi,\n        args,\n        functionName,\n    });\n    try {\n        const gas = await getAction(client, estimateGas, 'estimateGas')({\n            data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n            to: address,\n            ...request,\n        });\n        return gas;\n    }\n    catch (error) {\n        const account = request.account ? parseAccount(request.account) : undefined;\n        throw getContractError(error, {\n            abi,\n            address,\n            args,\n            docsPath: '/docs/contract/estimateContractGas',\n            functionName,\n            sender: account?.address,\n        });\n    }\n}\n//# sourceMappingURL=estimateContractGas.js.map",
    "import { InvalidAddressError, } from '../../errors/address.js';\nimport { isAddress } from './isAddress.js';\nexport function isAddressEqual(a, b) {\n    if (!isAddress(a, { strict: false }))\n        throw new InvalidAddressError({ address: a });\n    if (!isAddress(b, { strict: false }))\n        throw new InvalidAddressError({ address: b });\n    return a.toLowerCase() === b.toLowerCase();\n}\n//# sourceMappingURL=isAddressEqual.js.map",
    "import { AbiDecodingDataSizeTooSmallError, AbiEventSignatureEmptyTopicsError, AbiEventSignatureNotFoundError, DecodeLogDataMismatch, DecodeLogTopicsMismatch, } from '../../errors/abi.js';\nimport { PositionOutOfBoundsError } from '../../errors/cursor.js';\nimport { size } from '../data/size.js';\nimport { toEventSelector, } from '../hash/toEventSelector.js';\nimport { decodeAbiParameters, } from './decodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nconst docsPath = '/docs/contract/decodeEventLog';\nexport function decodeEventLog(parameters) {\n    const { abi, data, strict: strict_, topics, } = parameters;\n    const strict = strict_ ?? true;\n    const [signature, ...argTopics] = topics;\n    if (!signature)\n        throw new AbiEventSignatureEmptyTopicsError({ docsPath });\n    const abiItem = abi.find((x) => x.type === 'event' &&\n        signature === toEventSelector(formatAbiItem(x)));\n    if (!(abiItem && 'name' in abiItem) || abiItem.type !== 'event')\n        throw new AbiEventSignatureNotFoundError(signature, { docsPath });\n    const { name, inputs } = abiItem;\n    const isUnnamed = inputs?.some((x) => !('name' in x && x.name));\n    const args = isUnnamed ? [] : {};\n    // Decode topics (indexed args).\n    const indexedInputs = inputs\n        .map((x, i) => [x, i])\n        .filter(([x]) => 'indexed' in x && x.indexed);\n    for (let i = 0; i < indexedInputs.length; i++) {\n        const [param, argIndex] = indexedInputs[i];\n        const topic = argTopics[i];\n        if (!topic)\n            throw new DecodeLogTopicsMismatch({\n                abiItem,\n                param: param,\n            });\n        args[isUnnamed ? argIndex : param.name || argIndex] = decodeTopic({\n            param,\n            value: topic,\n        });\n    }\n    // Decode data (non-indexed args).\n    const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed));\n    if (nonIndexedInputs.length > 0) {\n        if (data && data !== '0x') {\n            try {\n                const decodedData = decodeAbiParameters(nonIndexedInputs, data);\n                if (decodedData) {\n                    if (isUnnamed)\n                        for (let i = 0; i < inputs.length; i++)\n                            args[i] = args[i] ?? decodedData.shift();\n                    else\n                        for (let i = 0; i < nonIndexedInputs.length; i++)\n                            args[nonIndexedInputs[i].name] = decodedData[i];\n                }\n            }\n            catch (err) {\n                if (strict) {\n                    if (err instanceof AbiDecodingDataSizeTooSmallError ||\n                        err instanceof PositionOutOfBoundsError)\n                        throw new DecodeLogDataMismatch({\n                            abiItem,\n                            data: data,\n                            params: nonIndexedInputs,\n                            size: size(data),\n                        });\n                    throw err;\n                }\n            }\n        }\n        else if (strict) {\n            throw new DecodeLogDataMismatch({\n                abiItem,\n                data: '0x',\n                params: nonIndexedInputs,\n                size: 0,\n            });\n        }\n    }\n    return {\n        eventName: name,\n        args: Object.values(args).length > 0 ? args : undefined,\n    };\n}\nfunction decodeTopic({ param, value }) {\n    if (param.type === 'string' ||\n        param.type === 'bytes' ||\n        param.type === 'tuple' ||\n        param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n        return value;\n    const decodedArg = decodeAbiParameters([param], value) || [];\n    return decodedArg[0];\n}\n//# sourceMappingURL=decodeEventLog.js.map",
    "// TODO(v3): checksum address.\nimport { AbiEventSignatureNotFoundError, DecodeLogDataMismatch, DecodeLogTopicsMismatch, } from '../../errors/abi.js';\nimport { isAddressEqual } from '../address/isAddressEqual.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { toEventSelector } from '../hash/toEventSelector.js';\nimport { decodeEventLog, } from './decodeEventLog.js';\n/**\n * Extracts & decodes logs matching the provided signature(s) (`abi` + optional `eventName`)\n * from a set of opaque logs.\n *\n * @param parameters - {@link ParseEventLogsParameters}\n * @returns The logs. {@link ParseEventLogsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { parseEventLogs } from 'viem/op-stack'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const receipt = await getTransactionReceipt(client, {\n *   hash: '0xec23b2ba4bc59ba61554507c1b1bc91649e6586eb2dd00c728e8ed0db8bb37ea',\n * })\n *\n * const logs = parseEventLogs({ logs: receipt.logs })\n * // [{ args: { ... }, eventName: 'TransactionDeposited', ... }, ...]\n */\nexport function parseEventLogs(parameters) {\n    const { abi, args, logs, strict = true } = parameters;\n    const eventName = (() => {\n        if (!parameters.eventName)\n            return undefined;\n        if (Array.isArray(parameters.eventName))\n            return parameters.eventName;\n        return [parameters.eventName];\n    })();\n    return logs\n        .map((log) => {\n        try {\n            const abiItem = abi.find((abiItem) => abiItem.type === 'event' &&\n                log.topics[0] === toEventSelector(abiItem));\n            if (!abiItem)\n                return null;\n            const event = decodeEventLog({\n                ...log,\n                abi: [abiItem],\n                strict,\n            });\n            // Check that the decoded event name matches the provided event name.\n            if (eventName && !eventName.includes(event.eventName))\n                return null;\n            // Check that the decoded event args match the provided args.\n            if (!includesArgs({\n                args: event.args,\n                inputs: abiItem.inputs,\n                matchArgs: args,\n            }))\n                return null;\n            return { ...event, ...log };\n        }\n        catch (err) {\n            let eventName;\n            let isUnnamed;\n            if (err instanceof AbiEventSignatureNotFoundError)\n                return null;\n            if (err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict)\n                    return null;\n                eventName = err.abiItem.name;\n                isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name));\n            }\n            // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n            return { ...log, args: isUnnamed ? [] : {}, eventName };\n        }\n    })\n        .filter(Boolean);\n}\nfunction includesArgs(parameters) {\n    const { args, inputs, matchArgs } = parameters;\n    if (!matchArgs)\n        return true;\n    if (!args)\n        return false;\n    function isEqual(input, value, arg) {\n        try {\n            if (input.type === 'address')\n                return isAddressEqual(value, arg);\n            if (input.type === 'string' || input.type === 'bytes')\n                return keccak256(toBytes(value)) === arg;\n            return value === arg;\n        }\n        catch {\n            return false;\n        }\n    }\n    if (Array.isArray(args) && Array.isArray(matchArgs)) {\n        return matchArgs.every((value, index) => {\n            if (value === null || value === undefined)\n                return true;\n            const input = inputs[index];\n            if (!input)\n                return false;\n            const value_ = Array.isArray(value) ? value : [value];\n            return value_.some((value) => isEqual(input, value, args[index]));\n        });\n    }\n    if (typeof args === 'object' &&\n        !Array.isArray(args) &&\n        typeof matchArgs === 'object' &&\n        !Array.isArray(matchArgs))\n        return Object.entries(matchArgs).every(([key, value]) => {\n            if (value === null || value === undefined)\n                return true;\n            const input = inputs.find((input) => input.name === key);\n            if (!input)\n                return false;\n            const value_ = Array.isArray(value) ? value : [value];\n            return value_.some((value) => isEqual(input, value, args[key]));\n        });\n    return false;\n}\n//# sourceMappingURL=parseEventLogs.js.map",
    "export function formatLog(log, { args, eventName, } = {}) {\n    return {\n        ...log,\n        blockHash: log.blockHash ? log.blockHash : null,\n        blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n        logIndex: log.logIndex ? Number(log.logIndex) : null,\n        transactionHash: log.transactionHash ? log.transactionHash : null,\n        transactionIndex: log.transactionIndex\n            ? Number(log.transactionIndex)\n            : null,\n        ...(eventName ? { args, eventName } : {}),\n    };\n}\n//# sourceMappingURL=log.js.map",
    "import { encodeEventTopics, } from '../../utils/abi/encodeEventTopics.js';\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { formatLog, } from '../../utils/formatters/log.js';\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/logs_event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_, } = {}) {\n    const strict = strict_ ?? false;\n    const events = events_ ?? (event ? [event] : undefined);\n    let topics = [];\n    if (events) {\n        const encoded = events.flatMap((event) => encodeEventTopics({\n            abi: [event],\n            eventName: event.name,\n            args: events_ ? undefined : args,\n        }));\n        // TODO: Clean up type casting\n        topics = [encoded];\n        if (event)\n            topics = topics[0];\n    }\n    let logs;\n    if (blockHash) {\n        logs = await client.request({\n            method: 'eth_getLogs',\n            params: [{ address, topics, blockHash }],\n        });\n    }\n    else {\n        logs = await client.request({\n            method: 'eth_getLogs',\n            params: [\n                {\n                    address,\n                    topics,\n                    fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n                    toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n                },\n            ],\n        });\n    }\n    const formattedLogs = logs.map((log) => formatLog(log));\n    if (!events)\n        return formattedLogs;\n    return parseEventLogs({\n        abi: events,\n        args: args,\n        logs: formattedLogs,\n        strict,\n    });\n}\n//# sourceMappingURL=getLogs.js.map",
    "import { getAbiItem, } from '../../utils/abi/getAbiItem.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getLogs, } from './getLogs.js';\n/**\n * Returns a list of event logs emitted by a contract.\n *\n * - Docs: https://viem.sh/docs/contract/getContractEvents#getcontractevents\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetContractEventsParameters}\n * @returns A list of event logs. {@link GetContractEventsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getContractEvents } from 'viem/public'\n * import { wagmiAbi } from './abi'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getContractEvents(client, {\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *  abi: wagmiAbi,\n *  eventName: 'Transfer'\n * })\n */\nexport async function getContractEvents(client, parameters) {\n    const { abi, address, args, blockHash, eventName, fromBlock, toBlock, strict, } = parameters;\n    const event = eventName\n        ? getAbiItem({ abi, name: eventName })\n        : undefined;\n    const events = !event\n        ? abi.filter((x) => x.type === 'event')\n        : undefined;\n    return getAction(client, getLogs, 'getLogs')({\n        address,\n        args,\n        blockHash,\n        event,\n        events,\n        fromBlock,\n        toBlock,\n        strict,\n    });\n}\n//# sourceMappingURL=getContractEvents.js.map",
    "import { AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, } from '../../errors/abi.js';\nimport { decodeAbiParameters, } from './decodeAbiParameters.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/decodeFunctionResult';\nexport function decodeFunctionResult(parameters) {\n    const { abi, args, functionName, data } = parameters;\n    let abiItem = abi[0];\n    if (functionName) {\n        const item = getAbiItem({ abi, args, name: functionName });\n        if (!item)\n            throw new AbiFunctionNotFoundError(functionName, { docsPath });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'function')\n        throw new AbiFunctionNotFoundError(undefined, { docsPath });\n    if (!abiItem.outputs)\n        throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath });\n    const values = decodeAbiParameters(abiItem.outputs, data);\n    if (values && values.length > 1)\n        return values;\n    if (values && values.length === 1)\n        return values[0];\n    return undefined;\n}\n//# sourceMappingURL=decodeFunctionResult.js.map",
    "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function';\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n// DRBG\nconst u8n = (len) => new Uint8Array(len); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map",
    "/** @internal */\nexport const version = '0.1.1';\n//# sourceMappingURL=version.js.map",
    "import { version } from '../version.js';\n/** @internal */\nexport function getUrl(url) {\n    return url;\n}\n/** @internal */\nexport function getVersion() {\n    return version;\n}\n/** @internal */\nexport function prettyPrint(args) {\n    if (!args)\n        return '';\n    const entries = Object.entries(args)\n        .map(([key, value]) => {\n        if (value === undefined || value === false)\n            return null;\n        return [key, value];\n    })\n        .filter(Boolean);\n    const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);\n    return entries\n        .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\n        .join('\\n');\n}\n//# sourceMappingURL=errors.js.map",
    "import { getVersion } from './internal/errors.js';\n/**\n * Base error class inherited by all errors thrown by ox.\n *\n * @example\n * ```ts\n * import { Errors } from 'ox'\n * throw new Errors.BaseError('An error occurred')\n * ```\n */\nexport class BaseError extends Error {\n    constructor(shortMessage, options = {}) {\n        const details = (() => {\n            if (options.cause instanceof BaseError) {\n                if (options.cause.details)\n                    return options.cause.details;\n                if (options.cause.shortMessage)\n                    return options.cause.shortMessage;\n            }\n            if (options.cause &&\n                'details' in options.cause &&\n                typeof options.cause.details === 'string')\n                return options.cause.details;\n            if (options.cause?.message)\n                return options.cause.message;\n            return options.details;\n        })();\n        const docsPath = (() => {\n            if (options.cause instanceof BaseError)\n                return options.cause.docsPath || options.docsPath;\n            return options.docsPath;\n        })();\n        const docsBaseUrl = 'https://oxlib.sh';\n        const docs = `${docsBaseUrl}${docsPath ?? ''}`;\n        const message = [\n            shortMessage || 'An error occurred.',\n            ...(options.metaMessages ? ['', ...options.metaMessages] : []),\n            ...(details || docsPath\n                ? [\n                    '',\n                    details ? `Details: ${details}` : undefined,\n                    docsPath ? `See: ${docs}` : undefined,\n                ]\n                : []),\n        ]\n            .filter((x) => typeof x === 'string')\n            .join('\\n');\n        super(message, options.cause ? { cause: options.cause } : undefined);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BaseError'\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `ox@${getVersion()}`\n        });\n        this.cause = options.cause;\n        this.details = details;\n        this.docs = docs;\n        this.docsPath = docsPath;\n        this.shortMessage = shortMessage;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\n/** @internal */\nfunction walk(err, fn) {\n    if (fn?.(err))\n        return err;\n    if (err && typeof err === 'object' && 'cause' in err && err.cause)\n        return walk(err.cause, fn);\n    return fn ? null : err;\n}\n//# sourceMappingURL=Errors.js.map",
    "import * as Bytes from '../Bytes.js';\n/** @internal */\nexport function assertSize(bytes, size_) {\n    if (Bytes.size(bytes) > size_)\n        throw new Bytes.SizeOverflowError({\n            givenSize: Bytes.size(bytes),\n            maxSize: size_,\n        });\n}\n/** @internal */\nexport function assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > Bytes.size(value) - 1)\n        throw new Bytes.SliceOffsetOutOfBoundsError({\n            offset: start,\n            position: 'start',\n            size: Bytes.size(value),\n        });\n}\n/** @internal */\nexport function assertEndOffset(value, start, end) {\n    if (typeof start === 'number' &&\n        typeof end === 'number' &&\n        Bytes.size(value) !== end - start) {\n        throw new Bytes.SliceOffsetOutOfBoundsError({\n            offset: end,\n            position: 'end',\n            size: Bytes.size(value),\n        });\n    }\n}\n/** @internal */\nexport const charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102,\n};\n/** @internal */\nexport function charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n        return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F)\n        return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f)\n        return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/** @internal */\nexport function pad(bytes, options = {}) {\n    const { dir, size = 32 } = options;\n    if (size === 0)\n        return bytes;\n    if (bytes.length > size)\n        throw new Bytes.SizeExceedsPaddingSizeError({\n            size: bytes.length,\n            targetSize: size,\n            type: 'Bytes',\n        });\n    const paddedBytes = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n        const padEnd = dir === 'right';\n        paddedBytes[padEnd ? i : size - i - 1] =\n            bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n}\n/** @internal */\nexport function trim(value, options = {}) {\n    const { dir = 'left' } = options;\n    let data = value;\n    let sliceLength = 0;\n    for (let i = 0; i < data.length - 1; i++) {\n        if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n            sliceLength++;\n        else\n            break;\n    }\n    data =\n        dir === 'left'\n            ? data.slice(sliceLength)\n            : data.slice(0, data.length - sliceLength);\n    return data;\n}\n//# sourceMappingURL=bytes.js.map",
    "import * as Hex from '../Hex.js';\n/** @internal */\nexport function assertSize(hex, size_) {\n    if (Hex.size(hex) > size_)\n        throw new Hex.SizeOverflowError({\n            givenSize: Hex.size(hex),\n            maxSize: size_,\n        });\n}\n/** @internal */\nexport function assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > Hex.size(value) - 1)\n        throw new Hex.SliceOffsetOutOfBoundsError({\n            offset: start,\n            position: 'start',\n            size: Hex.size(value),\n        });\n}\n/** @internal */\nexport function assertEndOffset(value, start, end) {\n    if (typeof start === 'number' &&\n        typeof end === 'number' &&\n        Hex.size(value) !== end - start) {\n        throw new Hex.SliceOffsetOutOfBoundsError({\n            offset: end,\n            position: 'end',\n            size: Hex.size(value),\n        });\n    }\n}\n/** @internal */\nexport function pad(hex_, options = {}) {\n    const { dir, size = 32 } = options;\n    if (size === 0)\n        return hex_;\n    const hex = hex_.replace('0x', '');\n    if (hex.length > size * 2)\n        throw new Hex.SizeExceedsPaddingSizeError({\n            size: Math.ceil(hex.length / 2),\n            targetSize: size,\n            type: 'Hex',\n        });\n    return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n}\n/** @internal */\nexport function trim(value, options = {}) {\n    const { dir = 'left' } = options;\n    let data = value.replace('0x', '');\n    let sliceLength = 0;\n    for (let i = 0; i < data.length - 1; i++) {\n        if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n            sliceLength++;\n        else\n            break;\n    }\n    data =\n        dir === 'left'\n            ? data.slice(sliceLength)\n            : data.slice(0, data.length - sliceLength);\n    if (data === '0')\n        return '0x';\n    if (dir === 'right' && data.length % 2 === 1)\n        return `0x${data}0`;\n    return `0x${data}`;\n}\n//# sourceMappingURL=hex.js.map",
    "const bigIntSuffix = '#__bigint';\n/**\n * Parses a JSON string, with support for `bigint`.\n *\n * @example\n * ```ts twoslash\n * import { Json } from 'ox'\n *\n * const json = Json.parse('{\"foo\":\"bar\",\"baz\":\"69420694206942069420694206942069420694206942069420#__bigint\"}')\n * // @log: {\n * // @log:   foo: 'bar',\n * // @log:   baz: 69420694206942069420694206942069420694206942069420n\n * // @log: }\n * ```\n *\n * @param string - The value to parse.\n * @param reviver - A function that transforms the results.\n * @returns The parsed value.\n */\nexport function parse(string, reviver) {\n    return JSON.parse(string, (key, value_) => {\n        const value = value_;\n        if (typeof value === 'string' && value.endsWith(bigIntSuffix))\n            return BigInt(value.slice(0, -bigIntSuffix.length));\n        return typeof reviver === 'function' ? reviver(key, value) : value;\n    });\n}\n/**\n * Stringifies a value to its JSON representation, with support for `bigint`.\n *\n * @example\n * ```ts twoslash\n * import { Json } from 'ox'\n *\n * const json = Json.stringify({\n *   foo: 'bar',\n *   baz: 69420694206942069420694206942069420694206942069420n,\n * })\n * // @log: '{\"foo\":\"bar\",\"baz\":\"69420694206942069420694206942069420694206942069420#__bigint\"}'\n * ```\n *\n * @param value - The value to stringify.\n * @param replacer - A function that transforms the results. It is passed the key and value of the property, and must return the value to be used in the JSON string. If this function returns `undefined`, the property is not included in the resulting JSON string.\n * @param space - A string or number that determines the indentation of the JSON string. If it is a number, it indicates the number of spaces to use as indentation; if it is a string (e.g. `'\\t'`), it uses the string as the indentation character.\n * @returns The JSON string.\n */\nexport function stringify(value, replacer, space) {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof replacer === 'function')\n            return replacer(key, value);\n        if (typeof value === 'bigint')\n            return value.toString() + bigIntSuffix;\n        return value;\n    }, space);\n}\n//# sourceMappingURL=Json.js.map",
    "import { equalBytes } from '@noble/curves/abstract/utils';\nimport * as Errors from './Errors.js';\nimport * as Hex from './Hex.js';\nimport * as internal from './internal/bytes.js';\nimport * as internal_hex from './internal/hex.js';\nimport * as Json from './Json.js';\nconst decoder = /*#__PURE__*/ new TextDecoder();\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Asserts if the given value is {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.assert('abc')\n * // @error: Bytes.InvalidBytesTypeError:\n * // @error: Value `\"abc\"` of type `string` is an invalid Bytes value.\n * // @error: Bytes values must be of type `Uint8Array`.\n * ```\n *\n * @param value - Value to assert.\n */\nexport function assert(value) {\n    if (value instanceof Uint8Array)\n        return;\n    if (!value)\n        throw new InvalidBytesTypeError(value);\n    if (typeof value !== 'object')\n        throw new InvalidBytesTypeError(value);\n    if (!('BYTES_PER_ELEMENT' in value))\n        throw new InvalidBytesTypeError(value);\n    if (value.BYTES_PER_ELEMENT !== 1 || value.constructor.name !== 'Uint8Array')\n        throw new InvalidBytesTypeError(value);\n}\n/**\n * Concatenates two or more {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const bytes = Bytes.concat(\n *   Bytes.from([1]),\n *   Bytes.from([69]),\n *   Bytes.from([420, 69]),\n * )\n * // @log: Uint8Array [ 1, 69, 420, 69 ]\n * ```\n *\n * @param values - Values to concatenate.\n * @returns Concatenated {@link ox#Bytes.Bytes}.\n */\nexport function concat(...values) {\n    let length = 0;\n    for (const arr of values) {\n        length += arr.length;\n    }\n    const result = new Uint8Array(length);\n    for (let i = 0, index = 0; i < values.length; i++) {\n        const arr = values[i];\n        result.set(arr, index);\n        index += arr.length;\n    }\n    return result;\n}\n/**\n * Instantiates a {@link ox#Bytes.Bytes} value from a `Uint8Array`, a hex string, or an array of unsigned 8-bit integers.\n *\n * :::tip\n *\n * To instantiate from a **Boolean**, **String**, or **Number**, use one of the following:\n *\n * - `Bytes.fromBoolean`\n *\n * - `Bytes.fromString`\n *\n * - `Bytes.fromNumber`\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.from([255, 124, 5, 4])\n * // @log: Uint8Array([255, 124, 5, 4])\n *\n * const data = Bytes.from('0xdeadbeef')\n * // @log: Uint8Array([222, 173, 190, 239])\n * ```\n *\n * @param value - Value to convert.\n * @returns A {@link ox#Bytes.Bytes} instance.\n */\nexport function from(value) {\n    if (value instanceof Uint8Array)\n        return value;\n    if (typeof value === 'string')\n        return fromHex(value);\n    return fromArray(value);\n}\n/**\n * Converts an array of unsigned 8-bit integers into {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromArray([255, 124, 5, 4])\n * // @log: Uint8Array([255, 124, 5, 4])\n * ```\n *\n * @param value - Value to convert.\n * @returns A {@link ox#Bytes.Bytes} instance.\n */\nexport function fromArray(value) {\n    return value instanceof Uint8Array ? value : new Uint8Array(value);\n}\n/**\n * Encodes a boolean value into {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromBoolean(true)\n * // @log: Uint8Array([1])\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromBoolean(true, { size: 32 })\n * // @log: Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n * ```\n *\n * @param value - Boolean value to encode.\n * @param options - Encoding options.\n * @returns Encoded {@link ox#Bytes.Bytes}.\n */\nexport function fromBoolean(value, options = {}) {\n    const { size } = options;\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof size === 'number') {\n        internal.assertSize(bytes, size);\n        return padLeft(bytes, size);\n    }\n    return bytes;\n}\n/**\n * Encodes a {@link ox#Hex.Hex} value into {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromHex('0x48656c6c6f20776f726c6421')\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromHex('0x48656c6c6f20776f726c6421', { size: 32 })\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n * ```\n *\n * @param value - {@link ox#Hex.Hex} value to encode.\n * @param options - Encoding options.\n * @returns Encoded {@link ox#Bytes.Bytes}.\n */\nexport function fromHex(value, options = {}) {\n    const { size } = options;\n    let hex = value;\n    if (size) {\n        internal_hex.assertSize(value, size);\n        hex = Hex.padRight(value, size);\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2)\n        hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for (let index = 0, j = 0; index < length; index++) {\n        const nibbleLeft = internal.charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = internal.charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new Errors.BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number value into {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromNumber(420)\n * // @log: Uint8Array([1, 164])\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromNumber(420, { size: 4 })\n * // @log: Uint8Array([0, 0, 1, 164])\n * ```\n *\n * @param value - Number value to encode.\n * @param options - Encoding options.\n * @returns Encoded {@link ox#Bytes.Bytes}.\n */\nexport function fromNumber(value, options) {\n    const hex = Hex.fromNumber(value, options);\n    return fromHex(hex);\n}\n/**\n * Encodes a string into {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromString('Hello world!')\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.fromString('Hello world!', { size: 32 })\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n * ```\n *\n * @param value - String to encode.\n * @param options - Encoding options.\n * @returns Encoded {@link ox#Bytes.Bytes}.\n */\nexport function fromString(value, options = {}) {\n    const { size } = options;\n    const bytes = encoder.encode(value);\n    if (typeof size === 'number') {\n        internal.assertSize(bytes, size);\n        return padRight(bytes, size);\n    }\n    return bytes;\n}\n/**\n * Checks if two {@link ox#Bytes.Bytes} values are equal.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.isEqual(Bytes.from([1]), Bytes.from([1]))\n * // @log: true\n *\n * Bytes.isEqual(Bytes.from([1]), Bytes.from([2]))\n * // @log: false\n * ```\n *\n * @param bytesA - First {@link ox#Bytes.Bytes} value.\n * @param bytesB - Second {@link ox#Bytes.Bytes} value.\n * @returns `true` if the two values are equal, otherwise `false`.\n */\nexport function isEqual(bytesA, bytesB) {\n    return equalBytes(bytesA, bytesB);\n}\n/**\n * Pads a {@link ox#Bytes.Bytes} value to the left with zero bytes until it reaches the given `size` (default: 32 bytes).\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.padLeft(Bytes.from([1]), 4)\n * // @log: Uint8Array([0, 0, 0, 1])\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} value to pad.\n * @param size - Size to pad the {@link ox#Bytes.Bytes} value to.\n * @returns Padded {@link ox#Bytes.Bytes} value.\n */\nexport function padLeft(value, size) {\n    return internal.pad(value, { dir: 'left', size });\n}\n/**\n * Pads a {@link ox#Bytes.Bytes} value to the right with zero bytes until it reaches the given `size` (default: 32 bytes).\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.padRight(Bytes.from([1]), 4)\n * // @log: Uint8Array([1, 0, 0, 0])\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} value to pad.\n * @param size - Size to pad the {@link ox#Bytes.Bytes} value to.\n * @returns Padded {@link ox#Bytes.Bytes} value.\n */\nexport function padRight(value, size) {\n    return internal.pad(value, { dir: 'right', size });\n}\n/**\n * Generates random {@link ox#Bytes.Bytes} of the specified length.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const bytes = Bytes.random(32)\n * // @log: Uint8Array([... x32])\n * ```\n *\n * @param length - Length of the random {@link ox#Bytes.Bytes} to generate.\n * @returns Random {@link ox#Bytes.Bytes} of the specified length.\n */\nexport function random(length) {\n    return crypto.getRandomValues(new Uint8Array(length));\n}\n/**\n * Retrieves the size of a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.size(Bytes.from([1, 2, 3, 4]))\n * // @log: 4\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} value.\n * @returns Size of the {@link ox#Bytes.Bytes} value.\n */\nexport function size(value) {\n    return value.length;\n}\n/**\n * Returns a section of a {@link ox#Bytes.Bytes} value given a start/end bytes offset.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.slice(\n *   Bytes.from([1, 2, 3, 4, 5, 6, 7, 8, 9]),\n *   1,\n *   4,\n * )\n * // @log: Uint8Array([2, 3, 4])\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} value.\n * @param start - Start offset.\n * @param end - End offset.\n * @param options - Slice options.\n * @returns Sliced {@link ox#Bytes.Bytes} value.\n */\nexport function slice(value, start, end, options = {}) {\n    const { strict } = options;\n    internal.assertStartOffset(value, start);\n    const value_ = value.slice(start, end);\n    if (strict)\n        internal.assertEndOffset(value_, start, end);\n    return value_;\n}\n/**\n * Decodes a {@link ox#Bytes.Bytes} into a bigint.\n *\n * @example\n * ```ts\n * import { Bytes } from 'ox'\n *\n * Bytes.toBigInt(Bytes.from([1, 164]))\n * // @log: 420n\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\n * @param options - Decoding options.\n * @returns Decoded bigint.\n */\nexport function toBigInt(bytes, options = {}) {\n    const { size } = options;\n    if (typeof size !== 'undefined')\n        internal.assertSize(bytes, size);\n    const hex = Hex.fromBytes(bytes, options);\n    return Hex.toBigInt(hex, options);\n}\n/**\n * Decodes a {@link ox#Bytes.Bytes} into a boolean.\n *\n * @example\n * ```ts\n * import { Bytes } from 'ox'\n *\n * Bytes.toBoolean(Bytes.from([1]))\n * // @log: true\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\n * @param options - Decoding options.\n * @returns Decoded boolean.\n */\nexport function toBoolean(bytes, options = {}) {\n    const { size } = options;\n    let bytes_ = bytes;\n    if (typeof size !== 'undefined') {\n        internal.assertSize(bytes_, size);\n        bytes_ = trimLeft(bytes_);\n    }\n    if (bytes_.length > 1 || bytes_[0] > 1)\n        throw new InvalidBytesBooleanError(bytes_);\n    return Boolean(bytes_[0]);\n}\n/**\n * Encodes a {@link ox#Bytes.Bytes} value into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.toHex(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} to decode.\n * @param options - Options.\n * @returns Decoded {@link ox#Hex.Hex} value.\n */\nexport function toHex(value, options = {}) {\n    return Hex.fromBytes(value, options);\n}\n/**\n * Decodes a {@link ox#Bytes.Bytes} into a number.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.toNumber(Bytes.from([1, 164]))\n * // @log: 420\n * ```\n */\nexport function toNumber(bytes, options = {}) {\n    const { size } = options;\n    if (typeof size !== 'undefined')\n        internal.assertSize(bytes, size);\n    const hex = Hex.fromBytes(bytes, options);\n    return Hex.toNumber(hex, options);\n}\n/**\n * Decodes a {@link ox#Bytes.Bytes} into a string.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const data = Bytes.toString(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // @log: 'Hello world'\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\n * @param options - Options.\n * @returns Decoded string.\n */\nexport function toString(bytes, options = {}) {\n    const { size } = options;\n    let bytes_ = bytes;\n    if (typeof size !== 'undefined') {\n        internal.assertSize(bytes_, size);\n        bytes_ = trimRight(bytes_);\n    }\n    return decoder.decode(bytes_);\n}\n/**\n * Trims leading zeros from a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.trimLeft(Bytes.from([0, 0, 0, 0, 1, 2, 3]))\n * // @log: Uint8Array([1, 2, 3])\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} value.\n * @returns Trimmed {@link ox#Bytes.Bytes} value.\n */\nexport function trimLeft(value) {\n    return internal.trim(value, { dir: 'left' });\n}\n/**\n * Trims trailing zeros from a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.trimRight(Bytes.from([1, 2, 3, 0, 0, 0, 0]))\n * // @log: Uint8Array([1, 2, 3])\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} value.\n * @returns Trimmed {@link ox#Bytes.Bytes} value.\n */\nexport function trimRight(value) {\n    return internal.trim(value, { dir: 'right' });\n}\n/**\n * Checks if the given value is {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.validate('0x')\n * // @log: false\n *\n * Bytes.validate(Bytes.from([1, 2, 3]))\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns `true` if the value is {@link ox#Bytes.Bytes}, otherwise `false`.\n */\nexport function validate(value) {\n    try {\n        assert(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Thrown when the bytes value cannot be represented as a boolean.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.toBoolean(Bytes.from([5]))\n * // @error: Bytes.InvalidBytesBooleanError: Bytes value `[5]` is not a valid boolean.\n * // @error: The bytes array must contain a single byte of either a `0` or `1` value.\n * ```\n */\nexport class InvalidBytesBooleanError extends Errors.BaseError {\n    constructor(bytes) {\n        super(`Bytes value \\`${bytes}\\` is not a valid boolean.`, {\n            metaMessages: [\n                'The bytes array must contain a single byte of either a `0` or `1` value.',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Bytes.InvalidBytesBooleanError'\n        });\n    }\n}\n/**\n * Thrown when a value cannot be converted to bytes.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Bytes } from 'ox'\n *\n * Bytes.from('foo')\n * // @error: Bytes.InvalidBytesTypeError: Value `foo` of type `string` is an invalid Bytes value.\n * ```\n */\nexport class InvalidBytesTypeError extends Errors.BaseError {\n    constructor(value) {\n        super(`Value \\`${typeof value === 'object' ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid Bytes value.`, {\n            metaMessages: ['Bytes values must be of type `Bytes`.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Bytes.InvalidBytesTypeError'\n        });\n    }\n}\n/**\n * Thrown when a size exceeds the maximum allowed size.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.fromString('Hello World!', { size: 8 })\n * // @error: Bytes.SizeOverflowError: Size cannot exceed `8` bytes. Given size: `12` bytes.\n * ```\n */\nexport class SizeOverflowError extends Errors.BaseError {\n    constructor({ givenSize, maxSize }) {\n        super(`Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Bytes.SizeOverflowError'\n        });\n    }\n}\n/**\n * Thrown when a slice offset is out-of-bounds.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.slice(Bytes.from([1, 2, 3]), 4)\n * // @error: Bytes.SliceOffsetOutOfBoundsError: Slice starting at offset `4` is out-of-bounds (size: `3`).\n * ```\n */\nexport class SliceOffsetOutOfBoundsError extends Errors.BaseError {\n    constructor({ offset, position, size, }) {\n        super(`Slice ${position === 'start' ? 'starting' : 'ending'} at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Bytes.SliceOffsetOutOfBoundsError'\n        });\n    }\n}\n/**\n * Thrown when a the padding size exceeds the maximum allowed size.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.padLeft(Bytes.fromString('Hello World!'), 8)\n * // @error: [Bytes.SizeExceedsPaddingSizeError: Bytes size (`12`) exceeds padding size (`8`).\n * ```\n */\nexport class SizeExceedsPaddingSizeError extends Errors.BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Bytes.SizeExceedsPaddingSizeError'\n        });\n    }\n}\n//# sourceMappingURL=Bytes.js.map",
    "import { equalBytes } from '@noble/curves/abstract/utils';\nimport * as Bytes from './Bytes.js';\nimport * as Errors from './Errors.js';\nimport * as internal_bytes from './internal/bytes.js';\nimport * as internal from './internal/hex.js';\nimport * as Json from './Json.js';\nconst encoder = /*#__PURE__*/ new TextEncoder();\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\n/**\n * Asserts if the given value is {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.assert('abc')\n * // @error: InvalidHexValueTypeError:\n * // @error: Value `\"abc\"` of type `string` is an invalid hex type.\n * // @error: Hex types must be represented as `\"0x\\${string}\"`.\n * ```\n *\n * @param value - The value to assert.\n * @param options - Options.\n */\nexport function assert(value, options = {}) {\n    const { strict = false } = options;\n    if (!value)\n        throw new InvalidHexTypeError(value);\n    if (typeof value !== 'string')\n        throw new InvalidHexTypeError(value);\n    if (strict) {\n        if (!/^0x[0-9a-fA-F]*$/.test(value))\n            throw new InvalidHexValueError(value);\n    }\n    if (!value.startsWith('0x'))\n        throw new InvalidHexValueError(value);\n}\n/**\n * Concatenates two or more {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.concat('0x123', '0x456')\n * // @log: '0x123456'\n * ```\n *\n * @param values - The {@link ox#Hex.Hex} values to concatenate.\n * @returns The concatenated {@link ox#Hex.Hex} value.\n */\nexport function concat(...values) {\n    return `0x${values.reduce((acc, x) => acc + x.replace('0x', ''), '')}`;\n}\n/**\n * Instantiates a {@link ox#Hex.Hex} value from a hex string or {@link ox#Bytes.Bytes} value.\n *\n * :::tip\n *\n * To instantiate from a **Boolean**, **String**, or **Number**, use one of the following:\n *\n * - `Hex.fromBoolean`\n *\n * - `Hex.fromString`\n *\n * - `Hex.fromNumber`\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Hex } from 'ox'\n *\n * Hex.from('0x48656c6c6f20576f726c6421')\n * // @log: '0x48656c6c6f20576f726c6421'\n *\n * Hex.from(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} value to encode.\n * @returns The encoded {@link ox#Hex.Hex} value.\n */\nexport function from(value) {\n    if (value instanceof Uint8Array)\n        return fromBytes(value);\n    if (Array.isArray(value))\n        return fromBytes(new Uint8Array(value));\n    return value;\n}\n/**\n * Encodes a boolean into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.fromBoolean(true)\n * // @log: '0x1'\n *\n * Hex.fromBoolean(false)\n * // @log: '0x0'\n *\n * Hex.fromBoolean(true, { size: 32 })\n * // @log: '0x0000000000000000000000000000000000000000000000000000000000000001'\n * ```\n *\n * @param value - The boolean value to encode.\n * @param options - Options.\n * @returns The encoded {@link ox#Hex.Hex} value.\n */\nexport function fromBoolean(value, options = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof options.size === 'number') {\n        internal.assertSize(hex, options.size);\n        return padLeft(hex, options.size);\n    }\n    return hex;\n}\n/**\n * Encodes a {@link ox#Bytes.Bytes} value into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Hex } from 'ox'\n *\n * Hex.fromBytes(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} value to encode.\n * @param options - Options.\n * @returns The encoded {@link ox#Hex.Hex} value.\n */\nexport function fromBytes(value, options = {}) {\n    let string = '';\n    for (let i = 0; i < value.length; i++)\n        string += hexes[value[i]];\n    const hex = `0x${string}`;\n    if (typeof options.size === 'number') {\n        internal.assertSize(hex, options.size);\n        return padRight(hex, options.size);\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.fromNumber(420)\n * // @log: '0x1a4'\n *\n * Hex.fromNumber(420, { size: 32 })\n * // @log: '0x00000000000000000000000000000000000000000000000000000000000001a4'\n * ```\n *\n * @param value - The number or bigint value to encode.\n * @param options - Options.\n * @returns The encoded {@link ox#Hex.Hex} value.\n */\nexport function fromNumber(value, options = {}) {\n    const { signed, size } = options;\n    const value_ = BigInt(value);\n    let maxValue;\n    if (size) {\n        if (signed)\n            maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n        else\n            maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    }\n    else if (typeof value === 'number') {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0;\n    if ((maxValue && value_ > maxValue) || value_ < minValue) {\n        const suffix = typeof value === 'bigint' ? 'n' : '';\n        throw new IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value}${suffix}`,\n        });\n    }\n    const stringValue = (signed && value_ < 0 ? (1n << BigInt(size * 8)) + BigInt(value_) : value_).toString(16);\n    const hex = `0x${stringValue}`;\n    if (size)\n        return padLeft(hex, size);\n    return hex;\n}\n/**\n * Encodes a string into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n * Hex.fromString('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * Hex.fromString('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n * ```\n *\n * @param value - The string value to encode.\n * @param options - Options.\n * @returns The encoded {@link ox#Hex.Hex} value.\n */\nexport function fromString(value, options = {}) {\n    return fromBytes(encoder.encode(value), options);\n}\n/**\n * Checks if two {@link ox#Hex.Hex} values are equal.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.isEqual('0xdeadbeef', '0xdeadbeef')\n * // @log: true\n *\n * Hex.isEqual('0xda', '0xba')\n * // @log: false\n * ```\n *\n * @param hexA - The first {@link ox#Hex.Hex} value.\n * @param hexB - The second {@link ox#Hex.Hex} value.\n * @returns `true` if the two {@link ox#Hex.Hex} values are equal, `false` otherwise.\n */\nexport function isEqual(hexA, hexB) {\n    return equalBytes(Bytes.fromHex(hexA), Bytes.fromHex(hexB));\n}\n/**\n * Pads a {@link ox#Hex.Hex} value to the left with zero bytes until it reaches the given `size` (default: 32 bytes).\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.padLeft('0x1234', 4)\n * // @log: '0x00001234'\n * ```\n *\n * @param value - The {@link ox#Hex.Hex} value to pad.\n * @param size - The size (in bytes) of the output hex value.\n * @returns The padded {@link ox#Hex.Hex} value.\n */\nexport function padLeft(value, size) {\n    return internal.pad(value, { dir: 'left', size });\n}\n/**\n * Pads a {@link ox#Hex.Hex} value to the right with zero bytes until it reaches the given `size` (default: 32 bytes).\n *\n * @example\n * ```ts\n * import { Hex } from 'ox'\n *\n * Hex.padRight('0x1234', 4)\n * // @log: '0x12340000'\n * ```\n *\n * @param value - The {@link ox#Hex.Hex} value to pad.\n * @param size - The size (in bytes) of the output hex value.\n * @returns The padded {@link ox#Hex.Hex} value.\n */\nexport function padRight(value, size) {\n    return internal.pad(value, { dir: 'right', size });\n}\n/**\n * Generates a random {@link ox#Hex.Hex} value of the specified length.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const hex = Hex.random(32)\n * // @log: '0x...'\n * ```\n *\n * @returns Random {@link ox#Hex.Hex} value.\n */\nexport function random(length) {\n    return fromBytes(Bytes.random(length));\n}\n/**\n * Returns a section of a {@link ox#Bytes.Bytes} value given a start/end bytes offset.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.slice('0x0123456789', 1, 4)\n * // @log: '0x234567'\n * ```\n *\n * @param value - The {@link ox#Hex.Hex} value to slice.\n * @param start - The start offset (in bytes).\n * @param end - The end offset (in bytes).\n * @param options - Options.\n * @returns The sliced {@link ox#Hex.Hex} value.\n */\nexport function slice(value, start, end, options = {}) {\n    const { strict } = options;\n    internal.assertStartOffset(value, start);\n    const value_ = `0x${value\n        .replace('0x', '')\n        .slice((start ?? 0) * 2, (end ?? value.length) * 2)}`;\n    if (strict)\n        internal.assertEndOffset(value_, start, end);\n    return value_;\n}\n/**\n * Retrieves the size of a {@link ox#Hex.Hex} value (in bytes).\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.size('0xdeadbeef')\n * // @log: 4\n * ```\n *\n * @param value - The {@link ox#Hex.Hex} value to get the size of.\n * @returns The size of the {@link ox#Hex.Hex} value (in bytes).\n */\nexport function size(value) {\n    return Math.ceil((value.length - 2) / 2);\n}\n/**\n * Trims leading zeros from a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.trimLeft('0x00000000deadbeef')\n * // @log: '0xdeadbeef'\n * ```\n *\n * @param value - The {@link ox#Hex.Hex} value to trim.\n * @returns The trimmed {@link ox#Hex.Hex} value.\n */\nexport function trimLeft(value) {\n    return internal.trim(value, { dir: 'left' });\n}\n/**\n * Trims trailing zeros from a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.trimRight('0xdeadbeef00000000')\n * // @log: '0xdeadbeef'\n * ```\n *\n * @param value - The {@link ox#Hex.Hex} value to trim.\n * @returns The trimmed {@link ox#Hex.Hex} value.\n */\nexport function trimRight(value) {\n    return internal.trim(value, { dir: 'right' });\n}\n/**\n * Decodes a {@link ox#Hex.Hex} value into a BigInt.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.toBigInt('0x1a4')\n * // @log: 420n\n *\n * Hex.toBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // @log: 420n\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to decode.\n * @param options - Options.\n * @returns The decoded BigInt.\n */\nexport function toBigInt(hex, options = {}) {\n    const { signed } = options;\n    if (options.size)\n        internal.assertSize(hex, options.size);\n    const value = BigInt(hex);\n    if (!signed)\n        return value;\n    const size = (hex.length - 2) / 2;\n    const max_unsigned = (1n << (BigInt(size) * 8n)) - 1n;\n    const max_signed = max_unsigned >> 1n;\n    if (value <= max_signed)\n        return value;\n    return value - max_unsigned - 1n;\n}\n/**\n * Decodes a {@link ox#Hex.Hex} value into a boolean.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.toBoolean('0x01')\n * // @log: true\n *\n * Hex.toBoolean('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // @log: true\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to decode.\n * @param options - Options.\n * @returns The decoded boolean.\n */\nexport function toBoolean(hex, options = {}) {\n    if (options.size)\n        internal.assertSize(hex, options.size);\n    const hex_ = trimLeft(hex);\n    if (hex_ === '0x')\n        return false;\n    if (hex_ === '0x1')\n        return true;\n    throw new InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a {@link ox#Hex.Hex} value into a {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const data = Hex.toBytes('0x48656c6c6f20776f726c6421')\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to decode.\n * @param options - Options.\n * @returns The decoded {@link ox#Bytes.Bytes}.\n */\nexport function toBytes(hex, options = {}) {\n    return Bytes.fromHex(hex, options);\n}\n/**\n * Decodes a {@link ox#Hex.Hex} value into a number.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.toNumber('0x1a4')\n * // @log: 420\n *\n * Hex.toNumber('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // @log: 420\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to decode.\n * @param options - Options.\n * @returns The decoded number.\n */\nexport function toNumber(hex, options = {}) {\n    const { signed, size } = options;\n    if (!signed && !size)\n        return Number(hex);\n    return Number(toBigInt(hex, options));\n}\n/**\n * Decodes a {@link ox#Hex.Hex} value into a string.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.toString('0x48656c6c6f20576f726c6421')\n * // @log: 'Hello world!'\n *\n * Hex.toString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // @log: 'Hello world'\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to decode.\n * @param options - Options.\n * @returns The decoded string.\n */\nexport function toString(hex, options = {}) {\n    const { size } = options;\n    let bytes = Bytes.fromHex(hex);\n    if (size) {\n        internal_bytes.assertSize(bytes, size);\n        bytes = Bytes.trimRight(bytes);\n    }\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Checks if the given value is {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Hex } from 'ox'\n *\n * Hex.validate('0xdeadbeef')\n * // @log: true\n *\n * Hex.validate(Bytes.from([1, 2, 3]))\n * // @log: false\n * ```\n *\n * @param value - The value to check.\n * @param options - Options.\n * @returns `true` if the value is a {@link ox#Hex.Hex}, `false` otherwise.\n */\nexport function validate(value, options = {}) {\n    const { strict = false } = options;\n    try {\n        assert(value, { strict });\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Thrown when the provided integer is out of range, and cannot be represented as a hex value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.fromNumber(420182738912731283712937129)\n * // @error: Hex.IntegerOutOfRangeError: Number \\`4.2018273891273126e+26\\` is not in safe unsigned integer range (`0` to `9007199254740991`)\n * ```\n */\nexport class IntegerOutOfRangeError extends Errors.BaseError {\n    constructor({ max, min, signed, size, value, }) {\n        super(`Number \\`${value}\\` is not in safe${size ? ` ${size * 8}-bit` : ''}${signed ? ' signed' : ' unsigned'} integer range ${max ? `(\\`${min}\\` to \\`${max}\\`)` : `(above \\`${min}\\`)`}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.IntegerOutOfRangeError'\n        });\n    }\n}\n/**\n * Thrown when the provided hex value cannot be represented as a boolean.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.toBoolean('0xa')\n * // @error: Hex.InvalidHexBooleanError: Hex value `\"0xa\"` is not a valid boolean.\n * // @error: The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).\n * ```\n */\nexport class InvalidHexBooleanError extends Errors.BaseError {\n    constructor(hex) {\n        super(`Hex value \\`\"${hex}\"\\` is not a valid boolean.`, {\n            metaMessages: [\n                'The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.InvalidHexBooleanError'\n        });\n    }\n}\n/**\n * Thrown when the provided value is not a valid hex type.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.assert(1)\n * // @error: Hex.InvalidHexTypeError: Value `1` of type `number` is an invalid hex type.\n * ```\n */\nexport class InvalidHexTypeError extends Errors.BaseError {\n    constructor(value) {\n        super(`Value \\`${typeof value === 'object' ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid hex type.`, {\n            metaMessages: ['Hex types must be represented as `\"0x${string}\"`.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.InvalidHexTypeError'\n        });\n    }\n}\n/**\n * Thrown when the provided hex value is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.assert('0x0123456789abcdefg')\n * // @error: Hex.InvalidHexValueError: Value `0x0123456789abcdefg` is an invalid hex value.\n * // @error: Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).\n * ```\n */\nexport class InvalidHexValueError extends Errors.BaseError {\n    constructor(value) {\n        super(`Value \\`${value}\\` is an invalid hex value.`, {\n            metaMessages: [\n                'Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.InvalidHexValueError'\n        });\n    }\n}\n/**\n * Thrown when the provided hex value is an odd length.\n *\n * @example\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * Bytes.fromHex('0xabcde')\n * // @error: Hex.InvalidLengthError: Hex value `\"0xabcde\"` is an odd length (5 nibbles).\n * ```\n */\nexport class InvalidLengthError extends Errors.BaseError {\n    constructor(value) {\n        super(`Hex value \\`\"${value}\"\\` is an odd length (${value.length - 2} nibbles).`, {\n            metaMessages: ['It must be an even length.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.InvalidLengthError'\n        });\n    }\n}\n/**\n * Thrown when the size of the value exceeds the expected max size.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.fromString('Hello World!', { size: 8 })\n * // @error: Hex.SizeOverflowError: Size cannot exceed `8` bytes. Given size: `12` bytes.\n * ```\n */\nexport class SizeOverflowError extends Errors.BaseError {\n    constructor({ givenSize, maxSize }) {\n        super(`Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.SizeOverflowError'\n        });\n    }\n}\n/**\n * Thrown when the slice offset exceeds the bounds of the value.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.slice('0x0123456789', 6)\n * // @error: Hex.SliceOffsetOutOfBoundsError: Slice starting at offset `6` is out-of-bounds (size: `5`).\n * ```\n */\nexport class SliceOffsetOutOfBoundsError extends Errors.BaseError {\n    constructor({ offset, position, size, }) {\n        super(`Slice ${position === 'start' ? 'starting' : 'ending'} at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.SliceOffsetOutOfBoundsError'\n        });\n    }\n}\n/**\n * Thrown when the size of the value exceeds the pad size.\n *\n * @example\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * Hex.padLeft('0x1a4e12a45a21323123aaa87a897a897a898a6567a578a867a98778a667a85a875a87a6a787a65a675a6a9', 32)\n * // @error: Hex.SizeExceedsPaddingSizeError: Hex size (`43`) exceeds padding size (`32`).\n * ```\n */\nexport class SizeExceedsPaddingSizeError extends Errors.BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Hex.SizeExceedsPaddingSizeError'\n        });\n    }\n}\n//# sourceMappingURL=Hex.js.map",
    "import * as Hex from './Hex.js';\n/**\n * Converts a {@link ox#Withdrawal.Rpc} to an {@link ox#Withdrawal.Withdrawal}.\n *\n * @example\n * ```ts twoslash\n * import { Withdrawal } from 'ox'\n *\n * const withdrawal = Withdrawal.fromRpc({\n *   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n *   amount: '0x620323',\n *   index: '0x0',\n *   validatorIndex: '0x1',\n * })\n * // @log: {\n * // @log:   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n * // @log:   amount: 6423331n,\n * // @log:   index: 0,\n * // @log:   validatorIndex: 1\n * // @log: }\n * ```\n *\n * @param withdrawal - The RPC withdrawal to convert.\n * @returns An instantiated {@link ox#Withdrawal.Withdrawal}.\n */\nexport function fromRpc(withdrawal) {\n    return {\n        ...withdrawal,\n        amount: BigInt(withdrawal.amount),\n        index: Number(withdrawal.index),\n        validatorIndex: Number(withdrawal.validatorIndex),\n    };\n}\n/**\n * Converts a {@link ox#Withdrawal.Withdrawal} to an {@link ox#Withdrawal.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Withdrawal } from 'ox'\n *\n * const withdrawal = Withdrawal.toRpc({\n *   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n *   amount: 6423331n,\n *   index: 0,\n *   validatorIndex: 1,\n * })\n * // @log: {\n * // @log:   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n * // @log:   amount: '0x620323',\n * // @log:   index: '0x0',\n * // @log:   validatorIndex: '0x1',\n * // @log: }\n * ```\n *\n * @param withdrawal - The Withdrawal to convert.\n * @returns An RPC Withdrawal.\n */\nexport function toRpc(withdrawal) {\n    return {\n        address: withdrawal.address,\n        amount: Hex.fromNumber(withdrawal.amount),\n        index: Hex.fromNumber(withdrawal.index),\n        validatorIndex: Hex.fromNumber(withdrawal.validatorIndex),\n    };\n}\n//# sourceMappingURL=Withdrawal.js.map",
    "import * as Hex from './Hex.js';\nimport * as Withdrawal from './Withdrawal.js';\n/**\n * Converts an {@link ox#BlockOverrides.Rpc} to an {@link ox#BlockOverrides.BlockOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { BlockOverrides } from 'ox'\n *\n * const blockOverrides = BlockOverrides.fromRpc({\n *   baseFeePerGas: '0x1',\n *   blobBaseFee: '0x2',\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\n *   gasLimit: '0x4',\n *   number: '0x5',\n *   prevRandao: '0x6',\n *   time: '0x1234567890',\n *   withdrawals: [\n *     {\n *       address: '0x0000000000000000000000000000000000000000',\n *       amount: '0x1',\n *       index: '0x0',\n *       validatorIndex: '0x1',\n *     },\n *   ],\n * })\n * ```\n *\n * @param rpcBlockOverrides - The RPC block overrides to convert.\n * @returns An instantiated {@link ox#BlockOverrides.BlockOverrides}.\n */\nexport function fromRpc(rpcBlockOverrides) {\n    return {\n        ...(rpcBlockOverrides.baseFeePerGas && {\n            baseFeePerGas: BigInt(rpcBlockOverrides.baseFeePerGas),\n        }),\n        ...(rpcBlockOverrides.blobBaseFee && {\n            blobBaseFee: BigInt(rpcBlockOverrides.blobBaseFee),\n        }),\n        ...(rpcBlockOverrides.feeRecipient && {\n            feeRecipient: rpcBlockOverrides.feeRecipient,\n        }),\n        ...(rpcBlockOverrides.gasLimit && {\n            gasLimit: BigInt(rpcBlockOverrides.gasLimit),\n        }),\n        ...(rpcBlockOverrides.number && {\n            number: BigInt(rpcBlockOverrides.number),\n        }),\n        ...(rpcBlockOverrides.prevRandao && {\n            prevRandao: BigInt(rpcBlockOverrides.prevRandao),\n        }),\n        ...(rpcBlockOverrides.time && {\n            time: BigInt(rpcBlockOverrides.time),\n        }),\n        ...(rpcBlockOverrides.withdrawals && {\n            withdrawals: rpcBlockOverrides.withdrawals.map(Withdrawal.fromRpc),\n        }),\n    };\n}\n/**\n * Converts an {@link ox#BlockOverrides.BlockOverrides} to an {@link ox#BlockOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { BlockOverrides } from 'ox'\n *\n * const blockOverrides = BlockOverrides.toRpc({\n *   baseFeePerGas: 1n,\n *   blobBaseFee: 2n,\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\n *   gasLimit: 4n,\n *   number: 5n,\n *   prevRandao: 6n,\n *   time: 78187493520n,\n *   withdrawals: [\n *     {\n *       address: '0x0000000000000000000000000000000000000000',\n *       amount: 1n,\n *       index: 0,\n *       validatorIndex: 1,\n *     },\n *   ],\n * })\n * ```\n *\n * @param blockOverrides - The block overrides to convert.\n * @returns An instantiated {@link ox#BlockOverrides.Rpc}.\n */\nexport function toRpc(blockOverrides) {\n    return {\n        ...(typeof blockOverrides.baseFeePerGas === 'bigint' && {\n            baseFeePerGas: Hex.fromNumber(blockOverrides.baseFeePerGas),\n        }),\n        ...(typeof blockOverrides.blobBaseFee === 'bigint' && {\n            blobBaseFee: Hex.fromNumber(blockOverrides.blobBaseFee),\n        }),\n        ...(typeof blockOverrides.feeRecipient === 'string' && {\n            feeRecipient: blockOverrides.feeRecipient,\n        }),\n        ...(typeof blockOverrides.gasLimit === 'bigint' && {\n            gasLimit: Hex.fromNumber(blockOverrides.gasLimit),\n        }),\n        ...(typeof blockOverrides.number === 'bigint' && {\n            number: Hex.fromNumber(blockOverrides.number),\n        }),\n        ...(typeof blockOverrides.prevRandao === 'bigint' && {\n            prevRandao: Hex.fromNumber(blockOverrides.prevRandao),\n        }),\n        ...(typeof blockOverrides.time === 'bigint' && {\n            time: Hex.fromNumber(blockOverrides.time),\n        }),\n        ...(blockOverrides.withdrawals && {\n            withdrawals: blockOverrides.withdrawals.map(Withdrawal.toRpc),\n        }),\n    };\n}\n//# sourceMappingURL=BlockOverrides.js.map",
    "/* [Multicall3](https://github.com/mds1/multicall) */\nexport const multicall3Abi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        name: 'allowFailure',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'callData',\n                        type: 'bytes',\n                    },\n                ],\n                name: 'calls',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'aggregate3',\n        outputs: [\n            {\n                components: [\n                    {\n                        name: 'success',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'returnData',\n                        type: 'bytes',\n                    },\n                ],\n                name: 'returnData',\n                type: 'tuple[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentBlockTimestamp',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'timestamp',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n];\nexport const batchGatewayAbi = [\n    {\n        name: 'query',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            {\n                type: 'tuple[]',\n                name: 'queries',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'sender',\n                    },\n                    {\n                        type: 'string[]',\n                        name: 'urls',\n                    },\n                    {\n                        type: 'bytes',\n                        name: 'data',\n                    },\n                ],\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool[]',\n                name: 'failures',\n            },\n            {\n                type: 'bytes[]',\n                name: 'responses',\n            },\n        ],\n    },\n    {\n        name: 'HttpError',\n        type: 'error',\n        inputs: [\n            {\n                type: 'uint16',\n                name: 'status',\n            },\n            {\n                type: 'string',\n                name: 'message',\n            },\n        ],\n    },\n];\nconst universalResolverErrors = [\n    {\n        inputs: [\n            {\n                name: 'dns',\n                type: 'bytes',\n            },\n        ],\n        name: 'DNSDecodingFailed',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'ens',\n                type: 'string',\n            },\n        ],\n        name: 'DNSEncodingFailed',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'EmptyAddress',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'status',\n                type: 'uint16',\n            },\n            {\n                name: 'message',\n                type: 'string',\n            },\n        ],\n        name: 'HttpError',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'InvalidBatchGatewayResponse',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'errorData',\n                type: 'bytes',\n            },\n        ],\n        name: 'ResolverError',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'name',\n                type: 'bytes',\n            },\n            {\n                name: 'resolver',\n                type: 'address',\n            },\n        ],\n        name: 'ResolverNotContract',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'name',\n                type: 'bytes',\n            },\n        ],\n        name: 'ResolverNotFound',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                name: 'primary',\n                type: 'string',\n            },\n            {\n                name: 'primaryAddress',\n                type: 'bytes',\n            },\n        ],\n        name: 'ReverseAddressMismatch',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'selector',\n                type: 'bytes4',\n            },\n        ],\n        name: 'UnsupportedResolverProfile',\n        type: 'error',\n    },\n];\nexport const universalResolverResolveAbi = [\n    ...universalResolverErrors,\n    {\n        name: 'resolveWithGateways',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes' },\n            { name: 'data', type: 'bytes' },\n            { name: 'gateways', type: 'string[]' },\n        ],\n        outputs: [\n            { name: '', type: 'bytes' },\n            { name: 'address', type: 'address' },\n        ],\n    },\n];\nexport const universalResolverReverseAbi = [\n    ...universalResolverErrors,\n    {\n        name: 'reverseWithGateways',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { type: 'bytes', name: 'reverseName' },\n            { type: 'uint256', name: 'coinType' },\n            { type: 'string[]', name: 'gateways' },\n        ],\n        outputs: [\n            { type: 'string', name: 'resolvedName' },\n            { type: 'address', name: 'resolver' },\n            { type: 'address', name: 'reverseResolver' },\n        ],\n    },\n];\nexport const textResolverAbi = [\n    {\n        name: 'text',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes32' },\n            { name: 'key', type: 'string' },\n        ],\n        outputs: [{ name: '', type: 'string' }],\n    },\n];\nexport const addressResolverAbi = [\n    {\n        name: 'addr',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [{ name: 'name', type: 'bytes32' }],\n        outputs: [{ name: '', type: 'address' }],\n    },\n    {\n        name: 'addr',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'name', type: 'bytes32' },\n            { name: 'coinType', type: 'uint256' },\n        ],\n        outputs: [{ name: '', type: 'bytes' }],\n    },\n];\n// ERC-1271\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\n/** @internal */\nexport const erc1271Abi = [\n    {\n        name: 'isValidSignature',\n        type: 'function',\n        stateMutability: 'view',\n        inputs: [\n            { name: 'hash', type: 'bytes32' },\n            { name: 'signature', type: 'bytes' },\n        ],\n        outputs: [{ name: '', type: 'bytes4' }],\n    },\n];\n// ERC-6492 - universal deployless signature validator contract\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\nexport const erc6492SignatureValidatorAbi = [\n    {\n        inputs: [\n            {\n                name: '_signer',\n                type: 'address',\n            },\n            {\n                name: '_hash',\n                type: 'bytes32',\n            },\n            {\n                name: '_signature',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            {\n                name: '_signer',\n                type: 'address',\n            },\n            {\n                name: '_hash',\n                type: 'bytes32',\n            },\n            {\n                name: '_signature',\n                type: 'bytes',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n        name: 'isValidSig',\n    },\n];\n/** [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20) */\nexport const erc20Abi = [\n    {\n        type: 'event',\n        name: 'Approval',\n        inputs: [\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'event',\n        name: 'Transfer',\n        inputs: [\n            {\n                indexed: true,\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'allowance',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'approve',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'balanceOf',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'decimals',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'uint8',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'name',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'string',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'symbol',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'string',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'totalSupply',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'transfer',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'transferFrom',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n];\n/**\n * [bytes32-flavored ERC-20](https://docs.makerdao.com/smart-contract-modules/mkr-module#4.-gotchas-potential-source-of-user-error)\n * for tokens (ie. Maker) that use bytes32 instead of string.\n */\nexport const erc20Abi_bytes32 = [\n    {\n        type: 'event',\n        name: 'Approval',\n        inputs: [\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'event',\n        name: 'Transfer',\n        inputs: [\n            {\n                indexed: true,\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'allowance',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'approve',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'balanceOf',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'decimals',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'uint8',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'name',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'symbol',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'totalSupply',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'transfer',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'transferFrom',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n];\n/** [ERC-1155 Multi Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-1155) */\nexport const erc1155Abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balance',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'needed',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        name: 'ERC1155InsufficientBalance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'approver',\n                type: 'address',\n            },\n        ],\n        name: 'ERC1155InvalidApprover',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'idsLength',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'valuesLength',\n                type: 'uint256',\n            },\n        ],\n        name: 'ERC1155InvalidArrayLength',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n        ],\n        name: 'ERC1155InvalidOperator',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'receiver',\n                type: 'address',\n            },\n        ],\n        name: 'ERC1155InvalidReceiver',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n        ],\n        name: 'ERC1155InvalidSender',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'ERC1155MissingApprovalForAll',\n        type: 'error',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        name: 'ApprovalForAll',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'ids',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'values',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'TransferBatch',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'TransferSingle',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'value',\n                type: 'string',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n        ],\n        name: 'URI',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: 'accounts',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'ids',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'balanceOfBatch',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: '',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n        ],\n        name: 'isApprovedForAll',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'ids',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'values',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'safeBatchTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'safeTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        name: 'setApprovalForAll',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'interfaceId',\n                type: 'bytes4',\n            },\n        ],\n        name: 'supportsInterface',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'uri',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n];\n/** [ERC-721 Non-Fungible Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-721) */\nexport const erc721Abi = [\n    {\n        type: 'event',\n        name: 'Approval',\n        inputs: [\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'event',\n        name: 'ApprovalForAll',\n        inputs: [\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'event',\n        name: 'Transfer',\n        inputs: [\n            {\n                indexed: true,\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'approve',\n        stateMutability: 'payable',\n        inputs: [\n            {\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        outputs: [],\n    },\n    {\n        type: 'function',\n        name: 'balanceOf',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'getApproved',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'isApprovedForAll',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                name: 'operator',\n                type: 'address',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'name',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'string',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'ownerOf',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'safeTransferFrom',\n        stateMutability: 'payable',\n        inputs: [\n            {\n                name: 'from',\n                type: 'address',\n            },\n            {\n                name: 'to',\n                type: 'address',\n            },\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        outputs: [],\n    },\n    {\n        type: 'function',\n        name: 'safeTransferFrom',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'from',\n                type: 'address',\n            },\n            {\n                name: 'to',\n                type: 'address',\n            },\n            {\n                name: 'id',\n                type: 'uint256',\n            },\n            {\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        outputs: [],\n    },\n    {\n        type: 'function',\n        name: 'setApprovalForAll',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        outputs: [],\n    },\n    {\n        type: 'function',\n        name: 'symbol',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'string',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'tokenByIndex',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'index',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'tokenByIndex',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                name: 'index',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'tokenURI',\n        stateMutability: 'view',\n        inputs: [\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                type: 'string',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'totalSupply',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        name: 'transferFrom',\n        stateMutability: 'payable',\n        inputs: [\n            {\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        outputs: [],\n    },\n];\n/** [ERC-4626 Tokenized Vaults Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-4626) */\nexport const erc4626Abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'receiver',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'assets',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        name: 'Deposit',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'receiver',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'assets',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        name: 'Withdraw',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'asset',\n        outputs: [\n            {\n                name: 'assetTokenAddress',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        name: 'convertToAssets',\n        outputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        name: 'convertToShares',\n        outputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n            },\n        ],\n        name: 'deposit',\n        outputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'caller',\n                type: 'address',\n            },\n        ],\n        name: 'maxDeposit',\n        outputs: [\n            {\n                name: 'maxAssets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'caller',\n                type: 'address',\n            },\n        ],\n        name: 'maxMint',\n        outputs: [\n            {\n                name: 'maxShares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'maxRedeem',\n        outputs: [\n            {\n                name: 'maxShares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'maxWithdraw',\n        outputs: [\n            {\n                name: 'maxAssets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n            },\n        ],\n        name: 'mint',\n        outputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        name: 'previewDeposit',\n        outputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        name: 'previewMint',\n        outputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        name: 'previewRedeem',\n        outputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        name: 'previewWithdraw',\n        outputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n            },\n            {\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'redeem',\n        outputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalAssets',\n        outputs: [\n            {\n                name: 'totalManagedAssets',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'to',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'from',\n                type: 'address',\n            },\n            {\n                name: 'to',\n                type: 'address',\n            },\n            {\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: 'assets',\n                type: 'uint256',\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n            },\n            {\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'withdraw',\n        outputs: [\n            {\n                name: 'shares',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n];\n//# sourceMappingURL=abis.js.map",
    "export const aggregate3Signature = '0x82ad56cb';\n//# sourceMappingURL=contract.js.map",
    "export const deploylessCallViaBytecodeBytecode = '0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe';\nexport const deploylessCallViaFactoryBytecode = '0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe';\nexport const erc6492SignatureValidatorByteCode = '0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572';\nexport const multicall3Bytecode = '0x608060405234801561001057600080fd5b506115b9806100206000396000f3fe6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e14610325578063bce38bd714610350578063c3077fa914610380578063ee82ac5e146103b2576100f3565b80634d2301cc1461026257806372425d9d1461029f57806382ad56cb146102ca57806386d516e8146102fa576100f3565b80633408e470116100c65780633408e470146101af578063399542e9146101da5780633e64a6961461020c57806342cbb15c14610237576100f3565b80630f28c97d146100f8578063174dea7114610123578063252dba421461015357806327e86d6e14610184575b600080fd5b34801561010457600080fd5b5061010d6103ef565b60405161011a9190610c0a565b60405180910390f35b61013d60048036038101906101389190610c94565b6103f7565b60405161014a9190610e94565b60405180910390f35b61016d60048036038101906101689190610f0c565b610615565b60405161017b92919061101b565b60405180910390f35b34801561019057600080fd5b506101996107ab565b6040516101a69190611064565b60405180910390f35b3480156101bb57600080fd5b506101c46107b7565b6040516101d19190610c0a565b60405180910390f35b6101f460048036038101906101ef91906110ab565b6107bf565b6040516102039392919061110b565b60405180910390f35b34801561021857600080fd5b506102216107e1565b60405161022e9190610c0a565b60405180910390f35b34801561024357600080fd5b5061024c6107e9565b6040516102599190610c0a565b60405180910390f35b34801561026e57600080fd5b50610289600480360381019061028491906111a7565b6107f1565b6040516102969190610c0a565b60405180910390f35b3480156102ab57600080fd5b506102b4610812565b6040516102c19190610c0a565b60405180910390f35b6102e460048036038101906102df919061122a565b61081a565b6040516102f19190610e94565b60405180910390f35b34801561030657600080fd5b5061030f6109e4565b60405161031c9190610c0a565b60405180910390f35b34801561033157600080fd5b5061033a6109ec565b6040516103479190611286565b60405180910390f35b61036a600480360381019061036591906110ab565b6109f4565b6040516103779190610e94565b60405180910390f35b61039a60048036038101906103959190610f0c565b610ba6565b6040516103a99392919061110b565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d491906112cd565b610bca565b6040516103e69190611064565b60405180910390f35b600042905090565b60606000808484905090508067ffffffffffffffff81111561041c5761041b6112fa565b5b60405190808252806020026020018201604052801561045557816020015b610442610bd5565b81526020019060019003908161043a5790505b5092503660005b828110156105c957600085828151811061047957610478611329565b5b6020026020010151905087878381811061049657610495611329565b5b90506020028101906104a89190611367565b925060008360400135905080860195508360000160208101906104cb91906111a7565b73ffffffffffffffffffffffffffffffffffffffff16818580606001906104f2919061138f565b604051610500929190611431565b60006040518083038185875af1925050503d806000811461053d576040519150601f19603f3d011682016040523d82523d6000602084013e610542565b606091505b5083600001846020018290528215151515815250505081516020850135176105bc577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b826001019250505061045c565b5082341461060c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610603906114a7565b60405180910390fd5b50505092915050565b6000606043915060008484905090508067ffffffffffffffff81111561063e5761063d6112fa565b5b60405190808252806020026020018201604052801561067157816020015b606081526020019060019003908161065c5790505b5091503660005b828110156107a157600087878381811061069557610694611329565b5b90506020028101906106a791906114c7565b92508260000160208101906106bc91906111a7565b73ffffffffffffffffffffffffffffffffffffffff168380602001906106e2919061138f565b6040516106f0929190611431565b6000604051808303816000865af19150503d806000811461072d576040519150601f19603f3d011682016040523d82523d6000602084013e610732565b606091505b5086848151811061074657610745611329565b5b60200260200101819052819250505080610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c9061153b565b60405180910390fd5b81600101915050610678565b5050509250929050565b60006001430340905090565b600046905090565b6000806060439250434091506107d68686866109f4565b905093509350939050565b600048905090565b600043905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600044905090565b606060008383905090508067ffffffffffffffff81111561083e5761083d6112fa565b5b60405190808252806020026020018201604052801561087757816020015b610864610bd5565b81526020019060019003908161085c5790505b5091503660005b828110156109db57600084828151811061089b5761089a611329565b5b602002602001015190508686838181106108b8576108b7611329565b5b90506020028101906108ca919061155b565b92508260000160208101906108df91906111a7565b73ffffffffffffffffffffffffffffffffffffffff16838060400190610905919061138f565b604051610913929190611431565b6000604051808303816000865af19150503d8060008114610950576040519150601f19603f3d011682016040523d82523d6000602084013e610955565b606091505b5082600001836020018290528215151515815250505080516020840135176109cf577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b8160010191505061087e565b50505092915050565b600045905090565b600041905090565b606060008383905090508067ffffffffffffffff811115610a1857610a176112fa565b5b604051908082528060200260200182016040528015610a5157816020015b610a3e610bd5565b815260200190600190039081610a365790505b5091503660005b82811015610b9c576000848281518110610a7557610a74611329565b5b60200260200101519050868683818110610a9257610a91611329565b5b9050602002810190610aa491906114c7565b9250826000016020810190610ab991906111a7565b73ffffffffffffffffffffffffffffffffffffffff16838060200190610adf919061138f565b604051610aed929190611431565b6000604051808303816000865af19150503d8060008114610b2a576040519150601f19603f3d011682016040523d82523d6000602084013e610b2f565b606091505b508260000183602001829052821515151581525050508715610b90578060000151610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b869061153b565b60405180910390fd5b5b81600101915050610a58565b5050509392505050565b6000806060610bb7600186866107bf565b8093508194508295505050509250925092565b600081409050919050565b6040518060400160405280600015158152602001606081525090565b6000819050919050565b610c0481610bf1565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610c5457610c53610c2f565b5b8235905067ffffffffffffffff811115610c7157610c70610c34565b5b602083019150836020820283011115610c8d57610c8c610c39565b5b9250929050565b60008060208385031215610cab57610caa610c25565b5b600083013567ffffffffffffffff811115610cc957610cc8610c2a565b5b610cd585828601610c3e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b610d2281610d0d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d62578082015181840152602081019050610d47565b83811115610d71576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d9382610d28565b610d9d8185610d33565b9350610dad818560208601610d44565b610db681610d77565b840191505092915050565b6000604083016000830151610dd96000860182610d19565b5060208301518482036020860152610df18282610d88565b9150508091505092915050565b6000610e0a8383610dc1565b905092915050565b6000602082019050919050565b6000610e2a82610ce1565b610e348185610cec565b935083602082028501610e4685610cfd565b8060005b85811015610e825784840389528151610e638582610dfe565b9450610e6e83610e12565b925060208a01995050600181019050610e4a565b50829750879550505050505092915050565b60006020820190508181036000830152610eae8184610e1f565b905092915050565b60008083601f840112610ecc57610ecb610c2f565b5b8235905067ffffffffffffffff811115610ee957610ee8610c34565b5b602083019150836020820283011115610f0557610f04610c39565b5b9250929050565b60008060208385031215610f2357610f22610c25565b5b600083013567ffffffffffffffff811115610f4157610f40610c2a565b5b610f4d85828601610eb6565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610f918383610d88565b905092915050565b6000602082019050919050565b6000610fb182610f59565b610fbb8185610f64565b935083602082028501610fcd85610f75565b8060005b858110156110095784840389528151610fea8582610f85565b9450610ff583610f99565b925060208a01995050600181019050610fd1565b50829750879550505050505092915050565b60006040820190506110306000830185610bfb565b81810360208301526110428184610fa6565b90509392505050565b6000819050919050565b61105e8161104b565b82525050565b60006020820190506110796000830184611055565b92915050565b61108881610d0d565b811461109357600080fd5b50565b6000813590506110a58161107f565b92915050565b6000806000604084860312156110c4576110c3610c25565b5b60006110d286828701611096565b935050602084013567ffffffffffffffff8111156110f3576110f2610c2a565b5b6110ff86828701610eb6565b92509250509250925092565b60006060820190506111206000830186610bfb565b61112d6020830185611055565b818103604083015261113f8184610e1f565b9050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117482611149565b9050919050565b61118481611169565b811461118f57600080fd5b50565b6000813590506111a18161117b565b92915050565b6000602082840312156111bd576111bc610c25565b5b60006111cb84828501611192565b91505092915050565b60008083601f8401126111ea576111e9610c2f565b5b8235905067ffffffffffffffff81111561120757611206610c34565b5b60208301915083602082028301111561122357611222610c39565b5b9250929050565b6000806020838503121561124157611240610c25565b5b600083013567ffffffffffffffff81111561125f5761125e610c2a565b5b61126b858286016111d4565b92509250509250929050565b61128081611169565b82525050565b600060208201905061129b6000830184611277565b92915050565b6112aa81610bf1565b81146112b557600080fd5b50565b6000813590506112c7816112a1565b92915050565b6000602082840312156112e3576112e2610c25565b5b60006112f1848285016112b8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261138357611382611358565b5b80830191505092915050565b600080833560016020038436030381126113ac576113ab611358565b5b80840192508235915067ffffffffffffffff8211156113ce576113cd61135d565b5b6020830192506001820236038313156113ea576113e9611362565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061141883856113f2565b93506114258385846113fd565b82840190509392505050565b600061143e82848661140c565b91508190509392505050565b600082825260208201905092915050565b7f4d756c746963616c6c333a2076616c7565206d69736d61746368000000000000600082015250565b6000611491601a8361144a565b915061149c8261145b565b602082019050919050565b600060208201905081810360008301526114c081611484565b9050919050565b6000823560016040038336030381126114e3576114e2611358565b5b80830191505092915050565b7f4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000600082015250565b600061152560178361144a565b9150611530826114ef565b602082019050919050565b6000602082019050818103600083015261155481611518565b9050919050565b60008235600160600383360303811261157757611576611358565b5b8083019150509291505056fea264697066735822122020c1bc9aacf8e4a6507193432a895a8e77094f45a1395583f07b24e860ef06cd64736f6c634300080c0033';\n//# sourceMappingURL=contracts.js.map",
    "import { BaseError } from './base.js';\nexport class ChainDoesNotSupportContract extends BaseError {\n    constructor({ blockNumber, chain, contract, }) {\n        super(`Chain \"${chain.name}\" does not support contract \"${contract.name}\".`, {\n            metaMessages: [\n                'This could be due to any of the following:',\n                ...(blockNumber &&\n                    contract.blockCreated &&\n                    contract.blockCreated > blockNumber\n                    ? [\n                        `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`,\n                    ]\n                    : [\n                        `- The chain does not have the contract \"${contract.name}\" configured.`,\n                    ]),\n            ],\n            name: 'ChainDoesNotSupportContract',\n        });\n    }\n}\nexport class ChainMismatchError extends BaseError {\n    constructor({ chain, currentChainId, }) {\n        super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`, {\n            metaMessages: [\n                `Current Chain ID:  ${currentChainId}`,\n                `Expected Chain ID: ${chain.id} – ${chain.name}`,\n            ],\n            name: 'ChainMismatchError',\n        });\n    }\n}\nexport class ChainNotFoundError extends BaseError {\n    constructor() {\n        super([\n            'No chain was provided to the request.',\n            'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.',\n        ].join('\\n'), {\n            name: 'ChainNotFoundError',\n        });\n    }\n}\nexport class ClientChainNotConfiguredError extends BaseError {\n    constructor() {\n        super('No chain was provided to the Client.', {\n            name: 'ClientChainNotConfiguredError',\n        });\n    }\n}\nexport class InvalidChainIdError extends BaseError {\n    constructor({ chainId }) {\n        super(typeof chainId === 'number'\n            ? `Chain ID \"${chainId}\" is invalid.`\n            : 'Chain ID is invalid.', { name: 'InvalidChainIdError' });\n    }\n}\n//# sourceMappingURL=chain.js.map",
    "import { AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError, } from '../../errors/abi.js';\nimport { concatHex } from '../data/concat.js';\nimport { encodeAbiParameters, } from './encodeAbiParameters.js';\nconst docsPath = '/docs/contract/encodeDeployData';\nexport function encodeDeployData(parameters) {\n    const { abi, args, bytecode } = parameters;\n    if (!args || args.length === 0)\n        return bytecode;\n    const description = abi.find((x) => 'type' in x && x.type === 'constructor');\n    if (!description)\n        throw new AbiConstructorNotFoundError({ docsPath });\n    if (!('inputs' in description))\n        throw new AbiConstructorParamsNotFoundError({ docsPath });\n    if (!description.inputs || description.inputs.length === 0)\n        throw new AbiConstructorParamsNotFoundError({ docsPath });\n    const data = encodeAbiParameters(description.inputs, args);\n    return concatHex([bytecode, data]);\n}\n//# sourceMappingURL=encodeDeployData.js.map",
    "import { ChainDoesNotSupportContract, } from '../../errors/chain.js';\nexport function getChainContractAddress({ blockNumber, chain, contract: name, }) {\n    const contract = chain?.contracts?.[name];\n    if (!contract)\n        throw new ChainDoesNotSupportContract({\n            chain,\n            contract: { name },\n        });\n    if (blockNumber &&\n        contract.blockCreated &&\n        contract.blockCreated > blockNumber)\n        throw new ChainDoesNotSupportContract({\n            blockNumber,\n            chain,\n            contract: {\n                name,\n                blockCreated: contract.blockCreated,\n            },\n        });\n    return contract.address;\n}\n//# sourceMappingURL=getChainContractAddress.js.map",
    "import { CallExecutionError, } from '../../errors/contract.js';\nimport { UnknownNodeError } from '../../errors/node.js';\nimport { getNodeError, } from './getNodeError.js';\nexport function getCallError(err, { docsPath, ...args }) {\n    const cause = (() => {\n        const cause = getNodeError(err, args);\n        if (cause instanceof UnknownNodeError)\n            return err;\n        return cause;\n    })();\n    return new CallExecutionError(cause, {\n        docsPath,\n        ...args,\n    });\n}\n//# sourceMappingURL=getCallError.js.map",
    "/** @internal */\nexport function withResolvers() {\n    let resolve = () => undefined;\n    let reject = () => undefined;\n    const promise = new Promise((resolve_, reject_) => {\n        resolve = resolve_;\n        reject = reject_;\n    });\n    return { promise, resolve, reject };\n}\n//# sourceMappingURL=withResolvers.js.map",
    "import { withResolvers } from './withResolvers.js';\nconst schedulerCache = /*#__PURE__*/ new Map();\n/** @internal */\nexport function createBatchScheduler({ fn, id, shouldSplitBatch, wait = 0, sort, }) {\n    const exec = async () => {\n        const scheduler = getScheduler();\n        flush();\n        const args = scheduler.map(({ args }) => args);\n        if (args.length === 0)\n            return;\n        fn(args)\n            .then((data) => {\n            if (sort && Array.isArray(data))\n                data.sort(sort);\n            for (let i = 0; i < scheduler.length; i++) {\n                const { resolve } = scheduler[i];\n                resolve?.([data[i], data]);\n            }\n        })\n            .catch((err) => {\n            for (let i = 0; i < scheduler.length; i++) {\n                const { reject } = scheduler[i];\n                reject?.(err);\n            }\n        });\n    };\n    const flush = () => schedulerCache.delete(id);\n    const getBatchedArgs = () => getScheduler().map(({ args }) => args);\n    const getScheduler = () => schedulerCache.get(id) || [];\n    const setScheduler = (item) => schedulerCache.set(id, [...getScheduler(), item]);\n    return {\n        flush,\n        async schedule(args) {\n            const { promise, resolve, reject } = withResolvers();\n            const split = shouldSplitBatch?.([...getBatchedArgs(), args]);\n            if (split)\n                exec();\n            const hasActiveScheduler = getScheduler().length > 0;\n            if (hasActiveScheduler) {\n                setScheduler({ args, resolve, reject });\n                return promise;\n            }\n            setScheduler({ args, resolve, reject });\n            setTimeout(exec, wait);\n            return promise;\n        },\n    };\n}\n//# sourceMappingURL=createBatchScheduler.js.map",
    "import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class OffchainLookupError extends BaseError {\n    constructor({ callbackSelector, cause, data, extraData, sender, urls, }) {\n        super(cause.shortMessage ||\n            'An error occurred while fetching for an offchain result.', {\n            cause,\n            metaMessages: [\n                ...(cause.metaMessages || []),\n                cause.metaMessages?.length ? '' : [],\n                'Offchain Gateway Call:',\n                urls && [\n                    '  Gateway URL(s):',\n                    ...urls.map((url) => `    ${getUrl(url)}`),\n                ],\n                `  Sender: ${sender}`,\n                `  Data: ${data}`,\n                `  Callback selector: ${callbackSelector}`,\n                `  Extra data: ${extraData}`,\n            ].flat(),\n            name: 'OffchainLookupError',\n        });\n    }\n}\nexport class OffchainLookupResponseMalformedError extends BaseError {\n    constructor({ result, url }) {\n        super('Offchain gateway response is malformed. Response data must be a hex value.', {\n            metaMessages: [\n                `Gateway URL: ${getUrl(url)}`,\n                `Response: ${stringify(result)}`,\n            ],\n            name: 'OffchainLookupResponseMalformedError',\n        });\n    }\n}\nexport class OffchainLookupSenderMismatchError extends BaseError {\n    constructor({ sender, to }) {\n        super('Reverted sender address does not match target contract address (`to`).', {\n            metaMessages: [\n                `Contract address: ${to}`,\n                `OffchainLookup sender address: ${sender}`,\n            ],\n            name: 'OffchainLookupSenderMismatchError',\n        });\n    }\n}\n//# sourceMappingURL=ccip.js.map",
    "import { AbiFunctionSignatureNotFoundError } from '../../errors/abi.js';\nimport { slice } from '../data/slice.js';\nimport { toFunctionSelector, } from '../hash/toFunctionSelector.js';\nimport { decodeAbiParameters, } from './decodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nexport function decodeFunctionData(parameters) {\n    const { abi, data } = parameters;\n    const signature = slice(data, 0, 4);\n    const description = abi.find((x) => x.type === 'function' &&\n        signature === toFunctionSelector(formatAbiItem(x)));\n    if (!description)\n        throw new AbiFunctionSignatureNotFoundError(signature, {\n            docsPath: '/docs/contract/decodeFunctionData',\n        });\n    return {\n        functionName: description.name,\n        args: ('inputs' in description &&\n            description.inputs &&\n            description.inputs.length > 0\n            ? decodeAbiParameters(description.inputs, slice(data, 4))\n            : undefined),\n    };\n}\n//# sourceMappingURL=decodeFunctionData.js.map",
    "import { AbiErrorInputsNotFoundError, AbiErrorNotFoundError, } from '../../errors/abi.js';\nimport { concatHex } from '../data/concat.js';\nimport { toFunctionSelector, } from '../hash/toFunctionSelector.js';\nimport { encodeAbiParameters, } from './encodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeErrorResult';\nexport function encodeErrorResult(parameters) {\n    const { abi, errorName, args } = parameters;\n    let abiItem = abi[0];\n    if (errorName) {\n        const item = getAbiItem({ abi, args, name: errorName });\n        if (!item)\n            throw new AbiErrorNotFoundError(errorName, { docsPath });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'error')\n        throw new AbiErrorNotFoundError(undefined, { docsPath });\n    const definition = formatAbiItem(abiItem);\n    const signature = toFunctionSelector(definition);\n    let data = '0x';\n    if (args && args.length > 0) {\n        if (!abiItem.inputs)\n            throw new AbiErrorInputsNotFoundError(abiItem.name, { docsPath });\n        data = encodeAbiParameters(abiItem.inputs, args);\n    }\n    return concatHex([signature, data]);\n}\n//# sourceMappingURL=encodeErrorResult.js.map",
    "import { AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, InvalidArrayError, } from '../../errors/abi.js';\nimport { encodeAbiParameters, } from './encodeAbiParameters.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/encodeFunctionResult';\nexport function encodeFunctionResult(parameters) {\n    const { abi, functionName, result } = parameters;\n    let abiItem = abi[0];\n    if (functionName) {\n        const item = getAbiItem({ abi, name: functionName });\n        if (!item)\n            throw new AbiFunctionNotFoundError(functionName, { docsPath });\n        abiItem = item;\n    }\n    if (abiItem.type !== 'function')\n        throw new AbiFunctionNotFoundError(undefined, { docsPath });\n    if (!abiItem.outputs)\n        throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath });\n    const values = (() => {\n        if (abiItem.outputs.length === 0)\n            return [];\n        if (abiItem.outputs.length === 1)\n            return [result];\n        if (Array.isArray(result))\n            return result;\n        throw new InvalidArrayError(result);\n    })();\n    return encodeAbiParameters(abiItem.outputs, values);\n}\n//# sourceMappingURL=encodeFunctionResult.js.map",
    "import { batchGatewayAbi } from '../../constants/abis.js';\nimport { solidityError } from '../../constants/solidity.js';\nimport { decodeFunctionData } from '../abi/decodeFunctionData.js';\nimport { encodeErrorResult } from '../abi/encodeErrorResult.js';\nimport { encodeFunctionResult } from '../abi/encodeFunctionResult.js';\nexport const localBatchGatewayUrl = 'x-batch-gateway:true';\nexport async function localBatchGatewayRequest(parameters) {\n    const { data, ccipRequest } = parameters;\n    const { args: [queries], } = decodeFunctionData({ abi: batchGatewayAbi, data });\n    const failures = [];\n    const responses = [];\n    await Promise.all(queries.map(async (query, i) => {\n        try {\n            responses[i] = query.urls.includes(localBatchGatewayUrl)\n                ? await localBatchGatewayRequest({ data: query.data, ccipRequest })\n                : await ccipRequest(query);\n            failures[i] = false;\n        }\n        catch (err) {\n            failures[i] = true;\n            responses[i] = encodeError(err);\n        }\n    }));\n    return encodeFunctionResult({\n        abi: batchGatewayAbi,\n        functionName: 'query',\n        result: [failures, responses],\n    });\n}\nfunction encodeError(error) {\n    if (error.name === 'HttpRequestError' && error.status)\n        return encodeErrorResult({\n            abi: batchGatewayAbi,\n            errorName: 'HttpError',\n            args: [error.status, error.shortMessage],\n        });\n    return encodeErrorResult({\n        abi: [solidityError],\n        errorName: 'Error',\n        args: ['shortMessage' in error ? error.shortMessage : error.message],\n    });\n}\n//# sourceMappingURL=localBatchGatewayRequest.js.map",
    "import { call } from '../actions/public/call.js';\nimport { OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError, } from '../errors/ccip.js';\nimport { HttpRequestError, } from '../errors/request.js';\nimport { decodeErrorResult } from './abi/decodeErrorResult.js';\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js';\nimport { isAddressEqual } from './address/isAddressEqual.js';\nimport { concat } from './data/concat.js';\nimport { isHex } from './data/isHex.js';\nimport { localBatchGatewayRequest, localBatchGatewayUrl, } from './ens/localBatchGatewayRequest.js';\nimport { stringify } from './stringify.js';\nexport const offchainLookupSignature = '0x556f1830';\nexport const offchainLookupAbiItem = {\n    name: 'OffchainLookup',\n    type: 'error',\n    inputs: [\n        {\n            name: 'sender',\n            type: 'address',\n        },\n        {\n            name: 'urls',\n            type: 'string[]',\n        },\n        {\n            name: 'callData',\n            type: 'bytes',\n        },\n        {\n            name: 'callbackFunction',\n            type: 'bytes4',\n        },\n        {\n            name: 'extraData',\n            type: 'bytes',\n        },\n    ],\n};\nexport async function offchainLookup(client, { blockNumber, blockTag, data, to, }) {\n    const { args } = decodeErrorResult({\n        data,\n        abi: [offchainLookupAbiItem],\n    });\n    const [sender, urls, callData, callbackSelector, extraData] = args;\n    const { ccipRead } = client;\n    const ccipRequest_ = ccipRead && typeof ccipRead?.request === 'function'\n        ? ccipRead.request\n        : ccipRequest;\n    try {\n        if (!isAddressEqual(to, sender))\n            throw new OffchainLookupSenderMismatchError({ sender, to });\n        const result = urls.includes(localBatchGatewayUrl)\n            ? await localBatchGatewayRequest({\n                data: callData,\n                ccipRequest: ccipRequest_,\n            })\n            : await ccipRequest_({ data: callData, sender, urls });\n        const { data: data_ } = await call(client, {\n            blockNumber,\n            blockTag,\n            data: concat([\n                callbackSelector,\n                encodeAbiParameters([{ type: 'bytes' }, { type: 'bytes' }], [result, extraData]),\n            ]),\n            to,\n        });\n        return data_;\n    }\n    catch (err) {\n        throw new OffchainLookupError({\n            callbackSelector,\n            cause: err,\n            data,\n            extraData,\n            sender,\n            urls,\n        });\n    }\n}\nexport async function ccipRequest({ data, sender, urls, }) {\n    let error = new Error('An unknown error occurred.');\n    for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        const method = url.includes('{data}') ? 'GET' : 'POST';\n        const body = method === 'POST' ? { data, sender } : undefined;\n        const headers = method === 'POST' ? { 'Content-Type': 'application/json' } : {};\n        try {\n            const response = await fetch(url.replace('{sender}', sender.toLowerCase()).replace('{data}', data), {\n                body: JSON.stringify(body),\n                headers,\n                method,\n            });\n            let result;\n            if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n                result = (await response.json()).data;\n            }\n            else {\n                result = (await response.text());\n            }\n            if (!response.ok) {\n                error = new HttpRequestError({\n                    body,\n                    details: result?.error\n                        ? stringify(result.error)\n                        : response.statusText,\n                    headers: response.headers,\n                    status: response.status,\n                    url,\n                });\n                continue;\n            }\n            if (!isHex(result)) {\n                error = new OffchainLookupResponseMalformedError({\n                    result,\n                    url,\n                });\n                continue;\n            }\n            return result;\n        }\n        catch (err) {\n            error = new HttpRequestError({\n                body,\n                details: err.message,\n                url,\n            });\n        }\n    }\n    throw error;\n}\n//# sourceMappingURL=ccip.js.map",
    "import { parseAbi } from 'abitype';\nimport * as BlockOverrides from 'ox/BlockOverrides';\nimport { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { multicall3Abi } from '../../constants/abis.js';\nimport { aggregate3Signature } from '../../constants/contract.js';\nimport { deploylessCallViaBytecodeBytecode, deploylessCallViaFactoryBytecode, multicall3Bytecode, } from '../../constants/contracts.js';\nimport { BaseError } from '../../errors/base.js';\nimport { ChainDoesNotSupportContract, ClientChainNotConfiguredError, } from '../../errors/chain.js';\nimport { CounterfactualDeploymentFailedError, RawContractError, } from '../../errors/contract.js';\nimport { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeDeployData, } from '../../utils/abi/encodeDeployData.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress, } from '../../utils/chain/getChainContractAddress.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { getCallError, } from '../../utils/errors/getCallError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { createBatchScheduler, } from '../../utils/promise/createBatchScheduler.js';\nimport { serializeStateOverride, } from '../../utils/stateOverride.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\n/**\n * Executes a new message call immediately without submitting a transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/call\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n *\n * @param client - Client to use\n * @param parameters - {@link CallParameters}\n * @returns The call data. {@link CallReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { call } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await call(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function call(client, args) {\n    const { account: account_ = client.account, authorizationList, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = client.experimental_blockTag ?? 'latest', accessList, blobs, blockOverrides, code, data: data_, factory, factoryData, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;\n    const account = account_ ? parseAccount(account_) : undefined;\n    if (code && (factory || factoryData))\n        throw new BaseError('Cannot provide both `code` & `factory`/`factoryData` as parameters.');\n    if (code && to)\n        throw new BaseError('Cannot provide both `code` & `to` as parameters.');\n    // Check if the call is deployless via bytecode.\n    const deploylessCallViaBytecode = code && data_;\n    // Check if the call is deployless via a factory.\n    const deploylessCallViaFactory = factory && factoryData && to && data_;\n    const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory;\n    const data = (() => {\n        if (deploylessCallViaBytecode)\n            return toDeploylessCallViaBytecodeData({\n                code,\n                data: data_,\n            });\n        if (deploylessCallViaFactory)\n            return toDeploylessCallViaFactoryData({\n                data: data_,\n                factory,\n                factoryData,\n                to,\n            });\n        return data_;\n    })();\n    try {\n        assertRequest(args);\n        const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        const rpcBlockOverrides = blockOverrides\n            ? BlockOverrides.toRpc(blockOverrides)\n            : undefined;\n        const rpcStateOverride = serializeStateOverride(stateOverride);\n        const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n        const format = chainFormat || formatTransactionRequest;\n        const request = format({\n            // Pick out extra data that might exist on the chain's transaction request type.\n            ...extract(rest, { format: chainFormat }),\n            accessList,\n            account,\n            authorizationList,\n            blobs,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerBlobGas,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to: deploylessCall ? undefined : to,\n            value,\n        }, 'call');\n        if (batch &&\n            shouldPerformMulticall({ request }) &&\n            !rpcStateOverride &&\n            !rpcBlockOverrides) {\n            try {\n                return await scheduleMulticall(client, {\n                    ...request,\n                    blockNumber,\n                    blockTag,\n                });\n            }\n            catch (err) {\n                if (!(err instanceof ClientChainNotConfiguredError) &&\n                    !(err instanceof ChainDoesNotSupportContract))\n                    throw err;\n            }\n        }\n        const params = (() => {\n            const base = [\n                request,\n                block,\n            ];\n            if (rpcStateOverride && rpcBlockOverrides)\n                return [...base, rpcStateOverride, rpcBlockOverrides];\n            if (rpcStateOverride)\n                return [...base, rpcStateOverride];\n            if (rpcBlockOverrides)\n                return [...base, {}, rpcBlockOverrides];\n            return base;\n        })();\n        const response = await client.request({\n            method: 'eth_call',\n            params,\n        });\n        if (response === '0x')\n            return { data: undefined };\n        return { data: response };\n    }\n    catch (err) {\n        const data = getRevertErrorData(err);\n        // Check for CCIP-Read offchain lookup signature.\n        const { offchainLookup, offchainLookupSignature } = await import('../../utils/ccip.js');\n        if (client.ccipRead !== false &&\n            data?.slice(0, 10) === offchainLookupSignature &&\n            to)\n            return { data: await offchainLookup(client, { data, to }) };\n        // Check for counterfactual deployment error.\n        if (deploylessCall && data?.slice(0, 10) === '0x101bb98d')\n            throw new CounterfactualDeploymentFailedError({ factory });\n        throw getCallError(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\n// We only want to perform a scheduled multicall if:\n// - The request has calldata,\n// - The request has a target address,\n// - The target address is not already the aggregate3 signature,\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\nfunction shouldPerformMulticall({ request }) {\n    const { data, to, ...request_ } = request;\n    if (!data)\n        return false;\n    if (data.startsWith(aggregate3Signature))\n        return false;\n    if (!to)\n        return false;\n    if (Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0)\n        return false;\n    return true;\n}\nasync function scheduleMulticall(client, args) {\n    const { batchSize = 1024, deployless = false, wait = 0, } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};\n    const { blockNumber, blockTag = client.experimental_blockTag ?? 'latest', data, to, } = args;\n    const multicallAddress = (() => {\n        if (deployless)\n            return null;\n        if (args.multicallAddress)\n            return args.multicallAddress;\n        if (client.chain) {\n            return getChainContractAddress({\n                blockNumber,\n                chain: client.chain,\n                contract: 'multicall3',\n            });\n        }\n        throw new ClientChainNotConfiguredError();\n    })();\n    const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const { schedule } = createBatchScheduler({\n        id: `${client.uid}.${block}`,\n        wait,\n        shouldSplitBatch(args) {\n            const size = args.reduce((size, { data }) => size + (data.length - 2), 0);\n            return size > batchSize * 2;\n        },\n        fn: async (requests) => {\n            const calls = requests.map((request) => ({\n                allowFailure: true,\n                callData: request.data,\n                target: request.to,\n            }));\n            const calldata = encodeFunctionData({\n                abi: multicall3Abi,\n                args: [calls],\n                functionName: 'aggregate3',\n            });\n            const data = await client.request({\n                method: 'eth_call',\n                params: [\n                    {\n                        ...(multicallAddress === null\n                            ? {\n                                data: toDeploylessCallViaBytecodeData({\n                                    code: multicall3Bytecode,\n                                    data: calldata,\n                                }),\n                            }\n                            : { to: multicallAddress, data: calldata }),\n                    },\n                    block,\n                ],\n            });\n            return decodeFunctionResult({\n                abi: multicall3Abi,\n                args: [calls],\n                functionName: 'aggregate3',\n                data: data || '0x',\n            });\n        },\n    });\n    const [{ returnData, success }] = await schedule({ data, to });\n    if (!success)\n        throw new RawContractError({ data: returnData });\n    if (returnData === '0x')\n        return { data: undefined };\n    return { data: returnData };\n}\nfunction toDeploylessCallViaBytecodeData(parameters) {\n    const { code, data } = parameters;\n    return encodeDeployData({\n        abi: parseAbi(['constructor(bytes, bytes)']),\n        bytecode: deploylessCallViaBytecodeBytecode,\n        args: [code, data],\n    });\n}\nfunction toDeploylessCallViaFactoryData(parameters) {\n    const { data, factory, factoryData, to } = parameters;\n    return encodeDeployData({\n        abi: parseAbi(['constructor(address, bytes, address, bytes)']),\n        bytecode: deploylessCallViaFactoryBytecode,\n        args: [to, data, factory, factoryData],\n    });\n}\n/** @internal */\nexport function getRevertErrorData(err) {\n    if (!(err instanceof BaseError))\n        return undefined;\n    const error = err.walk();\n    return typeof error?.data === 'object' ? error.data?.data : error.data;\n}\n//# sourceMappingURL=call.js.map",
    "import { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getContractError, } from '../../utils/errors/getContractError.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { call } from './call.js';\n/**\n * Calls a read-only function on a contract, and returns the response.\n *\n * - Docs: https://viem.sh/docs/contract/readContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\n *\n * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link ReadContractParameters}\n * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { readContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await readContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n *   functionName: 'balanceOf',\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // 424122n\n */\nexport async function readContract(client, parameters) {\n    const { abi, address, args, functionName, ...rest } = parameters;\n    const calldata = encodeFunctionData({\n        abi,\n        args,\n        functionName,\n    });\n    try {\n        const { data } = await getAction(client, call, 'call')({\n            ...rest,\n            data: calldata,\n            to: address,\n        });\n        return decodeFunctionResult({\n            abi,\n            args,\n            functionName,\n            data: data || '0x',\n        });\n    }\n    catch (error) {\n        throw getContractError(error, {\n            abi,\n            address,\n            args,\n            docsPath: '/docs/contract/readContract',\n            functionName,\n        });\n    }\n}\n//# sourceMappingURL=readContract.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getContractError, } from '../../utils/errors/getContractError.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { call } from './call.js';\n/**\n * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n *\n * - Docs: https://viem.sh/docs/contract/simulateContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n *\n * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link SimulateContractParameters}\n * @returns The simulation result and write request. {@link SimulateContractReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n *   functionName: 'mint',\n *   args: ['69420'],\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function simulateContract(client, parameters) {\n    const { abi, address, args, dataSuffix, functionName, ...callRequest } = parameters;\n    const account = callRequest.account\n        ? parseAccount(callRequest.account)\n        : client.account;\n    const calldata = encodeFunctionData({ abi, args, functionName });\n    try {\n        const { data } = await getAction(client, call, 'call')({\n            batch: false,\n            data: `${calldata}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n            to: address,\n            ...callRequest,\n            account,\n        });\n        const result = decodeFunctionResult({\n            abi,\n            args,\n            functionName,\n            data: data || '0x',\n        });\n        const minimizedAbi = abi.filter((abiItem) => 'name' in abiItem && abiItem.name === parameters.functionName);\n        return {\n            result,\n            request: {\n                abi: minimizedAbi,\n                address,\n                args,\n                dataSuffix,\n                functionName,\n                ...callRequest,\n                account,\n            },\n        };\n    }\n    catch (error) {\n        throw getContractError(error, {\n            abi,\n            address,\n            args,\n            docsPath: '/docs/contract/simulateContract',\n            functionName,\n            sender: account?.address,\n        });\n    }\n}\n//# sourceMappingURL=simulateContract.js.map",
    "/** @internal */\nexport const listenersCache = /*#__PURE__*/ new Map();\n/** @internal */\nexport const cleanupCache = /*#__PURE__*/ new Map();\nlet callbackCount = 0;\n/**\n * @description Sets up an observer for a given function. If another function\n * is set up under the same observer id, the function will only be called once\n * for both instances of the observer.\n */\nexport function observe(observerId, callbacks, fn) {\n    const callbackId = ++callbackCount;\n    const getListeners = () => listenersCache.get(observerId) || [];\n    const unsubscribe = () => {\n        const listeners = getListeners();\n        listenersCache.set(observerId, listeners.filter((cb) => cb.id !== callbackId));\n    };\n    const unwatch = () => {\n        const listeners = getListeners();\n        if (!listeners.some((cb) => cb.id === callbackId))\n            return;\n        const cleanup = cleanupCache.get(observerId);\n        if (listeners.length === 1 && cleanup) {\n            const p = cleanup();\n            if (p instanceof Promise)\n                p.catch(() => { });\n        }\n        unsubscribe();\n    };\n    const listeners = getListeners();\n    listenersCache.set(observerId, [\n        ...listeners,\n        { id: callbackId, fns: callbacks },\n    ]);\n    if (listeners && listeners.length > 0)\n        return unwatch;\n    const emit = {};\n    for (const key in callbacks) {\n        emit[key] = ((...args) => {\n            const listeners = getListeners();\n            if (listeners.length === 0)\n                return;\n            for (const listener of listeners)\n                listener.fns[key]?.(...args);\n        });\n    }\n    const cleanup = fn(emit);\n    if (typeof cleanup === 'function')\n        cleanupCache.set(observerId, cleanup);\n    return unwatch;\n}\n//# sourceMappingURL=observe.js.map",
    "export async function wait(time) {\n    return new Promise((res) => setTimeout(res, time));\n}\n//# sourceMappingURL=wait.js.map",
    "import { wait } from './wait.js';\n/**\n * @description Polls a function at a specified interval.\n */\nexport function poll(fn, { emitOnBegin, initialWaitTime, interval }) {\n    let active = true;\n    const unwatch = () => (active = false);\n    const watch = async () => {\n        let data;\n        if (emitOnBegin)\n            data = await fn({ unpoll: unwatch });\n        const initialWait = (await initialWaitTime?.(data)) ?? interval;\n        await wait(initialWait);\n        const poll = async () => {\n            if (!active)\n                return;\n            await fn({ unpoll: unwatch });\n            await wait(interval);\n            poll();\n        };\n        poll();\n    };\n    watch();\n    return unwatch;\n}\n//# sourceMappingURL=poll.js.map",
    "/** @internal */\nexport const promiseCache = /*#__PURE__*/ new Map();\n/** @internal */\nexport const responseCache = /*#__PURE__*/ new Map();\nexport function getCache(cacheKey) {\n    const buildCache = (cacheKey, cache) => ({\n        clear: () => cache.delete(cacheKey),\n        get: () => cache.get(cacheKey),\n        set: (data) => cache.set(cacheKey, data),\n    });\n    const promise = buildCache(cacheKey, promiseCache);\n    const response = buildCache(cacheKey, responseCache);\n    return {\n        clear: () => {\n            promise.clear();\n            response.clear();\n        },\n        promise,\n        response,\n    };\n}\n/**\n * @description Returns the result of a given promise, and caches the result for\n * subsequent invocations against a provided cache key.\n */\nexport async function withCache(fn, { cacheKey, cacheTime = Number.POSITIVE_INFINITY }) {\n    const cache = getCache(cacheKey);\n    // If a response exists in the cache, and it's not expired, return it\n    // and do not invoke the promise.\n    // If the max age is 0, the cache is disabled.\n    const response = cache.response.get();\n    if (response && cacheTime > 0) {\n        const age = Date.now() - response.created.getTime();\n        if (age < cacheTime)\n            return response.data;\n    }\n    let promise = cache.promise.get();\n    if (!promise) {\n        promise = fn();\n        // Store the promise in the cache so that subsequent invocations\n        // will wait for the same promise to resolve (deduping).\n        cache.promise.set(promise);\n    }\n    try {\n        const data = await promise;\n        // Store the response in the cache so that subsequent invocations\n        // will return the same response.\n        cache.response.set({ created: new Date(), data });\n        return data;\n    }\n    finally {\n        // Clear the promise cache so that subsequent invocations will\n        // invoke the promise again.\n        cache.promise.clear();\n    }\n}\n//# sourceMappingURL=withCache.js.map",
    "import { getCache, withCache, } from '../../utils/promise/withCache.js';\nconst cacheKey = (id) => `blockNumber.${id}`;\n/** @internal */\nexport function getBlockNumberCache(id) {\n    return getCache(cacheKey(id));\n}\n/**\n * Returns the number of the most recent block seen.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockNumberParameters}\n * @returns The number of the block. {@link GetBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockNumber } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blockNumber = await getBlockNumber(client)\n * // 69420n\n */\nexport async function getBlockNumber(client, { cacheTime = client.cacheTime } = {}) {\n    const blockNumberHex = await withCache(() => client.request({\n        method: 'eth_blockNumber',\n    }), { cacheKey: cacheKey(client.uid), cacheTime });\n    return BigInt(blockNumberHex);\n}\n//# sourceMappingURL=getBlockNumber.js.map",
    "import { parseEventLogs } from '../../utils/abi/parseEventLogs.js';\nimport { formatLog, } from '../../utils/formatters/log.js';\n/**\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n *\n * A Filter can be created from the following actions:\n *\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n *\n * Depending on the type of filter, the return value will be different:\n *\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterChangesParameters}\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n *\n * @example\n * // Blocks\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n *\n * @example\n * // Contract Events\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n *   eventName: 'Transfer',\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Raw Events\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Transactions\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n */\nexport async function getFilterChanges(_client, { filter, }) {\n    const strict = 'strict' in filter && filter.strict;\n    const logs = await filter.request({\n        method: 'eth_getFilterChanges',\n        params: [filter.id],\n    });\n    if (typeof logs[0] === 'string')\n        return logs;\n    const formattedLogs = logs.map((log) => formatLog(log));\n    if (!('abi' in filter) || !filter.abi)\n        return formattedLogs;\n    return parseEventLogs({\n        abi: filter.abi,\n        logs: formattedLogs,\n        strict,\n    });\n}\n//# sourceMappingURL=getFilterChanges.js.map",
    "/**\n * Destroys a [`Filter`](https://viem.sh/docs/glossary/types#filter).\n *\n * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\n * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n *\n * Destroys a Filter that was created from one of the following Actions:\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n *\n * @param client - Client to use\n * @param parameters - {@link UninstallFilterParameters}\n * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n *\n * const filter = await createPendingTransactionFilter(client)\n * const uninstalled = await uninstallFilter(client, { filter })\n * // true\n */\nexport async function uninstallFilter(_client, { filter }) {\n    return filter.request({\n        method: 'eth_uninstallFilter',\n        params: [filter.id],\n    });\n}\n//# sourceMappingURL=uninstallFilter.js.map",
    "import { DecodeLogDataMismatch, DecodeLogTopicsMismatch, } from '../../errors/abi.js';\nimport { InvalidInputRpcError } from '../../errors/rpc.js';\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js';\nimport { encodeEventTopics, } from '../../utils/abi/encodeEventTopics.js';\nimport { formatLog } from '../../utils/formatters/log.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { createContractEventFilter } from './createContractEventFilter.js';\nimport { getBlockNumber } from './getBlockNumber.js';\nimport { getContractEvents, } from './getContractEvents.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent(client, parameters) {\n    const { abi, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_, } = parameters;\n    const enablePolling = (() => {\n        if (typeof poll_ !== 'undefined')\n            return poll_;\n        if (typeof fromBlock === 'bigint')\n            return true;\n        if (client.transport.type === 'webSocket' ||\n            client.transport.type === 'ipc')\n            return false;\n        if (client.transport.type === 'fallback' &&\n            (client.transport.transports[0].config.type === 'webSocket' ||\n                client.transport.transports[0].config.type === 'ipc'))\n            return false;\n        return true;\n    })();\n    const pollContractEvent = () => {\n        const strict = strict_ ?? false;\n        const observerId = stringify([\n            'watchContractEvent',\n            address,\n            args,\n            batch,\n            client.uid,\n            eventName,\n            pollingInterval,\n            strict,\n            fromBlock,\n        ]);\n        return observe(observerId, { onLogs, onError }, (emit) => {\n            let previousBlockNumber;\n            if (fromBlock !== undefined)\n                previousBlockNumber = fromBlock - 1n;\n            let filter;\n            let initialized = false;\n            const unwatch = poll(async () => {\n                if (!initialized) {\n                    try {\n                        filter = (await getAction(client, createContractEventFilter, 'createContractEventFilter')({\n                            abi,\n                            address,\n                            args: args,\n                            eventName: eventName,\n                            strict: strict,\n                            fromBlock,\n                        }));\n                    }\n                    catch { }\n                    initialized = true;\n                    return;\n                }\n                try {\n                    let logs;\n                    if (filter) {\n                        logs = await getAction(client, getFilterChanges, 'getFilterChanges')({ filter });\n                    }\n                    else {\n                        // If the filter doesn't exist, we will fall back to use `getLogs`.\n                        // The fall back exists because some RPC Providers do not support filters.\n                        // Fetch the block number to use for `getLogs`.\n                        const blockNumber = await getAction(client, getBlockNumber, 'getBlockNumber')({});\n                        // If the block number has changed, we will need to fetch the logs.\n                        // If the block number doesn't exist, we are yet to reach the first poll interval,\n                        // so do not emit any logs.\n                        if (previousBlockNumber && previousBlockNumber < blockNumber) {\n                            logs = await getAction(client, getContractEvents, 'getContractEvents')({\n                                abi,\n                                address,\n                                args,\n                                eventName,\n                                fromBlock: previousBlockNumber + 1n,\n                                toBlock: blockNumber,\n                                strict,\n                            });\n                        }\n                        else {\n                            logs = [];\n                        }\n                        previousBlockNumber = blockNumber;\n                    }\n                    if (logs.length === 0)\n                        return;\n                    if (batch)\n                        emit.onLogs(logs);\n                    else\n                        for (const log of logs)\n                            emit.onLogs([log]);\n                }\n                catch (err) {\n                    // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n                    // Reinitialize the filter when this occurs\n                    if (filter && err instanceof InvalidInputRpcError)\n                        initialized = false;\n                    emit.onError?.(err);\n                }\n            }, {\n                emitOnBegin: true,\n                interval: pollingInterval,\n            });\n            return async () => {\n                if (filter)\n                    await getAction(client, uninstallFilter, 'uninstallFilter')({ filter });\n                unwatch();\n            };\n        });\n    };\n    const subscribeContractEvent = () => {\n        const strict = strict_ ?? false;\n        const observerId = stringify([\n            'watchContractEvent',\n            address,\n            args,\n            batch,\n            client.uid,\n            eventName,\n            pollingInterval,\n            strict,\n        ]);\n        let active = true;\n        let unsubscribe = () => (active = false);\n        return observe(observerId, { onLogs, onError }, (emit) => {\n            ;\n            (async () => {\n                try {\n                    const transport = (() => {\n                        if (client.transport.type === 'fallback') {\n                            const transport = client.transport.transports.find((transport) => transport.config.type === 'webSocket' ||\n                                transport.config.type === 'ipc');\n                            if (!transport)\n                                return client.transport;\n                            return transport.value;\n                        }\n                        return client.transport;\n                    })();\n                    const topics = eventName\n                        ? encodeEventTopics({\n                            abi: abi,\n                            eventName: eventName,\n                            args,\n                        })\n                        : [];\n                    const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n                        params: ['logs', { address, topics }],\n                        onData(data) {\n                            if (!active)\n                                return;\n                            const log = data.result;\n                            try {\n                                const { eventName, args } = decodeEventLog({\n                                    abi: abi,\n                                    data: log.data,\n                                    topics: log.topics,\n                                    strict: strict_,\n                                });\n                                const formatted = formatLog(log, {\n                                    args,\n                                    eventName: eventName,\n                                });\n                                emit.onLogs([formatted]);\n                            }\n                            catch (err) {\n                                let eventName;\n                                let isUnnamed;\n                                if (err instanceof DecodeLogDataMismatch ||\n                                    err instanceof DecodeLogTopicsMismatch) {\n                                    // If strict mode is on, and log data/topics do not match event definition, skip.\n                                    if (strict_)\n                                        return;\n                                    eventName = err.abiItem.name;\n                                    isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name));\n                                }\n                                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                                const formatted = formatLog(log, {\n                                    args: isUnnamed ? [] : {},\n                                    eventName,\n                                });\n                                emit.onLogs([formatted]);\n                            }\n                        },\n                        onError(error) {\n                            emit.onError?.(error);\n                        },\n                    });\n                    unsubscribe = unsubscribe_;\n                    if (!active)\n                        unsubscribe();\n                }\n                catch (err) {\n                    onError?.(err);\n                }\n            })();\n            return () => unsubscribe();\n        });\n    };\n    return enablePolling ? pollContractEvent() : subscribeContractEvent();\n}\n//# sourceMappingURL=watchContractEvent.js.map",
    "import { BaseError } from './base.js';\nexport class AccountNotFoundError extends BaseError {\n    constructor({ docsPath } = {}) {\n        super([\n            'Could not find an Account to execute with this Action.',\n            'Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client.',\n        ].join('\\n'), {\n            docsPath,\n            docsSlug: 'account',\n            name: 'AccountNotFoundError',\n        });\n    }\n}\nexport class AccountTypeNotSupportedError extends BaseError {\n    constructor({ docsPath, metaMessages, type, }) {\n        super(`Account type \"${type}\" is not supported.`, {\n            docsPath,\n            metaMessages,\n            name: 'AccountTypeNotSupportedError',\n        });\n    }\n}\n//# sourceMappingURL=account.js.map",
    "import { ChainMismatchError, ChainNotFoundError, } from '../../errors/chain.js';\nexport function assertCurrentChain({ chain, currentChainId, }) {\n    if (!chain)\n        throw new ChainNotFoundError();\n    if (currentChainId !== chain.id)\n        throw new ChainMismatchError({ chain, currentChainId });\n}\n//# sourceMappingURL=assertCurrentChain.js.map",
    "import { UnknownNodeError } from '../../errors/node.js';\nimport { TransactionExecutionError, } from '../../errors/transaction.js';\nimport { getNodeError, } from './getNodeError.js';\nexport function getTransactionError(err, { docsPath, ...args }) {\n    const cause = (() => {\n        const cause = getNodeError(err, args);\n        if (cause instanceof UnknownNodeError)\n            return err;\n        return cause;\n    })();\n    return new TransactionExecutionError(cause, {\n        docsPath,\n        ...args,\n    });\n}\n//# sourceMappingURL=getTransactionError.js.map",
    "/**\n * Sends a **signed** transaction to the network\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionParameters}\n * @returns The transaction hash. {@link SendRawTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendRawTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const hash = await sendRawTransaction(client, {\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n * })\n */\nexport async function sendRawTransaction(client, { serializedTransaction }) {\n    return client.request({\n        method: 'eth_sendRawTransaction',\n        params: [serializedTransaction],\n    }, { retryCount: 0 });\n}\n//# sourceMappingURL=sendRawTransaction.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, AccountTypeNotSupportedError, } from '../../errors/account.js';\nimport { BaseError } from '../../errors/base.js';\nimport { recoverAuthorizationAddress, } from '../../utils/authorization/recoverAuthorizationAddress.js';\nimport { assertCurrentChain, } from '../../utils/chain/assertCurrentChain.js';\nimport { getTransactionError, } from '../../utils/errors/getTransactionError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { LruMap } from '../../utils/lru.js';\nimport { assertRequest, } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { defaultParameters, prepareTransactionRequest, } from './prepareTransactionRequest.js';\nimport { sendRawTransaction, } from './sendRawTransaction.js';\nconst supportsWalletNamespace = new LruMap(128);\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction(client, parameters) {\n    const { account: account_ = client.account, chain = client.chain, accessList, authorizationList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, type, value, ...rest } = parameters;\n    if (typeof account_ === 'undefined')\n        throw new AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/sendTransaction',\n        });\n    const account = account_ ? parseAccount(account_) : null;\n    try {\n        assertRequest(parameters);\n        const to = await (async () => {\n            // If `to` exists on the parameters, use that.\n            if (parameters.to)\n                return parameters.to;\n            // If `to` is null, we are sending a deployment transaction.\n            if (parameters.to === null)\n                return undefined;\n            // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n            // address of the first authorization in the list.\n            if (authorizationList && authorizationList.length > 0)\n                return await recoverAuthorizationAddress({\n                    authorization: authorizationList[0],\n                }).catch(() => {\n                    throw new BaseError('`to` is required. Could not infer from `authorizationList`.');\n                });\n            // Otherwise, we are sending a deployment transaction.\n            return undefined;\n        })();\n        if (account?.type === 'json-rpc' || account === null) {\n            let chainId;\n            if (chain !== null) {\n                chainId = await getAction(client, getChainId, 'getChainId')({});\n                assertCurrentChain({\n                    currentChainId: chainId,\n                    chain,\n                });\n            }\n            const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n            const format = chainFormat || formatTransactionRequest;\n            const request = format({\n                // Pick out extra data that might exist on the chain's transaction request type.\n                ...extract(rest, { format: chainFormat }),\n                accessList,\n                account,\n                authorizationList,\n                blobs,\n                chainId,\n                data,\n                gas,\n                gasPrice,\n                maxFeePerBlobGas,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                nonce,\n                to,\n                type,\n                value,\n            }, 'sendTransaction');\n            const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid);\n            const method = isWalletNamespaceSupported\n                ? 'wallet_sendTransaction'\n                : 'eth_sendTransaction';\n            try {\n                return await client.request({\n                    method,\n                    params: [request],\n                }, { retryCount: 0 });\n            }\n            catch (e) {\n                if (isWalletNamespaceSupported === false)\n                    throw e;\n                const error = e;\n                // If the transport does not support the method or input, attempt to use the\n                // `wallet_sendTransaction` method.\n                if (error.name === 'InvalidInputRpcError' ||\n                    error.name === 'InvalidParamsRpcError' ||\n                    error.name === 'MethodNotFoundRpcError' ||\n                    error.name === 'MethodNotSupportedRpcError') {\n                    return await client\n                        .request({\n                        method: 'wallet_sendTransaction',\n                        params: [request],\n                    }, { retryCount: 0 })\n                        .then((hash) => {\n                        supportsWalletNamespace.set(client.uid, true);\n                        return hash;\n                    })\n                        .catch((e) => {\n                        const walletNamespaceError = e;\n                        if (walletNamespaceError.name === 'MethodNotFoundRpcError' ||\n                            walletNamespaceError.name === 'MethodNotSupportedRpcError') {\n                            supportsWalletNamespace.set(client.uid, false);\n                            throw error;\n                        }\n                        throw walletNamespaceError;\n                    });\n                }\n                throw error;\n            }\n        }\n        if (account?.type === 'local') {\n            // Prepare the request for signing (assign appropriate fees, etc.)\n            const request = await getAction(client, prepareTransactionRequest, 'prepareTransactionRequest')({\n                account,\n                accessList,\n                authorizationList,\n                blobs,\n                chain,\n                data,\n                gas,\n                gasPrice,\n                maxFeePerBlobGas,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                nonce,\n                nonceManager: account.nonceManager,\n                parameters: [...defaultParameters, 'sidecars'],\n                type,\n                value,\n                ...rest,\n                to,\n            });\n            const serializer = chain?.serializers?.transaction;\n            const serializedTransaction = (await account.signTransaction(request, {\n                serializer,\n            }));\n            return await getAction(client, sendRawTransaction, 'sendRawTransaction')({\n                serializedTransaction,\n            });\n        }\n        if (account?.type === 'smart')\n            throw new AccountTypeNotSupportedError({\n                metaMessages: [\n                    'Consider using the `sendUserOperation` Action instead.',\n                ],\n                docsPath: '/docs/actions/bundler/sendUserOperation',\n                type: 'smart',\n            });\n        throw new AccountTypeNotSupportedError({\n            docsPath: '/docs/actions/wallet/sendTransaction',\n            type: account?.type,\n        });\n    }\n    catch (err) {\n        if (err instanceof AccountTypeNotSupportedError)\n            throw err;\n        throw getTransactionError(err, {\n            ...parameters,\n            account,\n            chain: parameters.chain || undefined,\n        });\n    }\n}\n//# sourceMappingURL=sendTransaction.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, } from '../../errors/account.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getContractError, } from '../../utils/errors/getContractError.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { sendTransaction, } from './sendTransaction.js';\n/**\n * Executes a write function on a contract.\n *\n * - Docs: https://viem.sh/docs/contract/writeContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await writeContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n *\n * @example\n * // With Validation\n * import { createWalletClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract, writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const { request } = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * }\n * const hash = await writeContract(client, request)\n */\nexport async function writeContract(client, parameters) {\n    return writeContract.internal(client, sendTransaction, 'sendTransaction', parameters);\n}\n(function (writeContract) {\n    async function internal(client, actionFn, name, parameters) {\n        const { abi, account: account_ = client.account, address, args, dataSuffix, functionName, ...request } = parameters;\n        if (typeof account_ === 'undefined')\n            throw new AccountNotFoundError({\n                docsPath: '/docs/contract/writeContract',\n            });\n        const account = account_ ? parseAccount(account_) : null;\n        const data = encodeFunctionData({\n            abi,\n            args,\n            functionName,\n        });\n        try {\n            return await getAction(client, actionFn, name)({\n                data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n                to: address,\n                account,\n                ...request,\n            });\n        }\n        catch (error) {\n            throw getContractError(error, {\n                abi,\n                address,\n                args,\n                docsPath: '/docs/contract/writeContract',\n                functionName,\n                sender: account?.address,\n            });\n        }\n    }\n    writeContract.internal = internal;\n})(writeContract || (writeContract = {}));\n//# sourceMappingURL=writeContract.js.map",
    "import { BaseError } from './base.js';\nexport class BundleFailedError extends BaseError {\n    constructor(result) {\n        super(`Call bundle failed with status: ${result.statusCode}`, {\n            name: 'BundleFailedError',\n        });\n        Object.defineProperty(this, \"result\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.result = result;\n    }\n}\n//# sourceMappingURL=calls.js.map",
    "import { wait } from '../wait.js';\nexport function withRetry(fn, { delay: delay_ = 100, retryCount = 2, shouldRetry = () => true, } = {}) {\n    return new Promise((resolve, reject) => {\n        const attemptRetry = async ({ count = 0 } = {}) => {\n            const retry = async ({ error }) => {\n                const delay = typeof delay_ === 'function' ? delay_({ count, error }) : delay_;\n                if (delay)\n                    await wait(delay);\n                attemptRetry({ count: count + 1 });\n            };\n            try {\n                const data = await fn();\n                resolve(data);\n            }\n            catch (err) {\n                if (count < retryCount &&\n                    (await shouldRetry({ count, error: err })))\n                    return retry({ error: err });\n                reject(err);\n            }\n        };\n        attemptRetry();\n    });\n}\n//# sourceMappingURL=withRetry.js.map",
    "import { hexToNumber } from '../encoding/fromHex.js';\nimport { defineFormatter } from './formatter.js';\nimport { formatLog } from './log.js';\nimport { transactionType } from './transaction.js';\nexport const receiptStatuses = {\n    '0x0': 'reverted',\n    '0x1': 'success',\n};\nexport function formatTransactionReceipt(transactionReceipt, _) {\n    const receipt = {\n        ...transactionReceipt,\n        blockNumber: transactionReceipt.blockNumber\n            ? BigInt(transactionReceipt.blockNumber)\n            : null,\n        contractAddress: transactionReceipt.contractAddress\n            ? transactionReceipt.contractAddress\n            : null,\n        cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\n            ? BigInt(transactionReceipt.cumulativeGasUsed)\n            : null,\n        effectiveGasPrice: transactionReceipt.effectiveGasPrice\n            ? BigInt(transactionReceipt.effectiveGasPrice)\n            : null,\n        gasUsed: transactionReceipt.gasUsed\n            ? BigInt(transactionReceipt.gasUsed)\n            : null,\n        logs: transactionReceipt.logs\n            ? transactionReceipt.logs.map((log) => formatLog(log))\n            : null,\n        to: transactionReceipt.to ? transactionReceipt.to : null,\n        transactionIndex: transactionReceipt.transactionIndex\n            ? hexToNumber(transactionReceipt.transactionIndex)\n            : null,\n        status: transactionReceipt.status\n            ? receiptStatuses[transactionReceipt.status]\n            : null,\n        type: transactionReceipt.type\n            ? transactionType[transactionReceipt.type] || transactionReceipt.type\n            : null,\n    };\n    if (transactionReceipt.blobGasPrice)\n        receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);\n    if (transactionReceipt.blobGasUsed)\n        receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);\n    return receipt;\n}\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter('transactionReceipt', formatTransactionReceipt);\n//# sourceMappingURL=transactionReceipt.js.map",
    "import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { BaseError } from '../../errors/base.js';\nimport { AtomicityNotSupportedError, UnsupportedNonOptionalCapabilityError, } from '../../errors/rpc.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { concat } from '../../utils/data/concat.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\nimport { sendTransaction } from './sendTransaction.js';\nexport const fallbackMagicIdentifier = '0x5792579257925792579257925792579257925792579257925792579257925792';\nexport const fallbackTransactionErrorMagicIdentifier = numberToHex(0, {\n    size: 32,\n});\n/**\n * Requests the connected wallet to send a batch of calls.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Transaction identifier. {@link SendCallsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const id = await sendCalls(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCalls(client, parameters) {\n    const { account: account_ = client.account, capabilities, chain = client.chain, experimental_fallback, experimental_fallbackDelay = 32, forceAtomic = false, id, version = '2.0.0', } = parameters;\n    const account = account_ ? parseAccount(account_) : null;\n    const calls = parameters.calls.map((call_) => {\n        const call = call_;\n        const data = call.abi\n            ? encodeFunctionData({\n                abi: call.abi,\n                functionName: call.functionName,\n                args: call.args,\n            })\n            : call.data;\n        return {\n            data: call.dataSuffix && data ? concat([data, call.dataSuffix]) : data,\n            to: call.to,\n            value: call.value ? numberToHex(call.value) : undefined,\n        };\n    });\n    try {\n        const response = await client.request({\n            method: 'wallet_sendCalls',\n            params: [\n                {\n                    atomicRequired: forceAtomic,\n                    calls,\n                    capabilities,\n                    chainId: numberToHex(chain.id),\n                    from: account?.address,\n                    id,\n                    version,\n                },\n            ],\n        }, { retryCount: 0 });\n        if (typeof response === 'string')\n            return { id: response };\n        return response;\n    }\n    catch (err) {\n        const error = err;\n        // If the transport does not support EIP-5792, fall back to\n        // `eth_sendTransaction`.\n        if (experimental_fallback &&\n            (error.name === 'MethodNotFoundRpcError' ||\n                error.name === 'MethodNotSupportedRpcError' ||\n                error.name === 'UnknownRpcError' ||\n                error.details\n                    .toLowerCase()\n                    .includes('does not exist / is not available') ||\n                error.details.toLowerCase().includes('missing or invalid. request()') ||\n                error.details\n                    .toLowerCase()\n                    .includes('did not match any variant of untagged enum') ||\n                error.details\n                    .toLowerCase()\n                    .includes('account upgraded to unsupported contract') ||\n                error.details.toLowerCase().includes('eip-7702 not supported') ||\n                error.details.toLowerCase().includes('unsupported wc_ method') ||\n                // magic.link\n                error.details\n                    .toLowerCase()\n                    .includes('feature toggled misconfigured') ||\n                // Trust Wallet\n                error.details\n                    .toLowerCase()\n                    .includes('jsonrpcengine: response has no error or result for request'))) {\n            if (capabilities) {\n                const hasNonOptionalCapability = Object.values(capabilities).some((capability) => !capability.optional);\n                if (hasNonOptionalCapability) {\n                    const message = 'non-optional `capabilities` are not supported on fallback to `eth_sendTransaction`.';\n                    throw new UnsupportedNonOptionalCapabilityError(new BaseError(message, {\n                        details: message,\n                    }));\n                }\n            }\n            if (forceAtomic && calls.length > 1) {\n                const message = '`forceAtomic` is not supported on fallback to `eth_sendTransaction`.';\n                throw new AtomicityNotSupportedError(new BaseError(message, {\n                    details: message,\n                }));\n            }\n            const promises = [];\n            for (const call of calls) {\n                const promise = sendTransaction(client, {\n                    account,\n                    chain,\n                    data: call.data,\n                    to: call.to,\n                    value: call.value ? hexToBigInt(call.value) : undefined,\n                });\n                promises.push(promise);\n                // Note: some browser wallets require a small delay between transactions\n                // to prevent duplicate JSON-RPC requests.\n                if (experimental_fallbackDelay > 0)\n                    await new Promise((resolve) => setTimeout(resolve, experimental_fallbackDelay));\n            }\n            const results = await Promise.allSettled(promises);\n            if (results.every((r) => r.status === 'rejected'))\n                throw results[0].reason;\n            const hashes = results.map((result) => {\n                if (result.status === 'fulfilled')\n                    return result.value;\n                return fallbackTransactionErrorMagicIdentifier;\n            });\n            return {\n                id: concat([\n                    ...hashes,\n                    numberToHex(chain.id, { size: 32 }),\n                    fallbackMagicIdentifier,\n                ]),\n            };\n        }\n        throw getTransactionError(err, {\n            ...parameters,\n            account,\n            chain: parameters.chain,\n        });\n    }\n}\n//# sourceMappingURL=sendCalls.js.map",
    "import { sliceHex } from '../../utils/data/slice.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js';\nimport { fallbackMagicIdentifier, fallbackTransactionErrorMagicIdentifier, } from './sendCalls.js';\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus(client, parameters) {\n    async function getStatus(id) {\n        const isTransactions = id.endsWith(fallbackMagicIdentifier.slice(2));\n        if (isTransactions) {\n            const chainId = trim(sliceHex(id, -64, -32));\n            const hashes = sliceHex(id, 0, -64)\n                .slice(2)\n                .match(/.{1,64}/g);\n            const receipts = await Promise.all(hashes.map((hash) => fallbackTransactionErrorMagicIdentifier.slice(2) !== hash\n                ? client.request({\n                    method: 'eth_getTransactionReceipt',\n                    params: [`0x${hash}`],\n                }, { dedupe: true })\n                : undefined));\n            const status = (() => {\n                if (receipts.some((r) => r === null))\n                    return 100; // pending\n                if (receipts.every((r) => r?.status === '0x1'))\n                    return 200; // success\n                if (receipts.every((r) => r?.status === '0x0'))\n                    return 500; // complete failure\n                return 600; // partial failure\n            })();\n            return {\n                atomic: false,\n                chainId: hexToNumber(chainId),\n                receipts: receipts.filter(Boolean),\n                status,\n                version: '2.0.0',\n            };\n        }\n        return client.request({\n            method: 'wallet_getCallsStatus',\n            params: [id],\n        });\n    }\n    const { atomic = false, chainId, receipts, version = '2.0.0', ...response } = await getStatus(parameters.id);\n    const [status, statusCode] = (() => {\n        const statusCode = response.status;\n        if (statusCode >= 100 && statusCode < 200)\n            return ['pending', statusCode];\n        if (statusCode >= 200 && statusCode < 300)\n            return ['success', statusCode];\n        if (statusCode >= 300 && statusCode < 700)\n            return ['failure', statusCode];\n        // @ts-expect-error: for backwards compatibility\n        if (statusCode === 'CONFIRMED')\n            return ['success', 200];\n        // @ts-expect-error: for backwards compatibility\n        if (statusCode === 'PENDING')\n            return ['pending', 100];\n        return [undefined, statusCode];\n    })();\n    return {\n        ...response,\n        atomic,\n        // @ts-expect-error: for backwards compatibility\n        chainId: chainId ? hexToNumber(chainId) : undefined,\n        receipts: receipts?.map((receipt) => ({\n            ...receipt,\n            blockNumber: hexToBigInt(receipt.blockNumber),\n            gasUsed: hexToBigInt(receipt.gasUsed),\n            status: receiptStatuses[receipt.status],\n        })) ?? [],\n        statusCode,\n        status,\n        version,\n    };\n}\n//# sourceMappingURL=getCallsStatus.js.map",
    "import { BaseError } from '../../errors/base.js';\nimport { BundleFailedError } from '../../errors/calls.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { withResolvers } from '../../utils/promise/withResolvers.js';\nimport { withRetry, } from '../../utils/promise/withRetry.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { getCallsStatus, } from './getCallsStatus.js';\n/**\n * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/waitForCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForCallsStatusParameters}\n * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { waitForCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function waitForCallsStatus(client, parameters) {\n    const { id, pollingInterval = client.pollingInterval, status = ({ statusCode }) => statusCode === 200 || statusCode >= 300, retryCount = 4, retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff\n    timeout = 60_000, throwOnFailure = false, } = parameters;\n    const observerId = stringify(['waitForCallsStatus', client.uid, id]);\n    const { promise, resolve, reject } = withResolvers();\n    let timer;\n    const unobserve = observe(observerId, { resolve, reject }, (emit) => {\n        const unpoll = poll(async () => {\n            const done = (fn) => {\n                clearTimeout(timer);\n                unpoll();\n                fn();\n                unobserve();\n            };\n            try {\n                const result = await withRetry(async () => {\n                    const result = await getAction(client, getCallsStatus, 'getCallsStatus')({ id });\n                    if (throwOnFailure && result.status === 'failure')\n                        throw new BundleFailedError(result);\n                    return result;\n                }, {\n                    retryCount,\n                    delay: retryDelay,\n                });\n                if (!status(result))\n                    return;\n                done(() => emit.resolve(result));\n            }\n            catch (error) {\n                done(() => emit.reject(error));\n            }\n        }, {\n            interval: pollingInterval,\n            emitOnBegin: true,\n        });\n        return unpoll;\n    });\n    timer = timeout\n        ? setTimeout(() => {\n            unobserve();\n            clearTimeout(timer);\n            reject(new WaitForCallsStatusTimeoutError({ id }));\n        }, timeout)\n        : undefined;\n    return await promise;\n}\nexport class WaitForCallsStatusTimeoutError extends BaseError {\n    constructor({ id }) {\n        super(`Timed out while waiting for call bundle with id \"${id}\" to be confirmed.`, { name: 'WaitForCallsStatusTimeoutError' });\n    }\n}\n//# sourceMappingURL=waitForCallsStatus.js.map",
    "const size = 256;\nlet index = size;\nlet buffer;\nexport function uid(length = 11) {\n    if (!buffer || index + length > size * 2) {\n        buffer = '';\n        index = 0;\n        for (let i = 0; i < size; i++) {\n            buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1);\n        }\n    }\n    return buffer.substring(index, index++ + length);\n}\n//# sourceMappingURL=uid.js.map",
    "import { parseAccount, } from '../accounts/utils/parseAccount.js';\nimport { uid } from '../utils/uid.js';\nexport function createClient(parameters) {\n    const { batch, chain, ccipRead, key = 'base', name = 'Base Client', type = 'base', } = parameters;\n    const experimental_blockTag = parameters.experimental_blockTag ??\n        (typeof chain?.experimental_preconfirmationTime === 'number'\n            ? 'pending'\n            : undefined);\n    const blockTime = chain?.blockTime ?? 12_000;\n    const defaultPollingInterval = Math.min(Math.max(Math.floor(blockTime / 2), 500), 4_000);\n    const pollingInterval = parameters.pollingInterval ?? defaultPollingInterval;\n    const cacheTime = parameters.cacheTime ?? pollingInterval;\n    const account = parameters.account\n        ? parseAccount(parameters.account)\n        : undefined;\n    const { config, request, value } = parameters.transport({\n        chain,\n        pollingInterval,\n    });\n    const transport = { ...config, ...value };\n    const client = {\n        account,\n        batch,\n        cacheTime,\n        ccipRead,\n        chain,\n        key,\n        name,\n        pollingInterval,\n        request,\n        transport,\n        type,\n        uid: uid(),\n        ...(experimental_blockTag ? { experimental_blockTag } : {}),\n    };\n    function extend(base) {\n        return (extendFn) => {\n            const extended = extendFn(base);\n            for (const key in client)\n                delete extended[key];\n            const combined = { ...base, ...extended };\n            return Object.assign(combined, { extend: extend(combined) });\n        };\n    }\n    return Object.assign(client, { extend: extend(client) });\n}\n/**\n * Defines a typed JSON-RPC schema for the client.\n * Note: This is a runtime noop function.\n */\nexport function rpcSchema() {\n    return null;\n}\n//# sourceMappingURL=createClient.js.map",
    "import { BaseError } from '../../errors/base.js';\nimport { ContractFunctionRevertedError } from '../../errors/contract.js';\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(err) {\n    if (!(err instanceof BaseError))\n        return false;\n    const cause = err.walk((e) => e instanceof ContractFunctionRevertedError);\n    if (!(cause instanceof ContractFunctionRevertedError))\n        return false;\n    if (cause.data?.errorName === 'HttpError')\n        return true;\n    if (cause.data?.errorName === 'ResolverError')\n        return true;\n    if (cause.data?.errorName === 'ResolverNotContract')\n        return true;\n    if (cause.data?.errorName === 'ResolverNotFound')\n        return true;\n    if (cause.data?.errorName === 'ReverseAddressMismatch')\n        return true;\n    if (cause.data?.errorName === 'UnsupportedResolverProfile')\n        return true;\n    return false;\n}\n//# sourceMappingURL=errors.js.map",
    "import { isHex } from '../data/isHex.js';\nexport function encodedLabelToLabelhash(label) {\n    if (label.length !== 66)\n        return null;\n    if (label.indexOf('[') !== 0)\n        return null;\n    if (label.indexOf(']') !== 65)\n        return null;\n    const hash = `0x${label.slice(1, 65)}`;\n    if (!isHex(hash))\n        return null;\n    return hash;\n}\n//# sourceMappingURL=encodedLabelToLabelhash.js.map",
    "import { concat } from '../data/concat.js';\nimport { stringToBytes, toBytes, } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { encodedLabelToLabelhash, } from './encodedLabelToLabelhash.js';\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0x08c85f2f4059e930c45a6aeff9dcd3bd95dc3c5c1cddef6a0626b31152248560'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nexport function namehash(name) {\n    let result = new Uint8Array(32).fill(0);\n    if (!name)\n        return bytesToHex(result);\n    const labels = name.split('.');\n    // Iterate in reverse order building up hash\n    for (let i = labels.length - 1; i >= 0; i -= 1) {\n        const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i]);\n        const hashed = hashFromEncodedLabel\n            ? toBytes(hashFromEncodedLabel)\n            : keccak256(stringToBytes(labels[i]), 'bytes');\n        result = keccak256(concat([result, hashed]), 'bytes');\n    }\n    return bytesToHex(result);\n}\n//# sourceMappingURL=namehash.js.map",
    "export function encodeLabelhash(hash) {\n    return `[${hash.slice(2)}]`;\n}\n//# sourceMappingURL=encodeLabelhash.js.map",
    "import { stringToBytes, } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { encodedLabelToLabelhash, } from './encodedLabelToLabelhash.js';\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nexport function labelhash(label) {\n    const result = new Uint8Array(32).fill(0);\n    if (!label)\n        return bytesToHex(result);\n    return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label));\n}\n//# sourceMappingURL=labelhash.js.map",
    "import { stringToBytes, } from '../encoding/toBytes.js';\nimport { encodeLabelhash, } from './encodeLabelhash.js';\nimport { labelhash } from './labelhash.js';\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n *\n * @example\n * packetToBytes('awkweb.eth')\n * '0x0661776b7765620365746800'\n *\n * @see https://docs.ens.domains/resolution/names#dns\n *\n */\nexport function packetToBytes(packet) {\n    // strip leading and trailing `.`\n    const value = packet.replace(/^\\.|\\.$/gm, '');\n    if (value.length === 0)\n        return new Uint8Array(1);\n    const bytes = new Uint8Array(stringToBytes(value).byteLength + 2);\n    let offset = 0;\n    const list = value.split('.');\n    for (let i = 0; i < list.length; i++) {\n        let encoded = stringToBytes(list[i]);\n        // if the length is > 255, make the encoded label value a labelhash\n        // this is compatible with the universal resolver\n        if (encoded.byteLength > 255)\n            encoded = stringToBytes(encodeLabelhash(labelhash(list[i])));\n        bytes[offset] = encoded.length;\n        bytes.set(encoded, offset + 1);\n        offset += encoded.length + 1;\n    }\n    if (bytes.byteLength !== offset + 1)\n        return bytes.slice(0, offset + 1);\n    return bytes;\n}\n//# sourceMappingURL=packetToBytes.js.map",
    "import { addressResolverAbi, universalResolverResolveAbi, } from '../../constants/abis.js';\nimport { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress, } from '../../utils/chain/getChainContractAddress.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js';\nimport { namehash } from '../../utils/ens/namehash.js';\nimport { packetToBytes, } from '../../utils/ens/packetToBytes.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract, } from '../public/readContract.js';\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress(client, parameters) {\n    const { blockNumber, blockTag, coinType, name, gatewayUrls, strict } = parameters;\n    const { chain } = client;\n    const universalResolverAddress = (() => {\n        if (parameters.universalResolverAddress)\n            return parameters.universalResolverAddress;\n        if (!chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        return getChainContractAddress({\n            blockNumber,\n            chain,\n            contract: 'ensUniversalResolver',\n        });\n    })();\n    const tlds = chain?.ensTlds;\n    if (tlds && !tlds.some((tld) => name.endsWith(tld)))\n        return null;\n    const args = (() => {\n        if (coinType != null)\n            return [namehash(name), BigInt(coinType)];\n        return [namehash(name)];\n    })();\n    try {\n        const functionData = encodeFunctionData({\n            abi: addressResolverAbi,\n            functionName: 'addr',\n            args,\n        });\n        const readContractParameters = {\n            address: universalResolverAddress,\n            abi: universalResolverResolveAbi,\n            functionName: 'resolveWithGateways',\n            args: [\n                toHex(packetToBytes(name)),\n                functionData,\n                gatewayUrls ?? [localBatchGatewayUrl],\n            ],\n            blockNumber,\n            blockTag,\n        };\n        const readContractAction = getAction(client, readContract, 'readContract');\n        const res = await readContractAction(readContractParameters);\n        if (res[0] === '0x')\n            return null;\n        const address = decodeFunctionResult({\n            abi: addressResolverAbi,\n            args,\n            functionName: 'addr',\n            data: res[0],\n        });\n        if (address === '0x')\n            return null;\n        if (trim(address) === '0x00')\n            return null;\n        return address;\n    }\n    catch (err) {\n        if (strict)\n            throw err;\n        if (isNullUniversalResolverError(err))\n            return null;\n        throw err;\n    }\n}\n//# sourceMappingURL=getEnsAddress.js.map",
    "import { BaseError } from './base.js';\nexport class EnsAvatarInvalidMetadataError extends BaseError {\n    constructor({ data }) {\n        super('Unable to extract image from metadata. The metadata may be malformed or invalid.', {\n            metaMessages: [\n                '- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.',\n                '',\n                `Provided data: ${JSON.stringify(data)}`,\n            ],\n            name: 'EnsAvatarInvalidMetadataError',\n        });\n    }\n}\nexport class EnsAvatarInvalidNftUriError extends BaseError {\n    constructor({ reason }) {\n        super(`ENS NFT avatar URI is invalid. ${reason}`, {\n            name: 'EnsAvatarInvalidNftUriError',\n        });\n    }\n}\nexport class EnsAvatarUriResolutionError extends BaseError {\n    constructor({ uri }) {\n        super(`Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`, { name: 'EnsAvatarUriResolutionError' });\n    }\n}\nexport class EnsAvatarUnsupportedNamespaceError extends BaseError {\n    constructor({ namespace }) {\n        super(`ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`, { name: 'EnsAvatarUnsupportedNamespaceError' });\n    }\n}\nexport class EnsInvalidChainIdError extends BaseError {\n    constructor({ chainId }) {\n        super(`Invalid ENSIP-11 chainId: ${chainId}. Must be between 0 and 0x7fffffff, or 1.`, {\n            name: 'EnsInvalidChainIdError',\n        });\n    }\n}\n//# sourceMappingURL=ens.js.map",
    "import { readContract, } from '../../../actions/public/readContract.js';\nimport { EnsAvatarInvalidMetadataError, EnsAvatarInvalidNftUriError, EnsAvatarUnsupportedNamespaceError, EnsAvatarUriResolutionError, } from '../../../errors/ens.js';\nconst networkRegex = /(?<protocol>https?:\\/\\/[^/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/;\nconst ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/;\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/;\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;\n/** @internal */\nexport async function isImageUri(uri) {\n    try {\n        const res = await fetch(uri, { method: 'HEAD' });\n        // retrieve content type header to check if content is image\n        if (res.status === 200) {\n            const contentType = res.headers.get('content-type');\n            return contentType?.startsWith('image/');\n        }\n        return false;\n    }\n    catch (error) {\n        // if error is not cors related then fail\n        if (typeof error === 'object' && typeof error.response !== 'undefined') {\n            return false;\n        }\n        // fail in NodeJS, since the error is not cors but any other network issue\n        if (!Object.hasOwn(globalThis, 'Image'))\n            return false;\n        // in case of cors, use image api to validate if given url is an actual image\n        return new Promise((resolve) => {\n            const img = new Image();\n            img.onload = () => {\n                resolve(true);\n            };\n            img.onerror = () => {\n                resolve(false);\n            };\n            img.src = uri;\n        });\n    }\n}\n/** @internal */\nexport function getGateway(custom, defaultGateway) {\n    if (!custom)\n        return defaultGateway;\n    if (custom.endsWith('/'))\n        return custom.slice(0, -1);\n    return custom;\n}\nexport function resolveAvatarUri({ uri, gatewayUrls, }) {\n    const isEncoded = base64Regex.test(uri);\n    if (isEncoded)\n        return { uri, isOnChain: true, isEncoded };\n    const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io');\n    const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net');\n    const networkRegexMatch = uri.match(networkRegex);\n    const { protocol, subpath, target, subtarget = '', } = networkRegexMatch?.groups || {};\n    const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/';\n    const isIPFS = protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri);\n    if (uri.startsWith('http') && !isIPNS && !isIPFS) {\n        let replacedUri = uri;\n        if (gatewayUrls?.arweave)\n            replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave);\n        return { uri: replacedUri, isOnChain: false, isEncoded: false };\n    }\n    if ((isIPNS || isIPFS) && target) {\n        return {\n            uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\n            isOnChain: false,\n            isEncoded: false,\n        };\n    }\n    if (protocol === 'ar:/' && target) {\n        return {\n            uri: `${arweaveGateway}/${target}${subtarget || ''}`,\n            isOnChain: false,\n            isEncoded: false,\n        };\n    }\n    let parsedUri = uri.replace(dataURIRegex, '');\n    if (parsedUri.startsWith('<svg')) {\n        // if svg, base64 encode\n        parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;\n    }\n    if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\n        return {\n            uri: parsedUri,\n            isOnChain: true,\n            isEncoded: false,\n        };\n    }\n    throw new EnsAvatarUriResolutionError({ uri });\n}\nexport function getJsonImage(data) {\n    // validation check for json data, must include one of theses properties\n    if (typeof data !== 'object' ||\n        (!('image' in data) && !('image_url' in data) && !('image_data' in data))) {\n        throw new EnsAvatarInvalidMetadataError({ data });\n    }\n    return data.image || data.image_url || data.image_data;\n}\nexport async function getMetadataAvatarUri({ gatewayUrls, uri, }) {\n    try {\n        const res = await fetch(uri).then((res) => res.json());\n        const image = await parseAvatarUri({\n            gatewayUrls,\n            uri: getJsonImage(res),\n        });\n        return image;\n    }\n    catch {\n        throw new EnsAvatarUriResolutionError({ uri });\n    }\n}\nexport async function parseAvatarUri({ gatewayUrls, uri, }) {\n    const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls });\n    if (isOnChain)\n        return resolvedURI;\n    // check if resolvedURI is an image, if it is return the url\n    const isImage = await isImageUri(resolvedURI);\n    if (isImage)\n        return resolvedURI;\n    throw new EnsAvatarUriResolutionError({ uri });\n}\nexport function parseNftUri(uri_) {\n    let uri = uri_;\n    // parse valid nft spec (CAIP-22/CAIP-29)\n    // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n    if (uri.startsWith('did:nft:')) {\n        // convert DID to CAIP\n        uri = uri.replace('did:nft:', '').replace(/_/g, '/');\n    }\n    const [reference, asset_namespace, tokenID] = uri.split('/');\n    const [eip_namespace, chainID] = reference.split(':');\n    const [erc_namespace, contractAddress] = asset_namespace.split(':');\n    if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155')\n        throw new EnsAvatarInvalidNftUriError({ reason: 'Only EIP-155 supported' });\n    if (!chainID)\n        throw new EnsAvatarInvalidNftUriError({ reason: 'Chain ID not found' });\n    if (!contractAddress)\n        throw new EnsAvatarInvalidNftUriError({\n            reason: 'Contract address not found',\n        });\n    if (!tokenID)\n        throw new EnsAvatarInvalidNftUriError({ reason: 'Token ID not found' });\n    if (!erc_namespace)\n        throw new EnsAvatarInvalidNftUriError({ reason: 'ERC namespace not found' });\n    return {\n        chainID: Number.parseInt(chainID, 10),\n        namespace: erc_namespace.toLowerCase(),\n        contractAddress: contractAddress,\n        tokenID,\n    };\n}\nexport async function getNftTokenUri(client, { nft }) {\n    if (nft.namespace === 'erc721') {\n        return readContract(client, {\n            address: nft.contractAddress,\n            abi: [\n                {\n                    name: 'tokenURI',\n                    type: 'function',\n                    stateMutability: 'view',\n                    inputs: [{ name: 'tokenId', type: 'uint256' }],\n                    outputs: [{ name: '', type: 'string' }],\n                },\n            ],\n            functionName: 'tokenURI',\n            args: [BigInt(nft.tokenID)],\n        });\n    }\n    if (nft.namespace === 'erc1155') {\n        return readContract(client, {\n            address: nft.contractAddress,\n            abi: [\n                {\n                    name: 'uri',\n                    type: 'function',\n                    stateMutability: 'view',\n                    inputs: [{ name: '_id', type: 'uint256' }],\n                    outputs: [{ name: '', type: 'string' }],\n                },\n            ],\n            functionName: 'uri',\n            args: [BigInt(nft.tokenID)],\n        });\n    }\n    throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace });\n}\n//# sourceMappingURL=utils.js.map",
    "import { getJsonImage, getMetadataAvatarUri, getNftTokenUri, parseAvatarUri, parseNftUri, resolveAvatarUri, } from './utils.js';\n/*\n * @description Parses an ENS avatar record.\n *\n * @example\n * parseAvatarRecord('eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063')\n * 'https://ipfs.io/ipfs/QmSP4nq9fnN9dAiCj42ug9Wa79rqmQerZXZch82VqpiH7U/image.gif'\n *\n * @see https://docs.ens.domains/web/avatars\n *\n */\nexport async function parseAvatarRecord(client, { gatewayUrls, record, }) {\n    if (/eip155:/i.test(record))\n        return parseNftAvatarUri(client, { gatewayUrls, record });\n    return parseAvatarUri({ uri: record, gatewayUrls });\n}\nasync function parseNftAvatarUri(client, { gatewayUrls, record, }) {\n    // parse NFT URI into properties\n    const nft = parseNftUri(record);\n    // fetch tokenURI from the NFT contract\n    const nftUri = await getNftTokenUri(client, { nft });\n    // resolve the URI from the fetched tokenURI\n    const { uri: resolvedNftUri, isOnChain, isEncoded, } = resolveAvatarUri({ uri: nftUri, gatewayUrls });\n    // if the resolved URI is on chain, return the data\n    if (isOnChain &&\n        (resolvedNftUri.includes('data:application/json;base64,') ||\n            resolvedNftUri.startsWith('{'))) {\n        const encodedJson = isEncoded\n            ? // if it is encoded, decode it\n                atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n            : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n                resolvedNftUri;\n        const decoded = JSON.parse(encodedJson);\n        return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls });\n    }\n    let uriTokenId = nft.tokenID;\n    if (nft.namespace === 'erc1155')\n        uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0');\n    return getMetadataAvatarUri({\n        gatewayUrls,\n        uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n    });\n}\n//# sourceMappingURL=parseAvatarRecord.js.map",
    "import { textResolverAbi, universalResolverResolveAbi, } from '../../constants/abis.js';\nimport { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress, } from '../../utils/chain/getChainContractAddress.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js';\nimport { namehash } from '../../utils/ens/namehash.js';\nimport { packetToBytes, } from '../../utils/ens/packetToBytes.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract, } from '../public/readContract.js';\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wevm.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wevm_dev'\n */\nexport async function getEnsText(client, parameters) {\n    const { blockNumber, blockTag, key, name, gatewayUrls, strict } = parameters;\n    const { chain } = client;\n    const universalResolverAddress = (() => {\n        if (parameters.universalResolverAddress)\n            return parameters.universalResolverAddress;\n        if (!chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        return getChainContractAddress({\n            blockNumber,\n            chain,\n            contract: 'ensUniversalResolver',\n        });\n    })();\n    const tlds = chain?.ensTlds;\n    if (tlds && !tlds.some((tld) => name.endsWith(tld)))\n        return null;\n    try {\n        const readContractParameters = {\n            address: universalResolverAddress,\n            abi: universalResolverResolveAbi,\n            args: [\n                toHex(packetToBytes(name)),\n                encodeFunctionData({\n                    abi: textResolverAbi,\n                    functionName: 'text',\n                    args: [namehash(name), key],\n                }),\n                gatewayUrls ?? [localBatchGatewayUrl],\n            ],\n            functionName: 'resolveWithGateways',\n            blockNumber,\n            blockTag,\n        };\n        const readContractAction = getAction(client, readContract, 'readContract');\n        const res = await readContractAction(readContractParameters);\n        if (res[0] === '0x')\n            return null;\n        const record = decodeFunctionResult({\n            abi: textResolverAbi,\n            functionName: 'text',\n            data: res[0],\n        });\n        return record === '' ? null : record;\n    }\n    catch (err) {\n        if (strict)\n            throw err;\n        if (isNullUniversalResolverError(err))\n            return null;\n        throw err;\n    }\n}\n//# sourceMappingURL=getEnsText.js.map",
    "import { parseAvatarRecord, } from '../../utils/ens/avatar/parseAvatarRecord.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getEnsText, } from './getEnsText.js';\n/**\n * Gets the avatar of an ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAvatarParameters}\n * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAvatar, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAvatar = await getEnsAvatar(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n */\nexport async function getEnsAvatar(client, { blockNumber, blockTag, assetGatewayUrls, name, gatewayUrls, strict, universalResolverAddress, }) {\n    const record = await getAction(client, getEnsText, 'getEnsText')({\n        blockNumber,\n        blockTag,\n        key: 'avatar',\n        name,\n        universalResolverAddress,\n        gatewayUrls,\n        strict,\n    });\n    if (!record)\n        return null;\n    try {\n        return await parseAvatarRecord(client, {\n            record,\n            gatewayUrls: assetGatewayUrls,\n        });\n    }\n    catch {\n        return null;\n    }\n}\n//# sourceMappingURL=getEnsAvatar.js.map",
    "import { universalResolverReverseAbi } from '../../constants/abis.js';\nimport { getChainContractAddress, } from '../../utils/chain/getChainContractAddress.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { localBatchGatewayUrl } from '../../utils/ens/localBatchGatewayRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract, } from '../public/readContract.js';\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName(client, parameters) {\n    const { address, blockNumber, blockTag, coinType = 60n, gatewayUrls, strict, } = parameters;\n    const { chain } = client;\n    const universalResolverAddress = (() => {\n        if (parameters.universalResolverAddress)\n            return parameters.universalResolverAddress;\n        if (!chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        return getChainContractAddress({\n            blockNumber,\n            chain,\n            contract: 'ensUniversalResolver',\n        });\n    })();\n    try {\n        const readContractParameters = {\n            address: universalResolverAddress,\n            abi: universalResolverReverseAbi,\n            args: [address, coinType, gatewayUrls ?? [localBatchGatewayUrl]],\n            functionName: 'reverseWithGateways',\n            blockNumber,\n            blockTag,\n        };\n        const readContractAction = getAction(client, readContract, 'readContract');\n        const [name] = await readContractAction(readContractParameters);\n        return name || null;\n    }\n    catch (err) {\n        if (strict)\n            throw err;\n        if (isNullUniversalResolverError(err))\n            return null;\n        throw err;\n    }\n}\n//# sourceMappingURL=getEnsName.js.map",
    "import { getChainContractAddress, } from '../../utils/chain/getChainContractAddress.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { packetToBytes, } from '../../utils/ens/packetToBytes.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract, } from '../public/readContract.js';\n/**\n * Gets resolver for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsResolverParameters}\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsResolver, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const resolverAddress = await getEnsResolver(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n */\nexport async function getEnsResolver(client, parameters) {\n    const { blockNumber, blockTag, name } = parameters;\n    const { chain } = client;\n    const universalResolverAddress = (() => {\n        if (parameters.universalResolverAddress)\n            return parameters.universalResolverAddress;\n        if (!chain)\n            throw new Error('client chain not configured. universalResolverAddress is required.');\n        return getChainContractAddress({\n            blockNumber,\n            chain,\n            contract: 'ensUniversalResolver',\n        });\n    })();\n    const tlds = chain?.ensTlds;\n    if (tlds && !tlds.some((tld) => name.endsWith(tld)))\n        throw new Error(`${name} is not a valid ENS TLD (${tlds?.join(', ')}) for chain \"${chain.name}\" (id: ${chain.id}).`);\n    const [resolverAddress] = await getAction(client, readContract, 'readContract')({\n        address: universalResolverAddress,\n        abi: [\n            {\n                inputs: [{ type: 'bytes' }],\n                name: 'findResolver',\n                outputs: [\n                    { type: 'address' },\n                    { type: 'bytes32' },\n                    { type: 'uint256' },\n                ],\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ],\n        functionName: 'findResolver',\n        args: [toHex(packetToBytes(name))],\n        blockNumber,\n        blockTag,\n    });\n    return resolverAddress;\n}\n//# sourceMappingURL=getEnsResolver.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { getCallError, } from '../../utils/errors/getCallError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\n/**\n * Creates an EIP-2930 access list.\n *\n * - Docs: https://viem.sh/docs/actions/public/createAccessList\n * - JSON-RPC Methods: `eth_createAccessList`\n *\n * @param client - Client to use\n * @param parameters - {@link CreateAccessListParameters}\n * @returns The access list. {@link CreateAccessListReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createAccessList } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await createAccessList(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function createAccessList(client, args) {\n    const { account: account_ = client.account, blockNumber, blockTag = 'latest', blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, to, value, ...rest } = args;\n    const account = account_ ? parseAccount(account_) : undefined;\n    try {\n        assertRequest(args);\n        const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n        const format = chainFormat || formatTransactionRequest;\n        const request = format({\n            // Pick out extra data that might exist on the chain's transaction request type.\n            ...extract(rest, { format: chainFormat }),\n            account,\n            blobs,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerBlobGas,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            to,\n            value,\n        }, 'createAccessList');\n        const response = await client.request({\n            method: 'eth_createAccessList',\n            params: [request, block],\n        });\n        return {\n            accessList: response.accessList,\n            gasUsed: BigInt(response.gasUsed),\n        };\n    }\n    catch (err) {\n        throw getCallError(err, {\n            ...args,\n            account,\n            chain: client.chain,\n        });\n    }\n}\n//# sourceMappingURL=createAccessList.js.map",
    "import { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js';\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\n * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n */\nexport async function createBlockFilter(client) {\n    const getRequest = createFilterRequestScope(client, {\n        method: 'eth_newBlockFilter',\n    });\n    const id = await client.request({\n        method: 'eth_newBlockFilter',\n    });\n    return { id, request: getRequest(id), type: 'block' };\n}\n//# sourceMappingURL=createBlockFilter.js.map",
    "import { encodeEventTopics, } from '../../utils/abi/encodeEventTopics.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js';\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createEventFilter\n * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n *\n * @param client - Client to use\n * @param parameters - {@link CreateEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * })\n */\nexport async function createEventFilter(client, { address, args, event, events: events_, fromBlock, strict, toBlock, } = {}) {\n    const events = events_ ?? (event ? [event] : undefined);\n    const getRequest = createFilterRequestScope(client, {\n        method: 'eth_newFilter',\n    });\n    let topics = [];\n    if (events) {\n        const encoded = events.flatMap((event) => encodeEventTopics({\n            abi: [event],\n            eventName: event.name,\n            args,\n        }));\n        // TODO: Clean up type casting\n        topics = [encoded];\n        if (event)\n            topics = topics[0];\n    }\n    const id = await client.request({\n        method: 'eth_newFilter',\n        params: [\n            {\n                address,\n                fromBlock: typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n                toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n                ...(topics.length ? { topics } : {}),\n            },\n        ],\n    });\n    return {\n        abi: events,\n        args,\n        eventName: event ? event.name : undefined,\n        fromBlock,\n        id,\n        request: getRequest(id),\n        strict: Boolean(strict),\n        toBlock,\n        type: 'event',\n    };\n}\n//# sourceMappingURL=createEventFilter.js.map",
    "import { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js';\n/**\n * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\n * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n */\nexport async function createPendingTransactionFilter(client) {\n    const getRequest = createFilterRequestScope(client, {\n        method: 'eth_newPendingTransactionFilter',\n    });\n    const id = await client.request({\n        method: 'eth_newPendingTransactionFilter',\n    });\n    return { id, request: getRequest(id), type: 'transaction' };\n}\n//# sourceMappingURL=createPendingTransactionFilter.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Returns the balance of an address in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBalance\n * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n *\n * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n *\n * ```ts\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   blockTag: 'safe'\n * })\n * const balanceAsEther = formatEther(balance)\n * // \"6.942\"\n * ```\n *\n * @param client - Client to use\n * @param parameters - {@link GetBalanceParameters}\n * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBalance } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n * // 10000000000000000000000n (wei)\n */\nexport async function getBalance(client, { address, blockNumber, blockTag = client.experimental_blockTag ?? 'latest', }) {\n    const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n    const balance = await client.request({\n        method: 'eth_getBalance',\n        params: [address, blockNumberHex || blockTag],\n    });\n    return BigInt(balance);\n}\n//# sourceMappingURL=getBalance.js.map",
    "/**\n * Returns the base fee per blob gas in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\n * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\n *\n * @param client - Client to use\n * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlobBaseFee } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blobBaseFee = await getBlobBaseFee(client)\n */\nexport async function getBlobBaseFee(client) {\n    const baseFee = await client.request({\n        method: 'eth_blobBaseFee',\n    });\n    return BigInt(baseFee);\n}\n//# sourceMappingURL=getBlobBaseFee.js.map",
    "import { hexToNumber, } from '../../utils/encoding/fromHex.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount(client, { blockHash, blockNumber, blockTag = 'latest', } = {}) {\n    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n    let count;\n    if (blockHash) {\n        count = await client.request({\n            method: 'eth_getBlockTransactionCountByHash',\n            params: [blockHash],\n        }, { dedupe: true });\n    }\n    else {\n        count = await client.request({\n            method: 'eth_getBlockTransactionCountByNumber',\n            params: [blockNumberHex || blockTag],\n        }, { dedupe: Boolean(blockNumberHex) });\n    }\n    return hexToNumber(count);\n}\n//# sourceMappingURL=getBlockTransactionCount.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getCode\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetCodeParameters}\n * @returns The contract's bytecode. {@link GetCodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getCode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getCode(client, { address, blockNumber, blockTag = 'latest' }) {\n    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n    const hex = await client.request({\n        method: 'eth_getCode',\n        params: [address, blockNumberHex || blockTag],\n    }, { dedupe: Boolean(blockNumberHex) });\n    if (hex === '0x')\n        return undefined;\n    return hex;\n}\n//# sourceMappingURL=getCode.js.map",
    "import { BaseError } from './base.js';\nexport class Eip712DomainNotFoundError extends BaseError {\n    constructor({ address }) {\n        super(`No EIP-712 domain found on contract \"${address}\".`, {\n            metaMessages: [\n                'Ensure that:',\n                `- The contract is deployed at the address \"${address}\".`,\n                '- `eip712Domain()` function exists on the contract.',\n                '- `eip712Domain()` function matches signature to ERC-5267 specification.',\n            ],\n            name: 'Eip712DomainNotFoundError',\n        });\n    }\n}\n//# sourceMappingURL=eip712.js.map",
    "import { Eip712DomainNotFoundError, } from '../../errors/eip712.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract, } from './readContract.js';\n/**\n * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\n *\n * @param client - A {@link Client} instance.\n * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\n * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\n *\n * @example\n * ```ts\n * import { createPublicClient, http, getEip712Domain } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const domain = await getEip712Domain(client, {\n *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * })\n * // {\n * //   domain: {\n * //     name: 'ExampleContract',\n * //     version: '1',\n * //     chainId: 1,\n * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n * //   },\n * //   fields: '0x0f',\n * //   extensions: [],\n * // }\n * ```\n */\nexport async function getEip712Domain(client, parameters) {\n    const { address, factory, factoryData } = parameters;\n    try {\n        const [fields, name, version, chainId, verifyingContract, salt, extensions,] = await getAction(client, readContract, 'readContract')({\n            abi,\n            address,\n            functionName: 'eip712Domain',\n            factory,\n            factoryData,\n        });\n        return {\n            domain: {\n                name,\n                version,\n                chainId: Number(chainId),\n                verifyingContract,\n                salt,\n            },\n            extensions,\n            fields,\n        };\n    }\n    catch (e) {\n        const error = e;\n        if (error.name === 'ContractFunctionExecutionError' &&\n            error.cause.name === 'ContractFunctionZeroDataError') {\n            throw new Eip712DomainNotFoundError({ address });\n        }\n        throw error;\n    }\n}\nconst abi = [\n    {\n        inputs: [],\n        name: 'eip712Domain',\n        outputs: [\n            { name: 'fields', type: 'bytes1' },\n            { name: 'name', type: 'string' },\n            { name: 'version', type: 'string' },\n            { name: 'chainId', type: 'uint256' },\n            { name: 'verifyingContract', type: 'address' },\n            { name: 'salt', type: 'bytes32' },\n            { name: 'extensions', type: 'uint256[]' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n];\n//# sourceMappingURL=getEip712Domain.js.map",
    "export function formatFeeHistory(feeHistory) {\n    return {\n        baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),\n        gasUsedRatio: feeHistory.gasUsedRatio,\n        oldestBlock: BigInt(feeHistory.oldestBlock),\n        reward: feeHistory.reward?.map((reward) => reward.map((value) => BigInt(value))),\n    };\n}\n//# sourceMappingURL=feeHistory.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { formatFeeHistory, } from '../../utils/formatters/feeHistory.js';\n/**\n * Returns a collection of historical gas information.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n *\n * @param client - Client to use\n * @param parameters - {@link GetFeeHistoryParameters}\n * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getFeeHistory } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const feeHistory = await getFeeHistory(client, {\n *   blockCount: 4,\n *   rewardPercentiles: [25, 75],\n * })\n */\nexport async function getFeeHistory(client, { blockCount, blockNumber, blockTag = 'latest', rewardPercentiles, }) {\n    const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n    const feeHistory = await client.request({\n        method: 'eth_feeHistory',\n        params: [\n            numberToHex(blockCount),\n            blockNumberHex || blockTag,\n            rewardPercentiles,\n        ],\n    }, { dedupe: Boolean(blockNumberHex) });\n    return formatFeeHistory(feeHistory);\n}\n//# sourceMappingURL=getFeeHistory.js.map",
    "import { parseEventLogs } from '../../utils/abi/parseEventLogs.js';\nimport { formatLog, } from '../../utils/formatters/log.js';\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs(_client, { filter, }) {\n    const strict = filter.strict ?? false;\n    const logs = await filter.request({\n        method: 'eth_getFilterLogs',\n        params: [filter.id],\n    });\n    const formattedLogs = logs.map((log) => formatLog(log));\n    if (!filter.abi)\n        return formattedLogs;\n    return parseEventLogs({\n        abi: filter.abi,\n        logs: formattedLogs,\n        strict,\n    });\n}\n//# sourceMappingURL=getFilterLogs.js.map",
    "import { versionedHashVersionKzg } from '../../constants/kzg.js';\nimport { maxUint256 } from '../../constants/number.js';\nimport { InvalidAddressError, } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { EmptyBlobError, InvalidVersionedHashSizeError, InvalidVersionedHashVersionError, } from '../../errors/blob.js';\nimport { InvalidChainIdError, } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError, } from '../../errors/node.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { hexToNumber } from '../encoding/fromHex.js';\nexport function assertTransactionEIP7702(transaction) {\n    const { authorizationList } = transaction;\n    if (authorizationList) {\n        for (const authorization of authorizationList) {\n            const { chainId } = authorization;\n            const address = authorization.address;\n            if (!isAddress(address))\n                throw new InvalidAddressError({ address });\n            if (chainId < 0)\n                throw new InvalidChainIdError({ chainId });\n        }\n    }\n    assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP4844(transaction) {\n    const { blobVersionedHashes } = transaction;\n    if (blobVersionedHashes) {\n        if (blobVersionedHashes.length === 0)\n            throw new EmptyBlobError();\n        for (const hash of blobVersionedHashes) {\n            const size_ = size(hash);\n            const version = hexToNumber(slice(hash, 0, 1));\n            if (size_ !== 32)\n                throw new InvalidVersionedHashSizeError({ hash, size: size_ });\n            if (version !== versionedHashVersionKzg)\n                throw new InvalidVersionedHashVersionError({\n                    hash,\n                    version,\n                });\n        }\n    }\n    assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP1559(transaction) {\n    const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction;\n    if (chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (maxFeePerGas && maxFeePerGas > maxUint256)\n        throw new FeeCapTooHighError({ maxFeePerGas });\n    if (maxPriorityFeePerGas &&\n        maxFeePerGas &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n}\nexport function assertTransactionEIP2930(transaction) {\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;\n    if (chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (maxPriorityFeePerGas || maxFeePerGas)\n        throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.');\n    if (gasPrice && gasPrice > maxUint256)\n        throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });\n}\nexport function assertTransactionLegacy(transaction) {\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (typeof chainId !== 'undefined' && chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (maxPriorityFeePerGas || maxFeePerGas)\n        throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.');\n    if (gasPrice && gasPrice > maxUint256)\n        throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });\n}\n//# sourceMappingURL=assertTransaction.js.map",
    "import { InvalidAddressError, } from '../../errors/address.js';\nimport { InvalidStorageKeySizeError, } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(accessList) {\n    if (!accessList || accessList.length === 0)\n        return [];\n    const serializedAccessList = [];\n    for (let i = 0; i < accessList.length; i++) {\n        const { address, storageKeys } = accessList[i];\n        for (let j = 0; j < storageKeys.length; j++) {\n            if (storageKeys[j].length - 2 !== 64) {\n                throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] });\n            }\n        }\n        if (!isAddress(address, { strict: false })) {\n            throw new InvalidAddressError({ address });\n        }\n        serializedAccessList.push([address, storageKeys]);\n    }\n    return serializedAccessList;\n}\n//# sourceMappingURL=serializeAccessList.js.map",
    "import { InvalidLegacyVError, } from '../../errors/transaction.js';\nimport { serializeAuthorizationList, } from '../authorization/serializeAuthorizationList.js';\nimport { blobsToCommitments, } from '../blob/blobsToCommitments.js';\nimport { blobsToProofs, } from '../blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes, } from '../blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars, } from '../blob/toBlobSidecars.js';\nimport { concatHex } from '../data/concat.js';\nimport { trim } from '../data/trim.js';\nimport { bytesToHex, numberToHex, } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionEIP4844, assertTransactionEIP7702, assertTransactionLegacy, } from './assertTransaction.js';\nimport { getTransactionType, } from './getTransactionType.js';\nimport { serializeAccessList, } from './serializeAccessList.js';\nexport function serializeTransaction(transaction, signature) {\n    const type = getTransactionType(transaction);\n    if (type === 'eip1559')\n        return serializeTransactionEIP1559(transaction, signature);\n    if (type === 'eip2930')\n        return serializeTransactionEIP2930(transaction, signature);\n    if (type === 'eip4844')\n        return serializeTransactionEIP4844(transaction, signature);\n    if (type === 'eip7702')\n        return serializeTransactionEIP7702(transaction, signature);\n    return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP7702(transaction, signature) {\n    const { authorizationList, chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, } = transaction;\n    assertTransactionEIP7702(transaction);\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedAuthorizationList = serializeAuthorizationList(authorizationList);\n    return concatHex([\n        '0x04',\n        toRlp([\n            numberToHex(chainId),\n            nonce ? numberToHex(nonce) : '0x',\n            maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n            maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n            gas ? numberToHex(gas) : '0x',\n            to ?? '0x',\n            value ? numberToHex(value) : '0x',\n            data ?? '0x',\n            serializedAccessList,\n            serializedAuthorizationList,\n            ...toYParitySignatureArray(transaction, signature),\n        ]),\n    ]);\n}\nfunction serializeTransactionEIP4844(transaction, signature) {\n    const { chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data, } = transaction;\n    assertTransactionEIP4844(transaction);\n    let blobVersionedHashes = transaction.blobVersionedHashes;\n    let sidecars = transaction.sidecars;\n    // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n    if (transaction.blobs &&\n        (typeof blobVersionedHashes === 'undefined' ||\n            typeof sidecars === 'undefined')) {\n        const blobs = (typeof transaction.blobs[0] === 'string'\n            ? transaction.blobs\n            : transaction.blobs.map((x) => bytesToHex(x)));\n        const kzg = transaction.kzg;\n        const commitments = blobsToCommitments({\n            blobs,\n            kzg,\n        });\n        if (typeof blobVersionedHashes === 'undefined')\n            blobVersionedHashes = commitmentsToVersionedHashes({\n                commitments,\n            });\n        if (typeof sidecars === 'undefined') {\n            const proofs = blobsToProofs({ blobs, commitments, kzg });\n            sidecars = toBlobSidecars({ blobs, commitments, proofs });\n        }\n    }\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedTransaction = [\n        numberToHex(chainId),\n        nonce ? numberToHex(nonce) : '0x',\n        maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n        gas ? numberToHex(gas) : '0x',\n        to ?? '0x',\n        value ? numberToHex(value) : '0x',\n        data ?? '0x',\n        serializedAccessList,\n        maxFeePerBlobGas ? numberToHex(maxFeePerBlobGas) : '0x',\n        blobVersionedHashes ?? [],\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    const blobs = [];\n    const commitments = [];\n    const proofs = [];\n    if (sidecars)\n        for (let i = 0; i < sidecars.length; i++) {\n            const { blob, commitment, proof } = sidecars[i];\n            blobs.push(blob);\n            commitments.push(commitment);\n            proofs.push(proof);\n        }\n    return concatHex([\n        '0x03',\n        sidecars\n            ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n                toRlp([serializedTransaction, blobs, commitments, proofs])\n            : // If sidecars are disabled, standard envelope is used:\n                toRlp(serializedTransaction),\n    ]);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, } = transaction;\n    assertTransactionEIP1559(transaction);\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedTransaction = [\n        numberToHex(chainId),\n        nonce ? numberToHex(nonce) : '0x',\n        maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n        gas ? numberToHex(gas) : '0x',\n        to ?? '0x',\n        value ? numberToHex(value) : '0x',\n        data ?? '0x',\n        serializedAccessList,\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    return concatHex([\n        '0x02',\n        toRlp(serializedTransaction),\n    ]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n    const { chainId, gas, data, nonce, to, value, accessList, gasPrice } = transaction;\n    assertTransactionEIP2930(transaction);\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedTransaction = [\n        numberToHex(chainId),\n        nonce ? numberToHex(nonce) : '0x',\n        gasPrice ? numberToHex(gasPrice) : '0x',\n        gas ? numberToHex(gas) : '0x',\n        to ?? '0x',\n        value ? numberToHex(value) : '0x',\n        data ?? '0x',\n        serializedAccessList,\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    return concatHex([\n        '0x01',\n        toRlp(serializedTransaction),\n    ]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n    const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction;\n    assertTransactionLegacy(transaction);\n    let serializedTransaction = [\n        nonce ? numberToHex(nonce) : '0x',\n        gasPrice ? numberToHex(gasPrice) : '0x',\n        gas ? numberToHex(gas) : '0x',\n        to ?? '0x',\n        value ? numberToHex(value) : '0x',\n        data ?? '0x',\n    ];\n    if (signature) {\n        const v = (() => {\n            // EIP-155 (inferred chainId)\n            if (signature.v >= 35n) {\n                const inferredChainId = (signature.v - 35n) / 2n;\n                if (inferredChainId > 0)\n                    return signature.v;\n                return 27n + (signature.v === 35n ? 0n : 1n);\n            }\n            // EIP-155 (explicit chainId)\n            if (chainId > 0)\n                return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\n            // Pre-EIP-155 (no chainId)\n            const v = 27n + (signature.v === 27n ? 0n : 1n);\n            if (signature.v !== v)\n                throw new InvalidLegacyVError({ v: signature.v });\n            return v;\n        })();\n        const r = trim(signature.r);\n        const s = trim(signature.s);\n        serializedTransaction = [\n            ...serializedTransaction,\n            numberToHex(v),\n            r === '0x00' ? '0x' : r,\n            s === '0x00' ? '0x' : s,\n        ];\n    }\n    else if (chainId > 0) {\n        serializedTransaction = [\n            ...serializedTransaction,\n            numberToHex(chainId),\n            '0x',\n            '0x',\n        ];\n    }\n    return toRlp(serializedTransaction);\n}\nexport function toYParitySignatureArray(transaction, signature_) {\n    const signature = signature_ ?? transaction;\n    const { v, yParity } = signature;\n    if (typeof signature.r === 'undefined')\n        return [];\n    if (typeof signature.s === 'undefined')\n        return [];\n    if (typeof v === 'undefined' && typeof yParity === 'undefined')\n        return [];\n    const r = trim(signature.r);\n    const s = trim(signature.s);\n    const yParity_ = (() => {\n        if (typeof yParity === 'number')\n            return yParity ? numberToHex(1) : '0x';\n        if (v === 0n)\n            return '0x';\n        if (v === 1n)\n            return numberToHex(1);\n        return v === 27n ? '0x' : numberToHex(1);\n    })();\n    return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s];\n}\n//# sourceMappingURL=serializeTransaction.js.map",
    "import { toHex } from '../encoding/toHex.js';\nimport { toYParitySignatureArray } from '../transaction/serializeTransaction.js';\n/*\n * Serializes an EIP-7702 authorization list.\n */\nexport function serializeAuthorizationList(authorizationList) {\n    if (!authorizationList || authorizationList.length === 0)\n        return [];\n    const serializedAuthorizationList = [];\n    for (const authorization of authorizationList) {\n        const { chainId, nonce, ...signature } = authorization;\n        const contractAddress = authorization.address;\n        serializedAuthorizationList.push([\n            chainId ? toHex(chainId) : '0x',\n            contractAddress,\n            nonce ? toHex(nonce) : '0x',\n            ...toYParitySignatureArray({}, signature),\n        ]);\n    }\n    return serializedAuthorizationList;\n}\n//# sourceMappingURL=serializeAuthorizationList.js.map",
    "import { getAddress } from '../address/getAddress.js';\nimport { isAddressEqual, } from '../address/isAddressEqual.js';\nimport { recoverAuthorizationAddress, } from './recoverAuthorizationAddress.js';\n/**\n * Verify that an Authorization object was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyAuthorization}\n *\n * @param parameters - {@link VerifyAuthorizationParameters}\n * @returns Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\n */\nexport async function verifyAuthorization({ address, authorization, signature, }) {\n    return isAddressEqual(getAddress(address), await recoverAuthorizationAddress({\n        authorization,\n        signature,\n    }));\n}\n//# sourceMappingURL=verifyAuthorization.js.map",
    "import { LruMap } from '../lru.js';\n/** @internal */\nexport const promiseCache = /*#__PURE__*/ new LruMap(8192);\n/** Deduplicates in-flight promises. */\nexport function withDedupe(fn, { enabled = true, id }) {\n    if (!enabled || !id)\n        return fn();\n    if (promiseCache.get(id))\n        return promiseCache.get(id);\n    const promise = fn().finally(() => promiseCache.delete(id));\n    promiseCache.set(id, promise);\n    return promise;\n}\n//# sourceMappingURL=withDedupe.js.map",
    "import { BaseError } from '../errors/base.js';\nimport { HttpRequestError, } from '../errors/request.js';\nimport { AtomicityNotSupportedError, AtomicReadyWalletRejectedUpgradeError, BundleTooLargeError, ChainDisconnectedError, DuplicateIdError, InternalRpcError, InvalidInputRpcError, InvalidParamsRpcError, InvalidRequestRpcError, JsonRpcVersionUnsupportedError, LimitExceededRpcError, MethodNotFoundRpcError, MethodNotSupportedRpcError, ParseRpcError, ProviderDisconnectedError, ResourceNotFoundRpcError, ResourceUnavailableRpcError, SwitchChainError, TransactionRejectedRpcError, UnauthorizedProviderError, UnknownBundleIdError, UnknownRpcError, UnsupportedChainIdError, UnsupportedNonOptionalCapabilityError, UnsupportedProviderMethodError, UserRejectedRequestError, } from '../errors/rpc.js';\nimport { stringToHex } from './encoding/toHex.js';\nimport { withDedupe } from './promise/withDedupe.js';\nimport { withRetry } from './promise/withRetry.js';\nimport { stringify } from './stringify.js';\nexport function buildRequest(request, options = {}) {\n    return async (args, overrideOptions = {}) => {\n        const { dedupe = false, methods, retryDelay = 150, retryCount = 3, uid, } = {\n            ...options,\n            ...overrideOptions,\n        };\n        const { method } = args;\n        if (methods?.exclude?.includes(method))\n            throw new MethodNotSupportedRpcError(new Error('method not supported'), {\n                method,\n            });\n        if (methods?.include && !methods.include.includes(method))\n            throw new MethodNotSupportedRpcError(new Error('method not supported'), {\n                method,\n            });\n        const requestId = dedupe\n            ? stringToHex(`${uid}.${stringify(args)}`)\n            : undefined;\n        return withDedupe(() => withRetry(async () => {\n            try {\n                return await request(args);\n            }\n            catch (err_) {\n                const err = err_;\n                switch (err.code) {\n                    // -32700\n                    case ParseRpcError.code:\n                        throw new ParseRpcError(err);\n                    // -32600\n                    case InvalidRequestRpcError.code:\n                        throw new InvalidRequestRpcError(err);\n                    // -32601\n                    case MethodNotFoundRpcError.code:\n                        throw new MethodNotFoundRpcError(err, { method: args.method });\n                    // -32602\n                    case InvalidParamsRpcError.code:\n                        throw new InvalidParamsRpcError(err);\n                    // -32603\n                    case InternalRpcError.code:\n                        throw new InternalRpcError(err);\n                    // -32000\n                    case InvalidInputRpcError.code:\n                        throw new InvalidInputRpcError(err);\n                    // -32001\n                    case ResourceNotFoundRpcError.code:\n                        throw new ResourceNotFoundRpcError(err);\n                    // -32002\n                    case ResourceUnavailableRpcError.code:\n                        throw new ResourceUnavailableRpcError(err);\n                    // -32003\n                    case TransactionRejectedRpcError.code:\n                        throw new TransactionRejectedRpcError(err);\n                    // -32004\n                    case MethodNotSupportedRpcError.code:\n                        throw new MethodNotSupportedRpcError(err, {\n                            method: args.method,\n                        });\n                    // -32005\n                    case LimitExceededRpcError.code:\n                        throw new LimitExceededRpcError(err);\n                    // -32006\n                    case JsonRpcVersionUnsupportedError.code:\n                        throw new JsonRpcVersionUnsupportedError(err);\n                    // 4001\n                    case UserRejectedRequestError.code:\n                        throw new UserRejectedRequestError(err);\n                    // 4100\n                    case UnauthorizedProviderError.code:\n                        throw new UnauthorizedProviderError(err);\n                    // 4200\n                    case UnsupportedProviderMethodError.code:\n                        throw new UnsupportedProviderMethodError(err);\n                    // 4900\n                    case ProviderDisconnectedError.code:\n                        throw new ProviderDisconnectedError(err);\n                    // 4901\n                    case ChainDisconnectedError.code:\n                        throw new ChainDisconnectedError(err);\n                    // 4902\n                    case SwitchChainError.code:\n                        throw new SwitchChainError(err);\n                    // 5700\n                    case UnsupportedNonOptionalCapabilityError.code:\n                        throw new UnsupportedNonOptionalCapabilityError(err);\n                    // 5710\n                    case UnsupportedChainIdError.code:\n                        throw new UnsupportedChainIdError(err);\n                    // 5720\n                    case DuplicateIdError.code:\n                        throw new DuplicateIdError(err);\n                    // 5730\n                    case UnknownBundleIdError.code:\n                        throw new UnknownBundleIdError(err);\n                    // 5740\n                    case BundleTooLargeError.code:\n                        throw new BundleTooLargeError(err);\n                    // 5750\n                    case AtomicReadyWalletRejectedUpgradeError.code:\n                        throw new AtomicReadyWalletRejectedUpgradeError(err);\n                    // 5760\n                    case AtomicityNotSupportedError.code:\n                        throw new AtomicityNotSupportedError(err);\n                    // CAIP-25: User Rejected Error\n                    // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\n                    case 5000:\n                        throw new UserRejectedRequestError(err);\n                    default:\n                        if (err_ instanceof BaseError)\n                            throw err_;\n                        throw new UnknownRpcError(err);\n                }\n            }\n        }, {\n            delay: ({ count, error }) => {\n                // If we find a Retry-After header, let's retry after the given time.\n                if (error && error instanceof HttpRequestError) {\n                    const retryAfter = error?.headers?.get('Retry-After');\n                    if (retryAfter?.match(/\\d/))\n                        return Number.parseInt(retryAfter, 10) * 1000;\n                }\n                // Otherwise, let's retry with an exponential backoff.\n                return ~~(1 << count) * retryDelay;\n            },\n            retryCount,\n            shouldRetry: ({ error }) => shouldRetry(error),\n        }), { enabled: dedupe, id: requestId });\n    };\n}\n/** @internal */\nexport function shouldRetry(error) {\n    if ('code' in error && typeof error.code === 'number') {\n        if (error.code === -1)\n            return true; // Unknown error\n        if (error.code === LimitExceededRpcError.code)\n            return true;\n        if (error.code === InternalRpcError.code)\n            return true;\n        return false;\n    }\n    if (error instanceof HttpRequestError && error.status) {\n        // Forbidden\n        if (error.status === 403)\n            return true;\n        // Request Timeout\n        if (error.status === 408)\n            return true;\n        // Request Entity Too Large\n        if (error.status === 413)\n            return true;\n        // Too Many Requests\n        if (error.status === 429)\n            return true;\n        // Internal Server Error\n        if (error.status === 500)\n            return true;\n        // Bad Gateway\n        if (error.status === 502)\n            return true;\n        // Service Unavailable\n        if (error.status === 503)\n            return true;\n        // Gateway Timeout\n        if (error.status === 504)\n            return true;\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=buildRequest.js.map",
    "export function defineChain(chain) {\n    return {\n        formatters: undefined,\n        fees: undefined,\n        serializers: undefined,\n        ...chain,\n    };\n}\n//# sourceMappingURL=defineChain.js.map",
    "export function withTimeout(fn, { errorInstance = new Error('timed out'), timeout, signal, }) {\n    return new Promise((resolve, reject) => {\n        ;\n        (async () => {\n            let timeoutId;\n            try {\n                const controller = new AbortController();\n                if (timeout > 0) {\n                    timeoutId = setTimeout(() => {\n                        if (signal) {\n                            controller.abort();\n                        }\n                        else {\n                            reject(errorInstance);\n                        }\n                    }, timeout); // need to cast because bun globals.d.ts overrides @types/node\n                }\n                resolve(await fn({ signal: controller?.signal || null }));\n            }\n            catch (err) {\n                if (err?.name === 'AbortError')\n                    reject(errorInstance);\n                reject(err);\n            }\n            finally {\n                clearTimeout(timeoutId);\n            }\n        })();\n    });\n}\n//# sourceMappingURL=withTimeout.js.map",
    "function createIdStore() {\n    return {\n        current: 0,\n        take() {\n            return this.current++;\n        },\n        reset() {\n            this.current = 0;\n        },\n    };\n}\nexport const idCache = /*#__PURE__*/ createIdStore();\n//# sourceMappingURL=id.js.map",
    "import { HttpRequestError, TimeoutError, } from '../../errors/request.js';\nimport { withTimeout, } from '../promise/withTimeout.js';\nimport { stringify } from '../stringify.js';\nimport { idCache } from './id.js';\nexport function getHttpRpcClient(url, options = {}) {\n    return {\n        async request(params) {\n            const { body, fetchFn = options.fetchFn ?? fetch, onRequest = options.onRequest, onResponse = options.onResponse, timeout = options.timeout ?? 10_000, } = params;\n            const fetchOptions = {\n                ...(options.fetchOptions ?? {}),\n                ...(params.fetchOptions ?? {}),\n            };\n            const { headers, method, signal: signal_ } = fetchOptions;\n            try {\n                const response = await withTimeout(async ({ signal }) => {\n                    const init = {\n                        ...fetchOptions,\n                        body: Array.isArray(body)\n                            ? stringify(body.map((body) => ({\n                                jsonrpc: '2.0',\n                                id: body.id ?? idCache.take(),\n                                ...body,\n                            })))\n                            : stringify({\n                                jsonrpc: '2.0',\n                                id: body.id ?? idCache.take(),\n                                ...body,\n                            }),\n                        headers: {\n                            'Content-Type': 'application/json',\n                            ...headers,\n                        },\n                        method: method || 'POST',\n                        signal: signal_ || (timeout > 0 ? signal : null),\n                    };\n                    const request = new Request(url, init);\n                    const args = (await onRequest?.(request, init)) ?? { ...init, url };\n                    const response = await fetchFn(args.url ?? url, args);\n                    return response;\n                }, {\n                    errorInstance: new TimeoutError({ body, url }),\n                    timeout,\n                    signal: true,\n                });\n                if (onResponse)\n                    await onResponse(response);\n                let data;\n                if (response.headers.get('Content-Type')?.startsWith('application/json'))\n                    data = await response.json();\n                else {\n                    data = await response.text();\n                    try {\n                        data = JSON.parse(data || '{}');\n                    }\n                    catch (err) {\n                        if (response.ok)\n                            throw err;\n                        data = { error: data };\n                    }\n                }\n                if (!response.ok) {\n                    throw new HttpRequestError({\n                        body,\n                        details: stringify(data.error) || response.statusText,\n                        headers: response.headers,\n                        status: response.status,\n                        url,\n                    });\n                }\n                return data;\n            }\n            catch (err) {\n                if (err instanceof HttpRequestError)\n                    throw err;\n                if (err instanceof TimeoutError)\n                    throw err;\n                throw new HttpRequestError({\n                    body,\n                    cause: err,\n                    url,\n                });\n            }\n        },\n    };\n}\n//# sourceMappingURL=http.js.map",
    "export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n';\n//# sourceMappingURL=strings.js.map",
    "import { presignMessagePrefix } from '../../constants/strings.js';\nimport { concat } from '../data/concat.js';\nimport { size } from '../data/size.js';\nimport { bytesToHex, stringToHex, } from '../encoding/toHex.js';\nexport function toPrefixedMessage(message_) {\n    const message = (() => {\n        if (typeof message_ === 'string')\n            return stringToHex(message_);\n        if (typeof message_.raw === 'string')\n            return message_.raw;\n        return bytesToHex(message_.raw);\n    })();\n    const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`);\n    return concat([prefix, message]);\n}\n//# sourceMappingURL=toPrefixedMessage.js.map",
    "import { keccak256 } from '../hash/keccak256.js';\nimport { toPrefixedMessage } from './toPrefixedMessage.js';\nexport function hashMessage(message, to_) {\n    return keccak256(toPrefixedMessage(message), to_);\n}\n//# sourceMappingURL=hashMessage.js.map",
    "import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nexport class InvalidDomainError extends BaseError {\n    constructor({ domain }) {\n        super(`Invalid domain \"${stringify(domain)}\".`, {\n            metaMessages: ['Must be a valid EIP-712 domain.'],\n        });\n    }\n}\nexport class InvalidPrimaryTypeError extends BaseError {\n    constructor({ primaryType, types, }) {\n        super(`Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`, {\n            docsPath: '/api/glossary/Errors#typeddatainvalidprimarytypeerror',\n            metaMessages: ['Check that the primary type is a key in `types`.'],\n        });\n    }\n}\nexport class InvalidStructTypeError extends BaseError {\n    constructor({ type }) {\n        super(`Struct type \"${type}\" is invalid.`, {\n            metaMessages: ['Struct type must not be a Solidity type.'],\n            name: 'InvalidStructTypeError',\n        });\n    }\n}\n//# sourceMappingURL=typedData.js.map",
    "import { BytesSizeMismatchError } from '../errors/abi.js';\nimport { InvalidAddressError } from '../errors/address.js';\nimport { InvalidDomainError, InvalidPrimaryTypeError, InvalidStructTypeError, } from '../errors/typedData.js';\nimport { isAddress } from './address/isAddress.js';\nimport { size } from './data/size.js';\nimport { numberToHex } from './encoding/toHex.js';\nimport { bytesRegex, integerRegex } from './regex.js';\nimport { hashDomain, } from './signature/hashTypedData.js';\nimport { stringify } from './stringify.js';\nexport function serializeTypedData(parameters) {\n    const { domain: domain_, message: message_, primaryType, types, } = parameters;\n    const normalizeData = (struct, data_) => {\n        const data = { ...data_ };\n        for (const param of struct) {\n            const { name, type } = param;\n            if (type === 'address')\n                data[name] = data[name].toLowerCase();\n        }\n        return data;\n    };\n    const domain = (() => {\n        if (!types.EIP712Domain)\n            return {};\n        if (!domain_)\n            return {};\n        return normalizeData(types.EIP712Domain, domain_);\n    })();\n    const message = (() => {\n        if (primaryType === 'EIP712Domain')\n            return undefined;\n        return normalizeData(types[primaryType], message_);\n    })();\n    return stringify({ domain, message, primaryType, types });\n}\nexport function validateTypedData(parameters) {\n    const { domain, message, primaryType, types } = parameters;\n    const validateData = (struct, data) => {\n        for (const param of struct) {\n            const { name, type } = param;\n            const value = data[name];\n            const integerMatch = type.match(integerRegex);\n            if (integerMatch &&\n                (typeof value === 'number' || typeof value === 'bigint')) {\n                const [_type, base, size_] = integerMatch;\n                // If number cannot be cast to a sized hex value, it is out of range\n                // and will throw.\n                numberToHex(value, {\n                    signed: base === 'int',\n                    size: Number.parseInt(size_, 10) / 8,\n                });\n            }\n            if (type === 'address' && typeof value === 'string' && !isAddress(value))\n                throw new InvalidAddressError({ address: value });\n            const bytesMatch = type.match(bytesRegex);\n            if (bytesMatch) {\n                const [_type, size_] = bytesMatch;\n                if (size_ && size(value) !== Number.parseInt(size_, 10))\n                    throw new BytesSizeMismatchError({\n                        expectedSize: Number.parseInt(size_, 10),\n                        givenSize: size(value),\n                    });\n            }\n            const struct = types[type];\n            if (struct) {\n                validateReference(type);\n                validateData(struct, value);\n            }\n        }\n    };\n    // Validate domain types.\n    if (types.EIP712Domain && domain) {\n        if (typeof domain !== 'object')\n            throw new InvalidDomainError({ domain });\n        validateData(types.EIP712Domain, domain);\n    }\n    // Validate message types.\n    if (primaryType !== 'EIP712Domain') {\n        if (types[primaryType])\n            validateData(types[primaryType], message);\n        else\n            throw new InvalidPrimaryTypeError({ primaryType, types });\n    }\n}\nexport function getTypesForEIP712Domain({ domain, }) {\n    return [\n        typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n        domain?.version && { name: 'version', type: 'string' },\n        (typeof domain?.chainId === 'number' ||\n            typeof domain?.chainId === 'bigint') && {\n            name: 'chainId',\n            type: 'uint256',\n        },\n        domain?.verifyingContract && {\n            name: 'verifyingContract',\n            type: 'address',\n        },\n        domain?.salt && { name: 'salt', type: 'bytes32' },\n    ].filter(Boolean);\n}\nexport function domainSeparator({ domain }) {\n    return hashDomain({\n        domain,\n        types: {\n            EIP712Domain: getTypesForEIP712Domain({ domain }),\n        },\n    });\n}\n/** @internal */\nfunction validateReference(type) {\n    // Struct type must not be a Solidity type.\n    if (type === 'address' ||\n        type === 'bool' ||\n        type === 'string' ||\n        type.startsWith('bytes') ||\n        type.startsWith('uint') ||\n        type.startsWith('int'))\n        throw new InvalidStructTypeError({ type });\n}\n//# sourceMappingURL=typedData.js.map",
    "// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\nimport { encodeAbiParameters, } from '../abi/encodeAbiParameters.js';\nimport { concat } from '../data/concat.js';\nimport { toHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { getTypesForEIP712Domain, validateTypedData, } from '../typedData.js';\nexport function hashTypedData(parameters) {\n    const { domain = {}, message, primaryType, } = parameters;\n    const types = {\n        EIP712Domain: getTypesForEIP712Domain({ domain }),\n        ...parameters.types,\n    };\n    // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n    // as we can't statically check this with TypeScript.\n    validateTypedData({\n        domain,\n        message,\n        primaryType,\n        types,\n    });\n    const parts = ['0x1901'];\n    if (domain)\n        parts.push(hashDomain({\n            domain,\n            types: types,\n        }));\n    if (primaryType !== 'EIP712Domain')\n        parts.push(hashStruct({\n            data: message,\n            primaryType,\n            types: types,\n        }));\n    return keccak256(concat(parts));\n}\nexport function hashDomain({ domain, types, }) {\n    return hashStruct({\n        data: domain,\n        primaryType: 'EIP712Domain',\n        types,\n    });\n}\nexport function hashStruct({ data, primaryType, types, }) {\n    const encoded = encodeData({\n        data,\n        primaryType,\n        types,\n    });\n    return keccak256(encoded);\n}\nfunction encodeData({ data, primaryType, types, }) {\n    const encodedTypes = [{ type: 'bytes32' }];\n    const encodedValues = [hashType({ primaryType, types })];\n    for (const field of types[primaryType]) {\n        const [type, value] = encodeField({\n            types,\n            name: field.name,\n            type: field.type,\n            value: data[field.name],\n        });\n        encodedTypes.push(type);\n        encodedValues.push(value);\n    }\n    return encodeAbiParameters(encodedTypes, encodedValues);\n}\nfunction hashType({ primaryType, types, }) {\n    const encodedHashType = toHex(encodeType({ primaryType, types }));\n    return keccak256(encodedHashType);\n}\nexport function encodeType({ primaryType, types, }) {\n    let result = '';\n    const unsortedDeps = findTypeDependencies({ primaryType, types });\n    unsortedDeps.delete(primaryType);\n    const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n    for (const type of deps) {\n        result += `${type}(${types[type]\n            .map(({ name, type: t }) => `${t} ${name}`)\n            .join(',')})`;\n    }\n    return result;\n}\nfunction findTypeDependencies({ primaryType: primaryType_, types, }, results = new Set()) {\n    const match = primaryType_.match(/^\\w*/u);\n    const primaryType = match?.[0];\n    if (results.has(primaryType) || types[primaryType] === undefined) {\n        return results;\n    }\n    results.add(primaryType);\n    for (const field of types[primaryType]) {\n        findTypeDependencies({ primaryType: field.type, types }, results);\n    }\n    return results;\n}\nfunction encodeField({ types, name, type, value, }) {\n    if (types[type] !== undefined) {\n        return [\n            { type: 'bytes32' },\n            keccak256(encodeData({ data: value, primaryType: type, types })),\n        ];\n    }\n    if (type === 'bytes') {\n        const prepend = value.length % 2 ? '0' : '';\n        value = `0x${prepend + value.slice(2)}`;\n        return [{ type: 'bytes32' }, keccak256(value)];\n    }\n    if (type === 'string')\n        return [{ type: 'bytes32' }, keccak256(toHex(value))];\n    if (type.lastIndexOf(']') === type.length - 1) {\n        const parsedType = type.slice(0, type.lastIndexOf('['));\n        const typeValuePairs = value.map((item) => encodeField({\n            name,\n            type: parsedType,\n            types,\n            value: item,\n        }));\n        return [\n            { type: 'bytes32' },\n            keccak256(encodeAbiParameters(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))),\n        ];\n    }\n    return [{ type }, value];\n}\n//# sourceMappingURL=hashTypedData.js.map",
    "/**\n * @internal\n *\n * Map with a LRU (Least recently used) policy.\n * @see https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap extends Map {\n    constructor(size) {\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    get(key) {\n        const value = super.get(key);\n        if (super.has(key) && value !== undefined) {\n            this.delete(key);\n            super.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize) {\n            const firstKey = this.keys().next().value;\n            if (firstKey)\n                this.delete(firstKey);\n        }\n        return this;\n    }\n}\n//# sourceMappingURL=lru.js.map",
    "import { LruMap } from './internal/lru.js';\nconst caches = {\n    checksum: /*#__PURE__*/ new LruMap(8192),\n};\nexport const checksum = caches.checksum;\n/**\n * Clears all global caches.\n *\n * @example\n * ```ts\n * import { Caches } from 'ox'\n * Caches.clear()\n * ```\n */\nexport function clear() {\n    for (const cache of Object.values(caches))\n        cache.clear();\n}\n//# sourceMappingURL=Caches.js.map",
    "/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto = nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? nc.webcrypto\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n        ? nc\n        : undefined;\n//# sourceMappingURL=cryptoNode.js.map",
    "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map",
    "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map",
    "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map",
    "/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from \"./_u64.js\";\n// prettier-ignore\nimport { abytes, aexists, anumber, aoutput, clean, createHasher, createXOFer, Hash, swap32IfBE, toBytes, u32 } from \"./utils.js\";\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst IOTAS = split(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    clean(B);\n}\n/** Keccak sponge function. */\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        this.enableXOF = false;\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (!(0 < blockLen && blockLen < 200))\n            throw new Error('only keccak-f1600 function is supported');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    keccak() {\n        swap32IfBE(this.state32);\n        keccakP(this.state32, this.rounds);\n        swap32IfBE(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { blockLen, state } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.state);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */\nexport const sha3_224 = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256 = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */\nexport const sha3_384 = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */\nexport const sha3_512 = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();\n/** keccak-224 hash function. */\nexport const keccak_224 = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256 = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();\n/** keccak-384 hash function. */\nexport const keccak_384 = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();\n/** keccak-512 hash function. */\nexport const keccak_512 = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();\nconst genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128 = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256 = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();\n//# sourceMappingURL=sha3.js.map",
    "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map",
    "import { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160';\nimport { keccak_256 as noble_keccak256 } from '@noble/hashes/sha3';\nimport { sha256 as noble_sha256 } from '@noble/hashes/sha256';\nimport * as Bytes from './Bytes.js';\nimport * as Hex from './Hex.js';\n/**\n * Calculates the [Keccak256](https://en.wikipedia.org/wiki/SHA-3) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n *\n * This function is a re-export of `keccak_256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.keccak256('0xdeadbeef')\n * // @log: '0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1'\n * ```\n *\n * @example\n * ### Calculate Hash of a String\n *\n * ```ts twoslash\n * import { Hash, Hex } from 'ox'\n *\n * Hash.keccak256(Hex.fromString('hello world'))\n * // @log: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0'\n * ```\n *\n * @example\n * ### Configure Return Type\n *\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.keccak256('0xdeadbeef', { as: 'Bytes' })\n * // @log: Uint8Array [...]\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n * @param options - Options.\n * @returns Keccak256 hash.\n */\nexport function keccak256(value, options = {}) {\n    const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options;\n    const bytes = noble_keccak256(Bytes.from(value));\n    if (as === 'Bytes')\n        return bytes;\n    return Hex.fromBytes(bytes);\n}\n/**\n * Calculates the [Ripemd160](https://en.wikipedia.org/wiki/RIPEMD) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n *\n * This function is a re-export of `ripemd160` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.ripemd160('0xdeadbeef')\n * // '0x226821c2f5423e11fe9af68bd285c249db2e4b5a'\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n * @param options - Options.\n * @returns Ripemd160 hash.\n */\nexport function ripemd160(value, options = {}) {\n    const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options;\n    const bytes = noble_ripemd160(Bytes.from(value));\n    if (as === 'Bytes')\n        return bytes;\n    return Hex.fromBytes(bytes);\n}\n/**\n * Calculates the [Sha256](https://en.wikipedia.org/wiki/SHA-256) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n *\n * This function is a re-export of `sha256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.sha256('0xdeadbeef')\n * // '0x5f78c33274e43fa9de5659265c1d917e25c03722dcb0b8d27db8d5feaa813953'\n * ```\n *\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\n * @param options - Options.\n * @returns Sha256 hash.\n */\nexport function sha256(value, options = {}) {\n    const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options;\n    const bytes = noble_sha256(Bytes.from(value));\n    if (as === 'Bytes')\n        return bytes;\n    return Hex.fromBytes(bytes);\n}\n/**\n * Checks if a string is a valid hash value.\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * Hash.validate('0x')\n * // @log: false\n *\n * Hash.validate('0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0')\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns Whether the value is a valid hash.\n */\nexport function validate(value) {\n    return Hex.validate(value) && Hex.size(value) === 32;\n}\n//# sourceMappingURL=Hash.js.map",
    "import * as Bytes from './Bytes.js';\nimport * as Errors from './Errors.js';\nimport * as Hex from './Hex.js';\nimport * as Json from './Json.js';\n/**\n * Asserts that a {@link ox#PublicKey.PublicKey} is valid.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * PublicKey.assert({\n *   prefix: 4,\n *   y: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * })\n * // @error: PublicKey.InvalidError: Value \\`{\"y\":\"1\"}\\` is not a valid public key.\n * // @error: Public key must contain:\n * // @error: - an `x` and `prefix` value (compressed)\n * // @error: - an `x`, `y`, and `prefix` value (uncompressed)\n * ```\n *\n * @param publicKey - The public key object to assert.\n */\nexport function assert(publicKey, options = {}) {\n    const { compressed } = options;\n    const { prefix, x, y } = publicKey;\n    // Uncompressed\n    if (compressed === false ||\n        (typeof x === 'bigint' && typeof y === 'bigint')) {\n        if (prefix !== 4)\n            throw new InvalidPrefixError({\n                prefix,\n                cause: new InvalidUncompressedPrefixError(),\n            });\n        return;\n    }\n    // Compressed\n    if (compressed === true ||\n        (typeof x === 'bigint' && typeof y === 'undefined')) {\n        if (prefix !== 3 && prefix !== 2)\n            throw new InvalidPrefixError({\n                prefix,\n                cause: new InvalidCompressedPrefixError(),\n            });\n        return;\n    }\n    // Unknown/invalid\n    throw new InvalidError({ publicKey });\n}\n/**\n * Compresses a {@link ox#PublicKey.PublicKey}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const compressed = PublicKey.compress(publicKey) // [!code focus]\n * // @log: {\n * // @log:   prefix: 3,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log: }\n * ```\n *\n * @param publicKey - The public key to compress.\n * @returns The compressed public key.\n */\nexport function compress(publicKey) {\n    const { x, y } = publicKey;\n    return {\n        prefix: y % 2n === 0n ? 2 : 3,\n        x,\n    };\n}\n/**\n * Instantiates a typed {@link ox#PublicKey.PublicKey} object from a {@link ox#PublicKey.PublicKey}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from('0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @param value - The public key value to instantiate.\n * @returns The instantiated {@link ox#PublicKey.PublicKey}.\n */\nexport function from(value) {\n    const publicKey = (() => {\n        if (Hex.validate(value))\n            return fromHex(value);\n        if (Bytes.validate(value))\n            return fromBytes(value);\n        const { prefix, x, y } = value;\n        if (typeof x === 'bigint' && typeof y === 'bigint')\n            return { prefix: prefix ?? 0x04, x, y };\n        return { prefix, x };\n    })();\n    assert(publicKey);\n    return publicKey;\n}\n/**\n * Deserializes a {@link ox#PublicKey.PublicKey} from a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromBytes(new Uint8Array([128, 3, 131, ...]))\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @param publicKey - The serialized public key.\n * @returns The deserialized public key.\n */\nexport function fromBytes(publicKey) {\n    return fromHex(Hex.fromBytes(publicKey));\n}\n/**\n * Deserializes a {@link ox#PublicKey.PublicKey} from a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromHex('0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @example\n * ### Deserializing a Compressed Public Key\n *\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromHex('0x038318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed75')\n * // @log: {\n * // @log:   prefix: 3,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log: }\n * ```\n *\n * @param publicKey - The serialized public key.\n * @returns The deserialized public key.\n */\nexport function fromHex(publicKey) {\n    if (publicKey.length !== 132 &&\n        publicKey.length !== 130 &&\n        publicKey.length !== 68)\n        throw new InvalidSerializedSizeError({ publicKey });\n    if (publicKey.length === 130) {\n        const x = BigInt(Hex.slice(publicKey, 0, 32));\n        const y = BigInt(Hex.slice(publicKey, 32, 64));\n        return {\n            prefix: 4,\n            x,\n            y,\n        };\n    }\n    if (publicKey.length === 132) {\n        const prefix = Number(Hex.slice(publicKey, 0, 1));\n        const x = BigInt(Hex.slice(publicKey, 1, 33));\n        const y = BigInt(Hex.slice(publicKey, 33, 65));\n        return {\n            prefix,\n            x,\n            y,\n        };\n    }\n    const prefix = Number(Hex.slice(publicKey, 0, 1));\n    const x = BigInt(Hex.slice(publicKey, 1, 33));\n    return {\n        prefix,\n        x,\n    };\n}\n/**\n * Serializes a {@link ox#PublicKey.PublicKey} to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const bytes = PublicKey.toBytes(publicKey) // [!code focus]\n * // @log: Uint8Array [128, 3, 131, ...]\n * ```\n *\n * @param publicKey - The public key to serialize.\n * @returns The serialized public key.\n */\nexport function toBytes(publicKey, options = {}) {\n    return Bytes.fromHex(toHex(publicKey, options));\n}\n/**\n * Serializes a {@link ox#PublicKey.PublicKey} to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const hex = PublicKey.toHex(publicKey) // [!code focus]\n * // @log: '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5'\n * ```\n *\n * @param publicKey - The public key to serialize.\n * @returns The serialized public key.\n */\nexport function toHex(publicKey, options = {}) {\n    assert(publicKey);\n    const { prefix, x, y } = publicKey;\n    const { includePrefix = true } = options;\n    const publicKey_ = Hex.concat(includePrefix ? Hex.fromNumber(prefix, { size: 1 }) : '0x', Hex.fromNumber(x, { size: 32 }), \n    // If the public key is not compressed, add the y coordinate.\n    typeof y === 'bigint' ? Hex.fromNumber(y, { size: 32 }) : '0x');\n    return publicKey_;\n}\n/**\n * Validates a {@link ox#PublicKey.PublicKey}. Returns `true` if valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const valid = PublicKey.validate({\n *   prefix: 4,\n *   y: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * })\n * // @log: false\n * ```\n *\n * @param publicKey - The public key object to assert.\n */\nexport function validate(publicKey, options = {}) {\n    try {\n        assert(publicKey, options);\n        return true;\n    }\n    catch (_error) {\n        return false;\n    }\n}\n/**\n * Thrown when a public key is invalid.\n *\n * @example\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * PublicKey.assert({ y: 1n })\n * // @error: PublicKey.InvalidError: Value `{\"y\":1n}` is not a valid public key.\n * // @error: Public key must contain:\n * // @error: - an `x` and `prefix` value (compressed)\n * // @error: - an `x`, `y`, and `prefix` value (uncompressed)\n * ```\n */\nexport class InvalidError extends Errors.BaseError {\n    constructor({ publicKey }) {\n        super(`Value \\`${Json.stringify(publicKey)}\\` is not a valid public key.`, {\n            metaMessages: [\n                'Public key must contain:',\n                '- an `x` and `prefix` value (compressed)',\n                '- an `x`, `y`, and `prefix` value (uncompressed)',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'PublicKey.InvalidError'\n        });\n    }\n}\n/** Thrown when a public key has an invalid prefix. */\nexport class InvalidPrefixError extends Errors.BaseError {\n    constructor({ prefix, cause }) {\n        super(`Prefix \"${prefix}\" is invalid.`, {\n            cause,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'PublicKey.InvalidPrefixError'\n        });\n    }\n}\n/** Thrown when the public key has an invalid prefix for a compressed public key. */\nexport class InvalidCompressedPrefixError extends Errors.BaseError {\n    constructor() {\n        super('Prefix must be 2 or 3 for compressed public keys.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'PublicKey.InvalidCompressedPrefixError'\n        });\n    }\n}\n/** Thrown when the public key has an invalid prefix for an uncompressed public key. */\nexport class InvalidUncompressedPrefixError extends Errors.BaseError {\n    constructor() {\n        super('Prefix must be 4 for uncompressed public keys.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'PublicKey.InvalidUncompressedPrefixError'\n        });\n    }\n}\n/** Thrown when the public key has an invalid serialized size. */\nexport class InvalidSerializedSizeError extends Errors.BaseError {\n    constructor({ publicKey }) {\n        super(`Value \\`${publicKey}\\` is an invalid public key size.`, {\n            metaMessages: [\n                'Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).',\n                `Received ${Hex.size(Hex.from(publicKey))} bytes.`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'PublicKey.InvalidSerializedSizeError'\n        });\n    }\n}\n//# sourceMappingURL=PublicKey.js.map",
    "import * as Bytes from './Bytes.js';\nimport * as Caches from './Caches.js';\nimport * as Errors from './Errors.js';\nimport * as Hash from './Hash.js';\nimport * as PublicKey from './PublicKey.js';\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\n/**\n * Asserts that the given value is a valid {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.assert('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.assert('0xdeadbeef')\n * // @error: InvalidAddressError: Address \"0xdeadbeef\" is invalid.\n * ```\n *\n * @param value - Value to assert if it is a valid address.\n * @param options - Assertion options.\n */\nexport function assert(value, options = {}) {\n    const { strict = true } = options;\n    if (!addressRegex.test(value))\n        throw new InvalidAddressError({\n            address: value,\n            cause: new InvalidInputError(),\n        });\n    if (strict) {\n        if (value.toLowerCase() === value)\n            return;\n        if (checksum(value) !== value)\n            throw new InvalidAddressError({\n                address: value,\n                cause: new InvalidChecksumError(),\n            });\n    }\n}\n/**\n * Computes the checksum address for the given {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.checksum('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * ```\n *\n * @param address - The address to compute the checksum for.\n * @returns The checksummed address.\n */\nexport function checksum(address) {\n    if (Caches.checksum.has(address))\n        return Caches.checksum.get(address);\n    assert(address, { strict: false });\n    const hexAddress = address.substring(2).toLowerCase();\n    const hash = Hash.keccak256(Bytes.fromString(hexAddress), { as: 'Bytes' });\n    const characters = hexAddress.split('');\n    for (let i = 0; i < 40; i += 2) {\n        if (hash[i >> 1] >> 4 >= 8 && characters[i]) {\n            characters[i] = characters[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && characters[i + 1]) {\n            characters[i + 1] = characters[i + 1].toUpperCase();\n        }\n    }\n    const result = `0x${characters.join('')}`;\n    Caches.checksum.set(address, result);\n    return result;\n}\n/**\n * Converts a stringified address to a typed (checksummed) {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e', {\n *   checksum: false\n * })\n * // @log: '0xa0cf798816d4b9b9866b5330eea46a18382f251e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('hello')\n * // @error: InvalidAddressError: Address \"0xa\" is invalid.\n * ```\n *\n * @param address - An address string to convert to a typed Address.\n * @param options - Conversion options.\n * @returns The typed Address.\n */\nexport function from(address, options = {}) {\n    const { checksum: checksumVal = false } = options;\n    assert(address);\n    if (checksumVal)\n        return checksum(address);\n    return address;\n}\n/**\n * Converts an ECDSA public key to an {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address, PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from(\n *   '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5',\n * )\n * const address = Address.fromPublicKey(publicKey)\n * // @log: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\n * ```\n *\n * @param publicKey - The ECDSA public key to convert to an {@link ox#Address.Address}.\n * @param options - Conversion options.\n * @returns The {@link ox#Address.Address} corresponding to the public key.\n */\nexport function fromPublicKey(publicKey, options = {}) {\n    const address = Hash.keccak256(`0x${PublicKey.toHex(publicKey).slice(4)}`).substring(26);\n    return from(`0x${address}`, options);\n}\n/**\n * Checks if two {@link ox#Address.Address} are equal.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.isEqual(\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * )\n * // @log: true\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.isEqual(\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251f'\n * )\n * // @log: false\n * ```\n *\n * @param addressA - The first address to compare.\n * @param addressB - The second address to compare.\n * @returns Whether the addresses are equal.\n */\nexport function isEqual(addressA, addressB) {\n    assert(addressA, { strict: false });\n    assert(addressB, { strict: false });\n    return addressA.toLowerCase() === addressB.toLowerCase();\n}\n/**\n * Checks if the given address is a valid {@link ox#Address.Address}.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.validate('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\n * // @log: true\n * ```\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.validate('0xdeadbeef')\n * // @log: false\n * ```\n *\n * @param address - Value to check if it is a valid address.\n * @param options - Check options.\n * @returns Whether the address is a valid address.\n */\nexport function validate(address, options = {}) {\n    const { strict = true } = options ?? {};\n    try {\n        assert(address, { strict });\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Thrown when an address is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.from('0x123')\n * // @error: Address.InvalidAddressError: Address `0x123` is invalid.\n * ```\n */\nexport class InvalidAddressError extends Errors.BaseError {\n    constructor({ address, cause }) {\n        super(`Address \"${address}\" is invalid.`, {\n            cause,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Address.InvalidAddressError'\n        });\n    }\n}\n/** Thrown when an address is not a 20 byte (40 hexadecimal character) value. */\nexport class InvalidInputError extends Errors.BaseError {\n    constructor() {\n        super('Address is not a 20 byte (40 hexadecimal character) value.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Address.InvalidInputError'\n        });\n    }\n}\n/** Thrown when an address does not match its checksum counterpart. */\nexport class InvalidChecksumError extends Errors.BaseError {\n    constructor() {\n        super('Address does not match its checksum counterpart.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Address.InvalidChecksumError'\n        });\n    }\n}\n//# sourceMappingURL=Address.js.map",
    "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/;\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nexport const maxInt8 = 2n ** (8n - 1n) - 1n;\nexport const maxInt16 = 2n ** (16n - 1n) - 1n;\nexport const maxInt24 = 2n ** (24n - 1n) - 1n;\nexport const maxInt32 = 2n ** (32n - 1n) - 1n;\nexport const maxInt40 = 2n ** (40n - 1n) - 1n;\nexport const maxInt48 = 2n ** (48n - 1n) - 1n;\nexport const maxInt56 = 2n ** (56n - 1n) - 1n;\nexport const maxInt64 = 2n ** (64n - 1n) - 1n;\nexport const maxInt72 = 2n ** (72n - 1n) - 1n;\nexport const maxInt80 = 2n ** (80n - 1n) - 1n;\nexport const maxInt88 = 2n ** (88n - 1n) - 1n;\nexport const maxInt96 = 2n ** (96n - 1n) - 1n;\nexport const maxInt104 = 2n ** (104n - 1n) - 1n;\nexport const maxInt112 = 2n ** (112n - 1n) - 1n;\nexport const maxInt120 = 2n ** (120n - 1n) - 1n;\nexport const maxInt128 = 2n ** (128n - 1n) - 1n;\nexport const maxInt136 = 2n ** (136n - 1n) - 1n;\nexport const maxInt144 = 2n ** (144n - 1n) - 1n;\nexport const maxInt152 = 2n ** (152n - 1n) - 1n;\nexport const maxInt160 = 2n ** (160n - 1n) - 1n;\nexport const maxInt168 = 2n ** (168n - 1n) - 1n;\nexport const maxInt176 = 2n ** (176n - 1n) - 1n;\nexport const maxInt184 = 2n ** (184n - 1n) - 1n;\nexport const maxInt192 = 2n ** (192n - 1n) - 1n;\nexport const maxInt200 = 2n ** (200n - 1n) - 1n;\nexport const maxInt208 = 2n ** (208n - 1n) - 1n;\nexport const maxInt216 = 2n ** (216n - 1n) - 1n;\nexport const maxInt224 = 2n ** (224n - 1n) - 1n;\nexport const maxInt232 = 2n ** (232n - 1n) - 1n;\nexport const maxInt240 = 2n ** (240n - 1n) - 1n;\nexport const maxInt248 = 2n ** (248n - 1n) - 1n;\nexport const maxInt256 = 2n ** (256n - 1n) - 1n;\nexport const minInt8 = -(2n ** (8n - 1n));\nexport const minInt16 = -(2n ** (16n - 1n));\nexport const minInt24 = -(2n ** (24n - 1n));\nexport const minInt32 = -(2n ** (32n - 1n));\nexport const minInt40 = -(2n ** (40n - 1n));\nexport const minInt48 = -(2n ** (48n - 1n));\nexport const minInt56 = -(2n ** (56n - 1n));\nexport const minInt64 = -(2n ** (64n - 1n));\nexport const minInt72 = -(2n ** (72n - 1n));\nexport const minInt80 = -(2n ** (80n - 1n));\nexport const minInt88 = -(2n ** (88n - 1n));\nexport const minInt96 = -(2n ** (96n - 1n));\nexport const minInt104 = -(2n ** (104n - 1n));\nexport const minInt112 = -(2n ** (112n - 1n));\nexport const minInt120 = -(2n ** (120n - 1n));\nexport const minInt128 = -(2n ** (128n - 1n));\nexport const minInt136 = -(2n ** (136n - 1n));\nexport const minInt144 = -(2n ** (144n - 1n));\nexport const minInt152 = -(2n ** (152n - 1n));\nexport const minInt160 = -(2n ** (160n - 1n));\nexport const minInt168 = -(2n ** (168n - 1n));\nexport const minInt176 = -(2n ** (176n - 1n));\nexport const minInt184 = -(2n ** (184n - 1n));\nexport const minInt192 = -(2n ** (192n - 1n));\nexport const minInt200 = -(2n ** (200n - 1n));\nexport const minInt208 = -(2n ** (208n - 1n));\nexport const minInt216 = -(2n ** (216n - 1n));\nexport const minInt224 = -(2n ** (224n - 1n));\nexport const minInt232 = -(2n ** (232n - 1n));\nexport const minInt240 = -(2n ** (240n - 1n));\nexport const minInt248 = -(2n ** (248n - 1n));\nexport const minInt256 = -(2n ** (256n - 1n));\nexport const maxUint8 = 2n ** 8n - 1n;\nexport const maxUint16 = 2n ** 16n - 1n;\nexport const maxUint24 = 2n ** 24n - 1n;\nexport const maxUint32 = 2n ** 32n - 1n;\nexport const maxUint40 = 2n ** 40n - 1n;\nexport const maxUint48 = 2n ** 48n - 1n;\nexport const maxUint56 = 2n ** 56n - 1n;\nexport const maxUint64 = 2n ** 64n - 1n;\nexport const maxUint72 = 2n ** 72n - 1n;\nexport const maxUint80 = 2n ** 80n - 1n;\nexport const maxUint88 = 2n ** 88n - 1n;\nexport const maxUint96 = 2n ** 96n - 1n;\nexport const maxUint104 = 2n ** 104n - 1n;\nexport const maxUint112 = 2n ** 112n - 1n;\nexport const maxUint120 = 2n ** 120n - 1n;\nexport const maxUint128 = 2n ** 128n - 1n;\nexport const maxUint136 = 2n ** 136n - 1n;\nexport const maxUint144 = 2n ** 144n - 1n;\nexport const maxUint152 = 2n ** 152n - 1n;\nexport const maxUint160 = 2n ** 160n - 1n;\nexport const maxUint168 = 2n ** 168n - 1n;\nexport const maxUint176 = 2n ** 176n - 1n;\nexport const maxUint184 = 2n ** 184n - 1n;\nexport const maxUint192 = 2n ** 192n - 1n;\nexport const maxUint200 = 2n ** 200n - 1n;\nexport const maxUint208 = 2n ** 208n - 1n;\nexport const maxUint216 = 2n ** 216n - 1n;\nexport const maxUint224 = 2n ** 224n - 1n;\nexport const maxUint232 = 2n ** 232n - 1n;\nexport const maxUint240 = 2n ** 240n - 1n;\nexport const maxUint248 = 2n ** 248n - 1n;\nexport const maxUint256 = 2n ** 256n - 1n;\n//# sourceMappingURL=Solidity.js.map",
    "import * as AbiParameters from '../AbiParameters.js';\nimport * as Address from '../Address.js';\nimport * as Bytes from '../Bytes.js';\nimport * as Errors from '../Errors.js';\nimport * as Hex from '../Hex.js';\nimport { integerRegex } from '../Solidity.js';\n/** @internal */\nexport function decodeParameter(cursor, param, options) {\n    const { checksumAddress, staticPosition } = options;\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return decodeArray(cursor, { ...param, type }, { checksumAddress, length, staticPosition });\n    }\n    if (param.type === 'tuple')\n        return decodeTuple(cursor, param, {\n            checksumAddress,\n            staticPosition,\n        });\n    if (param.type === 'address')\n        return decodeAddress(cursor, { checksum: checksumAddress });\n    if (param.type === 'bool')\n        return decodeBool(cursor);\n    if (param.type.startsWith('bytes'))\n        return decodeBytes(cursor, param, { staticPosition });\n    if (param.type.startsWith('uint') || param.type.startsWith('int'))\n        return decodeNumber(cursor, param);\n    if (param.type === 'string')\n        return decodeString(cursor, { staticPosition });\n    throw new AbiParameters.InvalidTypeError(param.type);\n}\nconst sizeOfLength = 32;\nconst sizeOfOffset = 32;\n/** @internal */\nexport function decodeAddress(cursor, options = {}) {\n    const { checksum = false } = options;\n    const value = cursor.readBytes(32);\n    const wrap = (address) => checksum ? Address.checksum(address) : address;\n    return [wrap(Hex.fromBytes(Bytes.slice(value, -20))), 32];\n}\n/** @internal */\nexport function decodeArray(cursor, param, options) {\n    const { checksumAddress, length, staticPosition } = options;\n    // If the length of the array is not known in advance (dynamic array),\n    // this means we will need to wonder off to the pointer and decode.\n    if (!length) {\n        // Dealing with a dynamic type, so get the offset of the array data.\n        const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of current slot + offset.\n        const start = staticPosition + offset;\n        const startOfData = start + sizeOfLength;\n        // Get the length of the array from the offset.\n        cursor.setPosition(start);\n        const length = Bytes.toNumber(cursor.readBytes(sizeOfLength));\n        // Check if the array has any dynamic children.\n        const dynamicChild = hasDynamicChild(param);\n        let consumed = 0;\n        const value = [];\n        for (let i = 0; i < length; ++i) {\n            // If any of the children is dynamic, then all elements will be offset pointer, thus size of one slot (32 bytes).\n            // Otherwise, elements will be the size of their encoding (consumed bytes).\n            cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed));\n            const [data, consumed_] = decodeParameter(cursor, param, {\n                checksumAddress,\n                staticPosition: startOfData,\n            });\n            consumed += consumed_;\n            value.push(data);\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the length of the array is known in advance,\n    // and the length of an element deeply nested in the array is not known,\n    // we need to decode the offset of the array data.\n    if (hasDynamicChild(param)) {\n        // Dealing with dynamic types, so get the offset of the array data.\n        const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of current slot + offset.\n        const start = staticPosition + offset;\n        const value = [];\n        for (let i = 0; i < length; ++i) {\n            // Move cursor along to the next slot (next offset pointer).\n            cursor.setPosition(start + i * 32);\n            const [data] = decodeParameter(cursor, param, {\n                checksumAddress,\n                staticPosition: start,\n            });\n            value.push(data);\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the length of the array is known in advance and the array is deeply static,\n    // then we can just decode each element in sequence.\n    let consumed = 0;\n    const value = [];\n    for (let i = 0; i < length; ++i) {\n        const [data, consumed_] = decodeParameter(cursor, param, {\n            checksumAddress,\n            staticPosition: staticPosition + consumed,\n        });\n        consumed += consumed_;\n        value.push(data);\n    }\n    return [value, consumed];\n}\n/** @internal */\nexport function decodeBool(cursor) {\n    return [Bytes.toBoolean(cursor.readBytes(32), { size: 32 }), 32];\n}\n/** @internal */\nexport function decodeBytes(cursor, param, { staticPosition }) {\n    const [_, size] = param.type.split('bytes');\n    if (!size) {\n        // Dealing with dynamic types, so get the offset of the bytes data.\n        const offset = Bytes.toNumber(cursor.readBytes(32));\n        // Set position of the cursor to start of bytes data.\n        cursor.setPosition(staticPosition + offset);\n        const length = Bytes.toNumber(cursor.readBytes(32));\n        // If there is no length, we have zero data.\n        if (length === 0) {\n            // As we have gone wondering, restore to the original position + next slot.\n            cursor.setPosition(staticPosition + 32);\n            return ['0x', 32];\n        }\n        const data = cursor.readBytes(length);\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [Hex.fromBytes(data), 32];\n    }\n    const value = Hex.fromBytes(cursor.readBytes(Number.parseInt(size, 10), 32));\n    return [value, 32];\n}\n/** @internal */\nexport function decodeNumber(cursor, param) {\n    const signed = param.type.startsWith('int');\n    const size = Number.parseInt(param.type.split('int')[1] || '256', 10);\n    const value = cursor.readBytes(32);\n    return [\n        size > 48\n            ? Bytes.toBigInt(value, { signed })\n            : Bytes.toNumber(value, { signed }),\n        32,\n    ];\n}\n/** @internal */\nexport function decodeTuple(cursor, param, options) {\n    const { checksumAddress, staticPosition } = options;\n    // Tuples can have unnamed components (i.e. they are arrays), so we must\n    // determine whether the tuple is named or unnamed. In the case of a named\n    // tuple, the value will be an object where each property is the name of the\n    // component. In the case of an unnamed tuple, the value will be an array.\n    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);\n    // Initialize the value to an object or an array, depending on whether the\n    // tuple is named or unnamed.\n    const value = hasUnnamedChild ? [] : {};\n    let consumed = 0;\n    // If the tuple has a dynamic child, we must first decode the offset to the\n    // tuple data.\n    if (hasDynamicChild(param)) {\n        // Dealing with dynamic types, so get the offset of the tuple data.\n        const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset));\n        // Start is the static position of referencing slot + offset.\n        const start = staticPosition + offset;\n        for (let i = 0; i < param.components.length; ++i) {\n            const component = param.components[i];\n            cursor.setPosition(start + consumed);\n            const [data, consumed_] = decodeParameter(cursor, component, {\n                checksumAddress,\n                staticPosition: start,\n            });\n            consumed += consumed_;\n            value[hasUnnamedChild ? i : component?.name] = data;\n        }\n        // As we have gone wondering, restore to the original position + next slot.\n        cursor.setPosition(staticPosition + 32);\n        return [value, 32];\n    }\n    // If the tuple has static children, we can just decode each component\n    // in sequence.\n    for (let i = 0; i < param.components.length; ++i) {\n        const component = param.components[i];\n        const [data, consumed_] = decodeParameter(cursor, component, {\n            checksumAddress,\n            staticPosition,\n        });\n        value[hasUnnamedChild ? i : component?.name] = data;\n        consumed += consumed_;\n    }\n    return [value, consumed];\n}\n/** @internal */\nexport function decodeString(cursor, { staticPosition }) {\n    // Get offset to start of string data.\n    const offset = Bytes.toNumber(cursor.readBytes(32));\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset;\n    cursor.setPosition(start);\n    const length = Bytes.toNumber(cursor.readBytes(32));\n    // If there is no length, we have zero data (empty string).\n    if (length === 0) {\n        cursor.setPosition(staticPosition + 32);\n        return ['', 32];\n    }\n    const data = cursor.readBytes(length, 32);\n    const value = Bytes.toString(Bytes.trimLeft(data));\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32);\n    return [value, 32];\n}\n/** @internal */\nexport function prepareParameters({ checksumAddress, parameters, values, }) {\n    const preparedParameters = [];\n    for (let i = 0; i < parameters.length; i++) {\n        preparedParameters.push(prepareParameter({\n            checksumAddress,\n            parameter: parameters[i],\n            value: values[i],\n        }));\n    }\n    return preparedParameters;\n}\n/** @internal */\nexport function prepareParameter({ checksumAddress = false, parameter: parameter_, value, }) {\n    const parameter = parameter_;\n    const arrayComponents = getArrayComponents(parameter.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return encodeArray(value, {\n            checksumAddress,\n            length,\n            parameter: {\n                ...parameter,\n                type,\n            },\n        });\n    }\n    if (parameter.type === 'tuple') {\n        return encodeTuple(value, {\n            checksumAddress,\n            parameter: parameter,\n        });\n    }\n    if (parameter.type === 'address') {\n        return encodeAddress(value, {\n            checksum: checksumAddress,\n        });\n    }\n    if (parameter.type === 'bool') {\n        return encodeBoolean(value);\n    }\n    if (parameter.type.startsWith('uint') || parameter.type.startsWith('int')) {\n        const signed = parameter.type.startsWith('int');\n        const [, , size = '256'] = integerRegex.exec(parameter.type) ?? [];\n        return encodeNumber(value, {\n            signed,\n            size: Number(size),\n        });\n    }\n    if (parameter.type.startsWith('bytes')) {\n        return encodeBytes(value, { type: parameter.type });\n    }\n    if (parameter.type === 'string') {\n        return encodeString(value);\n    }\n    throw new AbiParameters.InvalidTypeError(parameter.type);\n}\n/** @internal */\nexport function encode(preparedParameters) {\n    // 1. Compute the size of the static part of the parameters.\n    let staticSize = 0;\n    for (let i = 0; i < preparedParameters.length; i++) {\n        const { dynamic, encoded } = preparedParameters[i];\n        if (dynamic)\n            staticSize += 32;\n        else\n            staticSize += Hex.size(encoded);\n    }\n    // 2. Split the parameters into static and dynamic parts.\n    const staticParameters = [];\n    const dynamicParameters = [];\n    let dynamicSize = 0;\n    for (let i = 0; i < preparedParameters.length; i++) {\n        const { dynamic, encoded } = preparedParameters[i];\n        if (dynamic) {\n            staticParameters.push(Hex.fromNumber(staticSize + dynamicSize, { size: 32 }));\n            dynamicParameters.push(encoded);\n            dynamicSize += Hex.size(encoded);\n        }\n        else {\n            staticParameters.push(encoded);\n        }\n    }\n    // 3. Concatenate static and dynamic parts.\n    return Hex.concat(...staticParameters, ...dynamicParameters);\n}\n/** @internal */\nexport function encodeAddress(value, options) {\n    const { checksum = false } = options;\n    Address.assert(value, { strict: checksum });\n    return {\n        dynamic: false,\n        encoded: Hex.padLeft(value.toLowerCase()),\n    };\n}\n/** @internal */\nexport function encodeArray(value, options) {\n    const { checksumAddress, length, parameter } = options;\n    const dynamic = length === null;\n    if (!Array.isArray(value))\n        throw new AbiParameters.InvalidArrayError(value);\n    if (!dynamic && value.length !== length)\n        throw new AbiParameters.ArrayLengthMismatchError({\n            expectedLength: length,\n            givenLength: value.length,\n            type: `${parameter.type}[${length}]`,\n        });\n    let dynamicChild = false;\n    const preparedParameters = [];\n    for (let i = 0; i < value.length; i++) {\n        const preparedParam = prepareParameter({\n            checksumAddress,\n            parameter,\n            value: value[i],\n        });\n        if (preparedParam.dynamic)\n            dynamicChild = true;\n        preparedParameters.push(preparedParam);\n    }\n    if (dynamic || dynamicChild) {\n        const data = encode(preparedParameters);\n        if (dynamic) {\n            const length = Hex.fromNumber(preparedParameters.length, { size: 32 });\n            return {\n                dynamic: true,\n                encoded: preparedParameters.length > 0 ? Hex.concat(length, data) : length,\n            };\n        }\n        if (dynamicChild)\n            return { dynamic: true, encoded: data };\n    }\n    return {\n        dynamic: false,\n        encoded: Hex.concat(...preparedParameters.map(({ encoded }) => encoded)),\n    };\n}\n/** @internal */\nexport function encodeBytes(value, { type }) {\n    const [, parametersize] = type.split('bytes');\n    const bytesSize = Hex.size(value);\n    if (!parametersize) {\n        let value_ = value;\n        // If the size is not divisible by 32 bytes, pad the end\n        // with empty bytes to the ceiling 32 bytes.\n        if (bytesSize % 32 !== 0)\n            value_ = Hex.padRight(value_, Math.ceil((value.length - 2) / 2 / 32) * 32);\n        return {\n            dynamic: true,\n            encoded: Hex.concat(Hex.padLeft(Hex.fromNumber(bytesSize, { size: 32 })), value_),\n        };\n    }\n    if (bytesSize !== Number.parseInt(parametersize, 10))\n        throw new AbiParameters.BytesSizeMismatchError({\n            expectedSize: Number.parseInt(parametersize, 10),\n            value,\n        });\n    return { dynamic: false, encoded: Hex.padRight(value) };\n}\n/** @internal */\nexport function encodeBoolean(value) {\n    if (typeof value !== 'boolean')\n        throw new Errors.BaseError(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`);\n    return { dynamic: false, encoded: Hex.padLeft(Hex.fromBoolean(value)) };\n}\n/** @internal */\nexport function encodeNumber(value, { signed, size }) {\n    if (typeof size === 'number') {\n        const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n;\n        const min = signed ? -max - 1n : 0n;\n        if (value > max || value < min)\n            throw new Hex.IntegerOutOfRangeError({\n                max: max.toString(),\n                min: min.toString(),\n                signed,\n                size: size / 8,\n                value: value.toString(),\n            });\n    }\n    return {\n        dynamic: false,\n        encoded: Hex.fromNumber(value, {\n            size: 32,\n            signed,\n        }),\n    };\n}\n/** @internal */\nexport function encodeString(value) {\n    const hexValue = Hex.fromString(value);\n    const partsLength = Math.ceil(Hex.size(hexValue) / 32);\n    const parts = [];\n    for (let i = 0; i < partsLength; i++) {\n        parts.push(Hex.padRight(Hex.slice(hexValue, i * 32, (i + 1) * 32)));\n    }\n    return {\n        dynamic: true,\n        encoded: Hex.concat(Hex.padRight(Hex.fromNumber(Hex.size(hexValue), { size: 32 })), ...parts),\n    };\n}\n/** @internal */\nexport function encodeTuple(value, options) {\n    const { checksumAddress, parameter } = options;\n    let dynamic = false;\n    const preparedParameters = [];\n    for (let i = 0; i < parameter.components.length; i++) {\n        const param_ = parameter.components[i];\n        const index = Array.isArray(value) ? i : param_.name;\n        const preparedParam = prepareParameter({\n            checksumAddress,\n            parameter: param_,\n            value: value[index],\n        });\n        preparedParameters.push(preparedParam);\n        if (preparedParam.dynamic)\n            dynamic = true;\n    }\n    return {\n        dynamic,\n        encoded: dynamic\n            ? encode(preparedParameters)\n            : Hex.concat(...preparedParameters.map(({ encoded }) => encoded)),\n    };\n}\n/** @internal */\nexport function getArrayComponents(type) {\n    const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n    return matches\n        ? // Return `null` if the array is dynamic.\n            [matches[2] ? Number(matches[2]) : null, matches[1]]\n        : undefined;\n}\n/** @internal */\nexport function hasDynamicChild(param) {\n    const { type } = param;\n    if (type === 'string')\n        return true;\n    if (type === 'bytes')\n        return true;\n    if (type.endsWith('[]'))\n        return true;\n    if (type === 'tuple')\n        return param.components?.some(hasDynamicChild);\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents &&\n        hasDynamicChild({\n            ...param,\n            type: arrayComponents[1],\n        }))\n        return true;\n    return false;\n}\n//# sourceMappingURL=abiParameters.js.map",
    "import * as Errors from '../Errors.js';\nconst staticCursor = {\n    bytes: new Uint8Array(),\n    dataView: new DataView(new ArrayBuffer(0)),\n    position: 0,\n    positionReadCount: new Map(),\n    recursiveReadCount: 0,\n    recursiveReadLimit: Number.POSITIVE_INFINITY,\n    assertReadLimit() {\n        if (this.recursiveReadCount >= this.recursiveReadLimit)\n            throw new RecursiveReadLimitExceededError({\n                count: this.recursiveReadCount + 1,\n                limit: this.recursiveReadLimit,\n            });\n    },\n    assertPosition(position) {\n        if (position < 0 || position > this.bytes.length - 1)\n            throw new PositionOutOfBoundsError({\n                length: this.bytes.length,\n                position,\n            });\n    },\n    decrementPosition(offset) {\n        if (offset < 0)\n            throw new NegativeOffsetError({ offset });\n        const position = this.position - offset;\n        this.assertPosition(position);\n        this.position = position;\n    },\n    getReadCount(position) {\n        return this.positionReadCount.get(position || this.position) || 0;\n    },\n    incrementPosition(offset) {\n        if (offset < 0)\n            throw new NegativeOffsetError({ offset });\n        const position = this.position + offset;\n        this.assertPosition(position);\n        this.position = position;\n    },\n    inspectByte(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position);\n        return this.bytes[position];\n    },\n    inspectBytes(length, position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + length - 1);\n        return this.bytes.subarray(position, position + length);\n    },\n    inspectUint8(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position);\n        return this.bytes[position];\n    },\n    inspectUint16(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 1);\n        return this.dataView.getUint16(position);\n    },\n    inspectUint24(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 2);\n        return ((this.dataView.getUint16(position) << 8) +\n            this.dataView.getUint8(position + 2));\n    },\n    inspectUint32(position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 3);\n        return this.dataView.getUint32(position);\n    },\n    pushByte(byte) {\n        this.assertPosition(this.position);\n        this.bytes[this.position] = byte;\n        this.position++;\n    },\n    pushBytes(bytes) {\n        this.assertPosition(this.position + bytes.length - 1);\n        this.bytes.set(bytes, this.position);\n        this.position += bytes.length;\n    },\n    pushUint8(value) {\n        this.assertPosition(this.position);\n        this.bytes[this.position] = value;\n        this.position++;\n    },\n    pushUint16(value) {\n        this.assertPosition(this.position + 1);\n        this.dataView.setUint16(this.position, value);\n        this.position += 2;\n    },\n    pushUint24(value) {\n        this.assertPosition(this.position + 2);\n        this.dataView.setUint16(this.position, value >> 8);\n        this.dataView.setUint8(this.position + 2, value & ~4294967040);\n        this.position += 3;\n    },\n    pushUint32(value) {\n        this.assertPosition(this.position + 3);\n        this.dataView.setUint32(this.position, value);\n        this.position += 4;\n    },\n    readByte() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectByte();\n        this.position++;\n        return value;\n    },\n    readBytes(length, size) {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectBytes(length);\n        this.position += size ?? length;\n        return value;\n    },\n    readUint8() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint8();\n        this.position += 1;\n        return value;\n    },\n    readUint16() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint16();\n        this.position += 2;\n        return value;\n    },\n    readUint24() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint24();\n        this.position += 3;\n        return value;\n    },\n    readUint32() {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint32();\n        this.position += 4;\n        return value;\n    },\n    get remaining() {\n        return this.bytes.length - this.position;\n    },\n    setPosition(position) {\n        const oldPosition = this.position;\n        this.assertPosition(position);\n        this.position = position;\n        return () => (this.position = oldPosition);\n    },\n    _touch() {\n        if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)\n            return;\n        const count = this.getReadCount();\n        this.positionReadCount.set(this.position, count + 1);\n        if (count > 0)\n            this.recursiveReadCount++;\n    },\n};\n/** @internal */\nexport function create(bytes, { recursiveReadLimit = 8_192 } = {}) {\n    const cursor = Object.create(staticCursor);\n    cursor.bytes = bytes;\n    cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    cursor.positionReadCount = new Map();\n    cursor.recursiveReadLimit = recursiveReadLimit;\n    return cursor;\n}\n/** @internal */\nexport class NegativeOffsetError extends Errors.BaseError {\n    constructor({ offset }) {\n        super(`Offset \\`${offset}\\` cannot be negative.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Cursor.NegativeOffsetError'\n        });\n    }\n}\n/** @internal */\nexport class PositionOutOfBoundsError extends Errors.BaseError {\n    constructor({ length, position }) {\n        super(`Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Cursor.PositionOutOfBoundsError'\n        });\n    }\n}\n/** @internal */\nexport class RecursiveReadLimitExceededError extends Errors.BaseError {\n    constructor({ count, limit }) {\n        super(`Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Cursor.RecursiveReadLimitExceededError'\n        });\n    }\n}\n//# sourceMappingURL=cursor.js.map",
    "import * as abitype from 'abitype';\nimport * as Address from './Address.js';\nimport * as Bytes from './Bytes.js';\nimport * as Errors from './Errors.js';\nimport * as Hex from './Hex.js';\nimport * as internal from './internal/abiParameters.js';\nimport * as Cursor from './internal/cursor.js';\nimport * as Solidity from './Solidity.js';\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decode(parameters, data, options = {}) {\n    const { as = 'Array', checksumAddress = false } = options;\n    const bytes = typeof data === 'string' ? Bytes.fromHex(data) : data;\n    const cursor = Cursor.create(bytes);\n    if (Bytes.size(bytes) === 0 && parameters.length > 0)\n        throw new ZeroDataError();\n    if (Bytes.size(bytes) && Bytes.size(bytes) < 32)\n        throw new DataSizeTooSmallError({\n            data: typeof data === 'string' ? data : Hex.fromBytes(data),\n            parameters: parameters,\n            size: Bytes.size(bytes),\n        });\n    let consumed = 0;\n    const values = as === 'Array' ? [] : {};\n    for (let i = 0; i < parameters.length; ++i) {\n        const param = parameters[i];\n        cursor.setPosition(consumed);\n        const [data, consumed_] = internal.decodeParameter(cursor, param, {\n            checksumAddress,\n            staticPosition: 0,\n        });\n        consumed += consumed_;\n        if (as === 'Array')\n            values.push(data);\n        else\n            values[param.name ?? i] = data;\n    }\n    return values;\n}\n/**\n * Encodes primitive values into ABI encoded data as per the [Application Binary Interface (ABI) Specification](https://docs.soliditylang.org/en/latest/abi-spec).\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.encode(\n *   AbiParameters.from(['string', 'uint', 'bool']),\n *   ['wagmi', 420n, true],\n * )\n * ```\n *\n * @example\n * ### JSON Parameters\n *\n * Specify **JSON ABI** Parameters as schema:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.encode(\n *   [\n *     { type: 'string', name: 'name' },\n *     { type: 'uint', name: 'age' },\n *     { type: 'bool', name: 'isOwner' },\n *   ],\n *   ['wagmi', 420n, true],\n * )\n * ```\n *\n * @param parameters - The set of ABI parameters to encode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\n * @param values - The set of primitive values that correspond to the ABI types defined in `parameters`.\n * @returns ABI encoded data.\n */\nexport function encode(parameters, values, options) {\n    const { checksumAddress = false } = options ?? {};\n    if (parameters.length !== values.length)\n        throw new LengthMismatchError({\n            expectedLength: parameters.length,\n            givenLength: values.length,\n        });\n    // Prepare the parameters to determine dynamic types to encode.\n    const preparedParameters = internal.prepareParameters({\n        checksumAddress,\n        parameters: parameters,\n        values: values,\n    });\n    const data = internal.encode(preparedParameters);\n    if (data.length === 0)\n        return '0x';\n    return data;\n}\n/**\n * Encodes an array of primitive values to a [packed ABI encoding](https://docs.soliditylang.org/en/latest/abi-spec.html#non-standard-packed-mode).\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const encoded = AbiParameters.encodePacked(\n *   ['address', 'string'],\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 'hello world'],\n * )\n * // @log: '0xd8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64'\n * ```\n *\n * @param types - Set of ABI types to pack encode.\n * @param values - The set of primitive values that correspond to the ABI types defined in `types`.\n * @returns The encoded packed data.\n */\nexport function encodePacked(types, values) {\n    if (types.length !== values.length)\n        throw new LengthMismatchError({\n            expectedLength: types.length,\n            givenLength: values.length,\n        });\n    const data = [];\n    for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        const value = values[i];\n        data.push(encodePacked.encode(type, value));\n    }\n    return Hex.concat(...data);\n}\n(function (encodePacked) {\n    // eslint-disable-next-line jsdoc/require-jsdoc\n    function encode(type, value, isArray = false) {\n        if (type === 'address') {\n            const address = value;\n            Address.assert(address);\n            return Hex.padLeft(address.toLowerCase(), isArray ? 32 : 0);\n        }\n        if (type === 'string')\n            return Hex.fromString(value);\n        if (type === 'bytes')\n            return value;\n        if (type === 'bool')\n            return Hex.padLeft(Hex.fromBoolean(value), isArray ? 32 : 1);\n        const intMatch = type.match(Solidity.integerRegex);\n        if (intMatch) {\n            const [_type, baseType, bits = '256'] = intMatch;\n            const size = Number.parseInt(bits, 10) / 8;\n            return Hex.fromNumber(value, {\n                size: isArray ? 32 : size,\n                signed: baseType === 'int',\n            });\n        }\n        const bytesMatch = type.match(Solidity.bytesRegex);\n        if (bytesMatch) {\n            const [_type, size] = bytesMatch;\n            if (Number.parseInt(size, 10) !== (value.length - 2) / 2)\n                throw new BytesSizeMismatchError({\n                    expectedSize: Number.parseInt(size, 10),\n                    value: value,\n                });\n            return Hex.padRight(value, isArray ? 32 : 0);\n        }\n        const arrayMatch = type.match(Solidity.arrayRegex);\n        if (arrayMatch && Array.isArray(value)) {\n            const [_type, childType] = arrayMatch;\n            const data = [];\n            for (let i = 0; i < value.length; i++) {\n                data.push(encode(childType, value[i], true));\n            }\n            if (data.length === 0)\n                return '0x';\n            return Hex.concat(...data);\n        }\n        throw new InvalidTypeError(type);\n    }\n    encodePacked.encode = encode;\n})(encodePacked || (encodePacked = {}));\n/**\n * Formats {@link ox#AbiParameters.AbiParameters} into **Human Readable ABI Parameters**.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const formatted = AbiParameters.format([\n *   {\n *     name: 'spender',\n *     type: 'address',\n *   },\n *   {\n *     name: 'amount',\n *     type: 'uint256',\n *   },\n * ])\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param parameters - The ABI Parameters to format.\n * @returns The formatted ABI Parameters  .\n */\nexport function format(parameters) {\n    return abitype.formatAbiParameters(parameters);\n}\n/**\n * Parses arbitrary **JSON ABI Parameters** or **Human Readable ABI Parameters** into typed {@link ox#AbiParameters.AbiParameters}.\n *\n * @example\n * ### JSON Parameters\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from([\n *   {\n *     name: 'spender',\n *     type: 'address',\n *   },\n *   {\n *     name: 'amount',\n *     type: 'uint256',\n *   },\n * ])\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable Parameters\n *\n * Human Readable ABI Parameters can be parsed into a typed {@link ox#AbiParameters.AbiParameters}:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from('address spender, uint256 amount')\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from([\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\n *   'Foo foo, address bar',\n * ])\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param parameters - The ABI Parameters to parse.\n * @returns The typed ABI Parameters.\n */\nexport function from(parameters) {\n    if (Array.isArray(parameters) && typeof parameters[0] === 'string')\n        return abitype.parseAbiParameters(parameters);\n    if (typeof parameters === 'string')\n        return abitype.parseAbiParameters(parameters);\n    return parameters;\n}\n/**\n * Throws when the data size is too small for the given parameters.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x010f')\n * //                                             ↑ ❌ 2 bytes\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\n * // @error: Params: (uint256)\n * // @error: Data:   0x010f (2 bytes)\n * ```\n *\n * ### Solution\n *\n * Pass a valid data size.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\n * //                                             ↑ ✅ 32 bytes\n * ```\n */\nexport class DataSizeTooSmallError extends Errors.BaseError {\n    constructor({ data, parameters, size, }) {\n        super(`Data size of ${size} bytes is too small for given parameters.`, {\n            metaMessages: [\n                `Params: (${abitype.formatAbiParameters(parameters)})`,\n                `Data:   ${data} (${size} bytes)`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.DataSizeTooSmallError'\n        });\n    }\n}\n/**\n * Throws when zero data is provided, but data is expected.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x')\n * //                                           ↑ ❌ zero data\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\n * // @error: Params: (uint256)\n * // @error: Data:   0x010f (2 bytes)\n * ```\n *\n * ### Solution\n *\n * Pass valid data.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\n * //                                             ↑ ✅ 32 bytes\n * ```\n */\nexport class ZeroDataError extends Errors.BaseError {\n    constructor() {\n        super('Cannot decode zero data (\"0x\") with ABI parameters.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.ZeroDataError'\n        });\n    }\n}\n/**\n * The length of the array value does not match the length specified in the corresponding ABI parameter.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from('uint256[3]'), [[69n, 420n]])\n * //                                               ↑ expected: 3  ↑ ❌ length: 2\n * // @error: AbiParameters.ArrayLengthMismatchError: ABI encoding array length mismatch\n * // @error: for type `uint256[3]`. Expected: `3`. Given: `2`.\n * ```\n *\n * ### Solution\n *\n * Pass an array of the correct length.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [[69n, 420n, 69n]])\n * //                                                         ↑ ✅ length: 3\n * ```\n */\nexport class ArrayLengthMismatchError extends Errors.BaseError {\n    constructor({ expectedLength, givenLength, type, }) {\n        super(`Array length mismatch for type \\`${type}\\`. Expected: \\`${expectedLength}\\`. Given: \\`${givenLength}\\`.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.ArrayLengthMismatchError'\n        });\n    }\n}\n/**\n * The size of the bytes value does not match the size specified in the corresponding ABI parameter.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from('bytes8'), [['0xdeadbeefdeadbeefdeadbeef']])\n * //                                            ↑ expected: 8 bytes  ↑ ❌ size: 12 bytes\n * // @error: BytesSizeMismatchError: Size of bytes \"0xdeadbeefdeadbeefdeadbeef\"\n * // @error: (bytes12) does not match expected size (bytes8).\n * ```\n *\n * ### Solution\n *\n * Pass a bytes value of the correct size.\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['bytes8']), ['0xdeadbeefdeadbeef'])\n * //                                                       ↑ ✅ size: 8 bytes\n * ```\n */\nexport class BytesSizeMismatchError extends Errors.BaseError {\n    constructor({ expectedSize, value, }) {\n        super(`Size of bytes \"${value}\" (bytes${Hex.size(value)}) does not match expected size (bytes${expectedSize}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.BytesSizeMismatchError'\n        });\n    }\n}\n/**\n * The length of the values to encode does not match the length of the ABI parameters.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['string', 'uint256']), ['hello'])\n * // @error: LengthMismatchError: ABI encoding params/values length mismatch.\n * // @error: Expected length (params): 2\n * // @error: Given length (values): 1\n * ```\n *\n * ### Solution\n *\n * Pass the correct number of values to encode.\n *\n * ### Solution\n *\n * Pass a [valid ABI type](https://docs.soliditylang.org/en/develop/abi-spec.html#types).\n */\nexport class LengthMismatchError extends Errors.BaseError {\n    constructor({ expectedLength, givenLength, }) {\n        super([\n            'ABI encoding parameters/values length mismatch.',\n            `Expected length (parameters): ${expectedLength}`,\n            `Given length (values): ${givenLength}`,\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.LengthMismatchError'\n        });\n    }\n}\n/**\n * The value provided is not a valid array as specified in the corresponding ABI parameter.\n *\n * ### Example\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiParameters } from 'ox'\n * // ---cut---\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [69])\n * ```\n *\n * ### Solution\n *\n * Pass an array value.\n */\nexport class InvalidArrayError extends Errors.BaseError {\n    constructor(value) {\n        super(`Value \\`${value}\\` is not a valid array.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.InvalidArrayError'\n        });\n    }\n}\n/**\n * Throws when the ABI parameter type is invalid.\n *\n * @example\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * AbiParameters.decode([{ type: 'lol' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\n * //                             ↑ ❌ invalid type\n * // @error: AbiParameters.InvalidTypeError: Type `lol` is not a valid ABI Type.\n * ```\n */\nexport class InvalidTypeError extends Errors.BaseError {\n    constructor(type) {\n        super(`Type \\`${type}\\` is not a valid ABI Type.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiParameters.InvalidTypeError'\n        });\n    }\n}\n//# sourceMappingURL=AbiParameters.js.map",
    "import * as Bytes from './Bytes.js';\nimport * as Errors from './Errors.js';\nimport * as Hex from './Hex.js';\nimport * as Cursor from './internal/cursor.js';\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toBytes('0x8b68656c6c6f20776f726c64')\n * // Uint8Array([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Bytes.Bytes} value.\n */\nexport function toBytes(value) {\n    return to(value, 'Bytes');\n}\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toHex('0x8b68656c6c6f20776f726c64')\n * // 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Hex.Hex} value.\n */\nexport function toHex(value) {\n    return to(value, 'Hex');\n}\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\n/** @internal */\nexport function to(value, to) {\n    const to_ = to ?? (typeof value === 'string' ? 'Hex' : 'Bytes');\n    const bytes = (() => {\n        if (typeof value === 'string') {\n            if (value.length > 3 && value.length % 2 !== 0)\n                throw new Hex.InvalidLengthError(value);\n            return Bytes.fromHex(value);\n        }\n        return value;\n    })();\n    const cursor = Cursor.create(bytes, {\n        recursiveReadLimit: Number.POSITIVE_INFINITY,\n    });\n    const result = decodeRlpCursor(cursor, to_);\n    return result;\n}\n/** @internal */\n/** @internal */\nexport function decodeRlpCursor(cursor, to = 'Hex') {\n    if (cursor.bytes.length === 0)\n        return (to === 'Hex' ? Hex.fromBytes(cursor.bytes) : cursor.bytes);\n    const prefix = cursor.readByte();\n    if (prefix < 0x80)\n        cursor.decrementPosition(1);\n    // bytes\n    if (prefix < 0xc0) {\n        const length = readLength(cursor, prefix, 0x80);\n        const bytes = cursor.readBytes(length);\n        return (to === 'Hex' ? Hex.fromBytes(bytes) : bytes);\n    }\n    // list\n    const length = readLength(cursor, prefix, 0xc0);\n    return readList(cursor, length, to);\n}\n/** @internal */\nexport function readLength(cursor, prefix, offset) {\n    if (offset === 0x80 && prefix < 0x80)\n        return 1;\n    if (prefix <= offset + 55)\n        return prefix - offset;\n    if (prefix === offset + 55 + 1)\n        return cursor.readUint8();\n    if (prefix === offset + 55 + 2)\n        return cursor.readUint16();\n    if (prefix === offset + 55 + 3)\n        return cursor.readUint24();\n    if (prefix === offset + 55 + 4)\n        return cursor.readUint32();\n    throw new Errors.BaseError('Invalid RLP prefix');\n}\n/** @internal */\nexport function readList(cursor, length, to) {\n    const position = cursor.position;\n    const value = [];\n    while (cursor.position - position < length)\n        value.push(decodeRlpCursor(cursor, to));\n    return value;\n}\n/**\n * Encodes a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.from('0x68656c6c6f20776f726c64', { as: 'Hex' })\n * // @log: 0x8b68656c6c6f20776f726c64\n *\n * Rlp.from(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]), { as: 'Bytes' })\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function from(value, options) {\n    const { as } = options;\n    const encodable = getEncodable(value);\n    const cursor = Cursor.create(new Uint8Array(encodable.length));\n    encodable.encode(cursor);\n    if (as === 'Hex')\n        return Hex.fromBytes(cursor.bytes);\n    return cursor.bytes;\n}\n/**\n * Encodes a {@link ox#Bytes.Bytes} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.fromBytes(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]))\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function fromBytes(bytes, options = {}) {\n    const { as = 'Bytes' } = options;\n    return from(bytes, { as });\n}\n/**\n * Encodes a {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n *\n * Rlp.fromHex('0x68656c6c6f20776f726c64')\n * // @log: 0x8b68656c6c6f20776f726c64\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function fromHex(hex, options = {}) {\n    const { as = 'Hex' } = options;\n    return from(hex, { as });\n}\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\nfunction getEncodable(bytes) {\n    if (Array.isArray(bytes))\n        return getEncodableList(bytes.map((x) => getEncodable(x)));\n    return getEncodableBytes(bytes);\n}\nfunction getEncodableList(list) {\n    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);\n    const sizeOfBodyLength = getSizeOfLength(bodyLength);\n    const length = (() => {\n        if (bodyLength <= 55)\n            return 1 + bodyLength;\n        return 1 + sizeOfBodyLength + bodyLength;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bodyLength <= 55) {\n                cursor.pushByte(0xc0 + bodyLength);\n            }\n            else {\n                cursor.pushByte(0xc0 + 55 + sizeOfBodyLength);\n                if (sizeOfBodyLength === 1)\n                    cursor.pushUint8(bodyLength);\n                else if (sizeOfBodyLength === 2)\n                    cursor.pushUint16(bodyLength);\n                else if (sizeOfBodyLength === 3)\n                    cursor.pushUint24(bodyLength);\n                else\n                    cursor.pushUint32(bodyLength);\n            }\n            for (const { encode } of list) {\n                encode(cursor);\n            }\n        },\n    };\n}\nfunction getEncodableBytes(bytesOrHex) {\n    const bytes = typeof bytesOrHex === 'string' ? Bytes.fromHex(bytesOrHex) : bytesOrHex;\n    const sizeOfBytesLength = getSizeOfLength(bytes.length);\n    const length = (() => {\n        if (bytes.length === 1 && bytes[0] < 0x80)\n            return 1;\n        if (bytes.length <= 55)\n            return 1 + bytes.length;\n        return 1 + sizeOfBytesLength + bytes.length;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bytes.length === 1 && bytes[0] < 0x80) {\n                cursor.pushBytes(bytes);\n            }\n            else if (bytes.length <= 55) {\n                cursor.pushByte(0x80 + bytes.length);\n                cursor.pushBytes(bytes);\n            }\n            else {\n                cursor.pushByte(0x80 + 55 + sizeOfBytesLength);\n                if (sizeOfBytesLength === 1)\n                    cursor.pushUint8(bytes.length);\n                else if (sizeOfBytesLength === 2)\n                    cursor.pushUint16(bytes.length);\n                else if (sizeOfBytesLength === 3)\n                    cursor.pushUint24(bytes.length);\n                else\n                    cursor.pushUint32(bytes.length);\n                cursor.pushBytes(bytes);\n            }\n        },\n    };\n}\nfunction getSizeOfLength(length) {\n    if (length < 2 ** 8)\n        return 1;\n    if (length < 2 ** 16)\n        return 2;\n    if (length < 2 ** 24)\n        return 3;\n    if (length < 2 ** 32)\n        return 4;\n    throw new Errors.BaseError('Length is too large.');\n}\n//# sourceMappingURL=Rlp.js.map",
    "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map",
    "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from \"./utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map",
    "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from \"./modular.js\";\nimport { bitLen, bitMask, validateObject } from \"./utils.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(constTimeNegate(isNeg, precomputes[offset]));\n                }\n            }\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map",
    "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Parameters\n *\n * To initialize a weierstrass curve, one needs to pass following params:\n *\n * * a: formula param\n * * b: formula param\n * * Fp: finite field of prime characteristic P; may be complex (Fp2). Arithmetics is done in field\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * Gx: Base point (x, y) aka generator point. Gx = x coordinate\n * * Gy: ...y coordinate\n * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)\n * * lowS: whether to enable (default) or disable \"low-s\" non-malleable signatures\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// prettier-ignore\nimport { pippenger, validateBasic, wNAF } from \"./curve.js\";\n// prettier-ignore\nimport { Field, FpInvertBatch, getMinHashLength, invert, mapHashToField, mod, validateField } from \"./modular.js\";\n// prettier-ignore\nimport { aInRange, abool, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToBytesBE, numberToHexUnpadded, validateObject } from \"./utils.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowInfinityPoint: 'boolean',\n        allowedPrivateKeyLengths: 'array',\n        clearCofactor: 'function',\n        fromBytes: 'function',\n        isTorsionFree: 'function',\n        toBytes: 'function',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endo: CURVE.a must be 0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\nfunction numToSizedHex(num, size) {\n    return bytesToHex(numberToBytesBE(num, size));\n}\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (isBytes(key))\n                key = bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py) || Fp.is0(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = FpInvertBatch(Fp, points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            /** See docs for {@link EndomorphismOpts} */\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    const { endo, nBitLength } = CURVE;\n    const wnaf = wNAF(Point, endo ? Math.ceil(nBitLength / 2) : nBitLength);\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = bytesToNumberBE(tail);\n                if (!inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aInRange('r', r, _1n, CURVE_ORDER); // r in [1..N]\n            aInRange('s', s, _1n, CURVE_ORDER); // s in [1..N]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig(this);\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            const l = nByteLength;\n            return numToSizedHex(this.r, l) + numToSizedHex(this.s, l);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const len = arr.length;\n        const fpl = Fp.BYTES;\n        const compLen = fpl + 1; // e.g. 33 for 32\n        const uncompLen = 2 * fpl + 1; // e.g. 65 for 32\n        if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {\n            return undefined;\n        }\n        else {\n            return len === compLen || len === uncompLen;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        aInRange('num < 2^' + nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return numberToBytesBE(num, nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map",
    "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map",
    "/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./abstract/utils.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    a: _0n,\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = /* @__PURE__ */ (() => secp256k1.ProjectivePoint)();\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map",
    "import { secp256k1 } from '@noble/curves/secp256k1';\nimport * as Bytes from './Bytes.js';\nimport * as Errors from './Errors.js';\nimport * as Hex from './Hex.js';\nimport * as Json from './Json.js';\nimport * as Solidity from './Solidity.js';\n/**\n * Asserts that a Signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.assert({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @error: InvalidSignatureRError:\n * // @error: Value `-549...n` is an invalid r value.\n * // @error: r must be a positive integer less than 2^256.\n * ```\n *\n * @param signature - The signature object to assert.\n */\nexport function assert(signature, options = {}) {\n    const { recovered } = options;\n    if (typeof signature.r === 'undefined')\n        throw new MissingPropertiesError({ signature });\n    if (typeof signature.s === 'undefined')\n        throw new MissingPropertiesError({ signature });\n    if (recovered && typeof signature.yParity === 'undefined')\n        throw new MissingPropertiesError({ signature });\n    if (signature.r < 0n || signature.r > Solidity.maxUint256)\n        throw new InvalidRError({ value: signature.r });\n    if (signature.s < 0n || signature.s > Solidity.maxUint256)\n        throw new InvalidSError({ value: signature.s });\n    if (typeof signature.yParity === 'number' &&\n        signature.yParity !== 0 &&\n        signature.yParity !== 1)\n        throw new InvalidYParityError({ value: signature.yParity });\n}\n/**\n * Deserializes a {@link ox#Bytes.Bytes} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.fromBytes(new Uint8Array([128, 3, 131, ...]))\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param signature - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nexport function fromBytes(signature) {\n    return fromHex(Hex.fromBytes(signature));\n}\n/**\n * Deserializes a {@link ox#Hex.Hex} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.fromHex('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param serialized - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nexport function fromHex(signature) {\n    if (signature.length !== 130 && signature.length !== 132)\n        throw new InvalidSerializedSizeError({ signature });\n    const r = BigInt(Hex.slice(signature, 0, 32));\n    const s = BigInt(Hex.slice(signature, 32, 64));\n    const yParity = (() => {\n        const yParity = Number(`0x${signature.slice(130)}`);\n        if (Number.isNaN(yParity))\n            return undefined;\n        try {\n            return vToYParity(yParity);\n        }\n        catch {\n            throw new InvalidYParityError({ value: yParity });\n        }\n    })();\n    if (typeof yParity === 'undefined')\n        return {\n            r,\n            s,\n        };\n    return {\n        r,\n        s,\n        yParity,\n    };\n}\n/**\n * Extracts a {@link ox#Signature.Signature} from an arbitrary object that may include signature properties.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.extract({\n *   baz: 'barry',\n *   foo: 'bar',\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n *   zebra: 'stripes',\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @param value - The arbitrary object to extract the signature from.\n * @returns The extracted {@link ox#Signature.Signature}.\n */\nexport function extract(value) {\n    if (typeof value.r === 'undefined')\n        return undefined;\n    if (typeof value.s === 'undefined')\n        return undefined;\n    return from(value);\n}\n/**\n * Instantiates a typed {@link ox#Signature.Signature} object from a {@link ox#Signature.Signature}, {@link ox#Signature.Legacy}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db801')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @example\n * ### From Legacy\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n *   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n *   v: 27,\n * })\n * // @log: {\n * // @log:   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n * // @log:   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n * // @log:   yParity: 0\n * // @log: }\n * ```\n *\n * @param signature - The signature value to instantiate.\n * @returns The instantiated {@link ox#Signature.Signature}.\n */\nexport function from(signature) {\n    const signature_ = (() => {\n        if (typeof signature === 'string')\n            return fromHex(signature);\n        if (signature instanceof Uint8Array)\n            return fromBytes(signature);\n        if (typeof signature.r === 'string')\n            return fromRpc(signature);\n        if (signature.v)\n            return fromLegacy(signature);\n        return {\n            r: signature.r,\n            s: signature.s,\n            ...(typeof signature.yParity !== 'undefined'\n                ? { yParity: signature.yParity }\n                : {}),\n        };\n    })();\n    assert(signature_);\n    return signature_;\n}\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerBytes(new Uint8Array([132, 51, 23, ...]))\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromDerBytes(signature) {\n    return fromDerHex(Hex.fromBytes(signature));\n}\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerHex('0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromDerHex(signature) {\n    const { r, s } = secp256k1.Signature.fromDER(Hex.from(signature).slice(2));\n    return { r, s };\n}\n/**\n * Converts a {@link ox#Signature.Legacy} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.fromLegacy({ r: 1n, s: 2n, v: 28 })\n * // @log: { r: 1n, s: 2n, yParity: 1 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Legacy} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nexport function fromLegacy(signature) {\n    return {\n        r: signature.r,\n        s: signature.s,\n        yParity: vToYParity(signature.v),\n    };\n}\n/**\n * Converts a {@link ox#Signature.Rpc} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromRpc({\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Rpc} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nexport function fromRpc(signature) {\n    const yParity = (() => {\n        const v = signature.v ? Number(signature.v) : undefined;\n        let yParity = signature.yParity ? Number(signature.yParity) : undefined;\n        if (typeof v === 'number' && typeof yParity !== 'number')\n            yParity = vToYParity(v);\n        if (typeof yParity !== 'number')\n            throw new InvalidYParityError({ value: signature.yParity });\n        return yParity;\n    })();\n    return {\n        r: BigInt(signature.r),\n        s: BigInt(signature.s),\n        yParity,\n    };\n}\n/**\n * Converts a {@link ox#Signature.Tuple} to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromTuple(['0x01', '0x7b', '0x1c8'])\n * // @log: {\n * // @log:   r: 123n,\n * // @log:   s: 456n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @param tuple - The {@link ox#Signature.Tuple} to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromTuple(tuple) {\n    const [yParity, r, s] = tuple;\n    return from({\n        r: r === '0x' ? 0n : BigInt(r),\n        s: s === '0x' ? 0n : BigInt(s),\n        yParity: yParity === '0x' ? 0 : Number(yParity),\n    });\n}\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toBytes({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: Uint8Array [102, 16, 10, ...]\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nexport function toBytes(signature) {\n    return Bytes.fromHex(toHex(signature));\n}\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toHex({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c'\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nexport function toHex(signature) {\n    assert(signature);\n    const r = signature.r;\n    const s = signature.s;\n    const signature_ = Hex.concat(Hex.fromNumber(r, { size: 32 }), Hex.fromNumber(s, { size: 32 }), \n    // If the signature is recovered, add the recovery byte to the signature.\n    typeof signature.yParity === 'number'\n        ? Hex.fromNumber(yParityToV(signature.yParity), { size: 1 })\n        : '0x');\n    return signature_;\n}\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerBytes(signature)\n * // @log: Uint8Array [132, 51, 23, ...]\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nexport function toDerBytes(signature) {\n    const sig = new secp256k1.Signature(signature.r, signature.s);\n    return sig.toDERRawBytes();\n}\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerHex(signature)\n * // @log: '0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8'\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nexport function toDerHex(signature) {\n    const sig = new secp256k1.Signature(signature.r, signature.s);\n    return `0x${sig.toDERHex()}`;\n}\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Legacy}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.toLegacy({ r: 1n, s: 2n, yParity: 1 })\n * // @log: { r: 1n, s: 2n, v: 28 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Legacy}.\n */\nexport function toLegacy(signature) {\n    return {\n        r: signature.r,\n        s: signature.s,\n        v: yParityToV(signature.yParity),\n    };\n}\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toRpc({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Rpc}.\n */\nexport function toRpc(signature) {\n    const { r, s, yParity } = signature;\n    return {\n        r: Hex.fromNumber(r, { size: 32 }),\n        s: Hex.fromNumber(s, { size: 32 }),\n        yParity: yParity === 0 ? '0x0' : '0x1',\n    };\n}\n/**\n * Converts a {@link ox#Signature.Signature} to a serialized {@link ox#Signature.Tuple} to be used for signatures in Transaction Envelopes, EIP-7702 Authorization Lists, etc.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signatureTuple = Signature.toTuple({\n *   r: 123n,\n *   s: 456n,\n *   yParity: 1,\n * })\n * // @log: [yParity: '0x01', r: '0x7b', s: '0x1c8']\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The {@link ox#Signature.Tuple}.\n */\nexport function toTuple(signature) {\n    const { r, s, yParity } = signature;\n    return [\n        yParity ? '0x01' : '0x',\n        r === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(r)),\n        s === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(s)),\n    ];\n}\n/**\n * Validates a Signature. Returns `true` if the signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const valid = Signature.validate({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: false\n * ```\n *\n * @param signature - The signature object to assert.\n */\nexport function validate(signature, options = {}) {\n    try {\n        assert(signature, options);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const yParity = Signature.vToYParity(28)\n * // @log: 1\n * ```\n *\n * @param v - The ECDSA `v` value to convert.\n * @returns The `yParity` value.\n */\nexport function vToYParity(v) {\n    if (v === 0 || v === 27)\n        return 0;\n    if (v === 1 || v === 28)\n        return 1;\n    if (v >= 35)\n        return v % 2 === 0 ? 1 : 0;\n    throw new InvalidVError({ value: v });\n}\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const v = Signature.yParityToV(1)\n * // @log: 28\n * ```\n *\n * @param yParity - The ECDSA `yParity` value to convert.\n * @returns The `v` value.\n */\nexport function yParityToV(yParity) {\n    if (yParity === 0)\n        return 27;\n    if (yParity === 1)\n        return 28;\n    throw new InvalidYParityError({ value: yParity });\n}\n/** Thrown when the serialized signature is of an invalid size. */\nexport class InvalidSerializedSizeError extends Errors.BaseError {\n    constructor({ signature }) {\n        super(`Value \\`${signature}\\` is an invalid signature size.`, {\n            metaMessages: [\n                'Expected: 64 bytes or 65 bytes.',\n                `Received ${Hex.size(Hex.from(signature))} bytes.`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidSerializedSizeError'\n        });\n    }\n}\n/** Thrown when the signature is missing either an `r`, `s`, or `yParity` property. */\nexport class MissingPropertiesError extends Errors.BaseError {\n    constructor({ signature }) {\n        super(`Signature \\`${Json.stringify(signature)}\\` is missing either an \\`r\\`, \\`s\\`, or \\`yParity\\` property.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.MissingPropertiesError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `r` value. */\nexport class InvalidRError extends Errors.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid r value. r must be a positive integer less than 2^256.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidRError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `s` value. */\nexport class InvalidSError extends Errors.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid s value. s must be a positive integer less than 2^256.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidSError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `yParity` value. */\nexport class InvalidYParityError extends Errors.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid y-parity value. Y-parity must be 0 or 1.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidYParityError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `v` value. */\nexport class InvalidVError extends Errors.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid v value. v must be 27, 28 or >=35.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidVError'\n        });\n    }\n}\n//# sourceMappingURL=Signature.js.map",
    "import * as Hash from './Hash.js';\nimport * as Hex from './Hex.js';\nimport * as Rlp from './Rlp.js';\nimport * as Signature from './Signature.js';\n/**\n * Converts an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization object into a typed {@link ox#Authorization.Authorization}.\n *\n * @example\n * An Authorization can be instantiated from an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * A {@link ox#Signature.Signature} can be attached with the `signature` option. The example below demonstrates signing\n * an Authorization with {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   chainId: 1,\n *   nonce: 40n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorization_signed = Authorization.from(authorization, { signature }) // [!code focus]\n * ```\n *\n * @param authorization - An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n * @param options - Authorization options.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nexport function from(authorization, options = {}) {\n    if (typeof authorization.chainId === 'string')\n        return fromRpc(authorization);\n    return { ...authorization, ...options.signature };\n}\n/**\n * Converts an {@link ox#Authorization.Rpc} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param authorization - The RPC-formatted Authorization.\n * @returns A signed {@link ox#Authorization.Authorization}.\n */\nexport function fromRpc(authorization) {\n    const { address, chainId, nonce } = authorization;\n    const signature = Signature.extract(authorization);\n    return {\n        address,\n        chainId: Number(chainId),\n        nonce: BigInt(nonce),\n        ...signature,\n    };\n}\n/**\n * Converts an {@link ox#Authorization.ListRpc} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * }])\n * ```\n *\n * @param authorizationList - The RPC-formatted Authorization list.\n * @returns A signed {@link ox#Authorization.List}.\n */\nexport function fromRpcList(authorizationList) {\n    return authorizationList.map(fromRpc);\n}\n/**\n * Converts an {@link ox#Authorization.Tuple} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3'\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log: }\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3',\n *   '0x1',\n *   '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log:   r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:   s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @param tuple - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nexport function fromTuple(tuple) {\n    const [chainId, address, nonce, yParity, r, s] = tuple;\n    let args = {\n        address,\n        chainId: chainId === '0x' ? 0 : Number(chainId),\n        nonce: nonce === '0x' ? 0n : BigInt(nonce),\n    };\n    if (yParity && r && s)\n        args = { ...args, ...Signature.fromTuple([yParity, r, s]) };\n    return from(args);\n}\n/**\n * Converts an {@link ox#Authorization.TupleList} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param tupleList - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n * @returns An {@link ox#Authorization.List}.\n */\nexport function fromTupleList(tupleList) {\n    const list = [];\n    for (const tuple of tupleList)\n        list.push(fromTuple(tuple));\n    return list;\n}\n/**\n * Computes the sign payload for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * The example below demonstrates computing the sign payload for an {@link ox#Authorization.Authorization}. This payload\n * can then be passed to signing functions like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const payload = Authorization.getSignPayload(authorization) // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload,\n *   privateKey: '0x...',\n * })\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The sign payload.\n */\nexport function getSignPayload(authorization) {\n    return hash(authorization, { presign: true });\n}\n/**\n * Computes the hash for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const hash = Authorization.hash(authorization) // [!code focus]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The hash.\n */\nexport function hash(authorization, options = {}) {\n    const { presign } = options;\n    return Hash.keccak256(Hex.concat('0x05', Rlp.fromHex(toTuple(presign\n        ? {\n            address: authorization.address,\n            chainId: authorization.chainId,\n            nonce: authorization.nonce,\n        }\n        : authorization))));\n}\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param authorization - An Authorization.\n * @returns An RPC-formatted Authorization.\n */\nexport function toRpc(authorization) {\n    const { address, chainId, nonce, ...signature } = authorization;\n    return {\n        address,\n        chainId: Hex.fromNumber(chainId),\n        nonce: Hex.fromNumber(nonce),\n        ...Signature.toRpc(signature),\n    };\n}\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.ListRpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * }])\n * ```\n *\n * @param authorizationList - An Authorization List.\n * @returns An RPC-formatted Authorization List.\n */\nexport function toRpcList(authorizationList) {\n    return authorizationList.map(toRpc);\n}\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Tuple}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const tuple = Authorization.toTuple(authorization) // [!code focus]\n * // @log: [\n * // @log:   address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:   chainId: 1,\n * // @log:   nonce: 69n,\n * // @log: ]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n */\nexport function toTuple(authorization) {\n    const { address, chainId, nonce } = authorization;\n    const signature = Signature.extract(authorization);\n    return [\n        chainId ? Hex.fromNumber(chainId) : '0x',\n        address,\n        nonce ? Hex.fromNumber(nonce) : '0x',\n        ...(signature ? Signature.toTuple(signature) : []),\n    ];\n}\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.TupleList}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization_1 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * const authorization_2 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 3,\n *   nonce: 20n,\n * })\n *\n * const tuple = Authorization.toTupleList([authorization_1, authorization_2]) // [!code focus]\n * // @log: [\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 1,\n * // @log:     nonce: 69n,\n * // @log:   ],\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param list - An {@link ox#Authorization.List}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n */\nexport function toTupleList(list) {\n    if (!list || list.length === 0)\n        return [];\n    const tupleList = [];\n    for (const authorization of list)\n        tupleList.push(toTuple(authorization));\n    return tupleList;\n}\n//# sourceMappingURL=Authorization.js.map",
    "import { secp256k1 } from '@noble/curves/secp256k1';\nimport * as Address from './Address.js';\nimport * as Bytes from './Bytes.js';\nimport * as Hex from './Hex.js';\nimport * as Entropy from './internal/entropy.js';\nimport * as PublicKey from './PublicKey.js';\n/** Re-export of noble/curves secp256k1 utilities. */\nexport const noble = secp256k1;\n/**\n * Creates a new secp256k1 ECDSA key pair consisting of a private key and its corresponding public key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const { privateKey, publicKey } = Secp256k1.createKeyPair()\n * ```\n *\n * @param options - The options to generate the key pair.\n * @returns The generated key pair containing both private and public keys.\n */\nexport function createKeyPair(options = {}) {\n    const { as = 'Hex' } = options;\n    const privateKey = randomPrivateKey({ as });\n    const publicKey = getPublicKey({ privateKey });\n    return {\n        privateKey: privateKey,\n        publicKey,\n    };\n}\n/**\n * Computes the secp256k1 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const publicKey = Secp256k1.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nexport function getPublicKey(options) {\n    const { privateKey } = options;\n    const point = secp256k1.ProjectivePoint.fromPrivateKey(Hex.from(privateKey).slice(2));\n    return PublicKey.from(point);\n}\n/**\n * Computes a shared secret using ECDH (Elliptic Curve Diffie-Hellman) between a private key and a public key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const { privateKey: privateKeyA } = Secp256k1.createKeyPair()\n * const { publicKey: publicKeyB } = Secp256k1.createKeyPair()\n *\n * const sharedSecret = Secp256k1.getSharedSecret({\n *   privateKey: privateKeyA,\n *   publicKey: publicKeyB\n * })\n * ```\n *\n * @param options - The options to compute the shared secret.\n * @returns The computed shared secret.\n */\nexport function getSharedSecret(options) {\n    const { as = 'Hex', privateKey, publicKey } = options;\n    const point = secp256k1.ProjectivePoint.fromHex(PublicKey.toHex(publicKey).slice(2));\n    const sharedPoint = point.multiply(secp256k1.utils.normPrivateKeyToScalar(Hex.from(privateKey).slice(2)));\n    const sharedSecret = sharedPoint.toRawBytes(true); // compressed format\n    if (as === 'Hex')\n        return Hex.fromBytes(sharedSecret);\n    return sharedSecret;\n}\n/**\n * Generates a random ECDSA private key on the secp256k1 curve.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nexport function randomPrivateKey(options = {}) {\n    const { as = 'Hex' } = options;\n    const bytes = secp256k1.utils.randomPrivateKey();\n    if (as === 'Hex')\n        return Hex.fromBytes(bytes);\n    return bytes;\n}\n/**\n * Recovers the signing address from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const address = Secp256k1.recoverAddress({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered address.\n */\nexport function recoverAddress(options) {\n    return Address.fromPublicKey(recoverPublicKey(options));\n}\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = Secp256k1.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nexport function recoverPublicKey(options) {\n    const { payload, signature } = options;\n    const { r, s, yParity } = signature;\n    const signature_ = new secp256k1.Signature(BigInt(r), BigInt(s)).addRecoveryBit(yParity);\n    const point = signature_.recoverPublicKey(Hex.from(payload).substring(2));\n    return PublicKey.from(point);\n}\n/**\n * Signs the payload with the provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nexport function sign(options) {\n    const { extraEntropy = Entropy.extraEntropy, hash, payload, privateKey, } = options;\n    const { r, s, recovery } = secp256k1.sign(Bytes.from(payload), Bytes.from(privateKey), {\n        extraEntropy: typeof extraEntropy === 'boolean'\n            ? extraEntropy\n            : Hex.from(extraEntropy).slice(2),\n        lowS: true,\n        ...(hash ? { prehash: true } : {}),\n    });\n    return {\n        r,\n        s,\n        yParity: recovery,\n    };\n}\n/**\n * Verifies a payload was signed by the provided address.\n *\n * @example\n * ### Verify with Ethereum Address\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify with Public Key\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = '0x...'\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided address.\n */\nexport function verify(options) {\n    const { address, hash, payload, publicKey, signature } = options;\n    if (address)\n        return Address.isEqual(address, recoverAddress({ payload, signature }));\n    return secp256k1.verify(signature, Bytes.from(payload), PublicKey.toBytes(publicKey), ...(hash ? [{ prehash: true, lowS: true }] : []));\n}\n//# sourceMappingURL=Secp256k1.js.map",
    "import * as AbiParameters from '../core/AbiParameters.js';\nimport * as Authorization from '../core/Authorization.js';\nimport * as Errors from '../core/Errors.js';\nimport * as Hex from '../core/Hex.js';\nimport * as Secp256k1 from '../core/Secp256k1.js';\nimport * as Signature from '../core/Signature.js';\n/**\n * Magic bytes used to identify ERC-8010 wrapped signatures.\n */\nexport const magicBytes = '0x8010801080108010801080108010801080108010801080108010801080108010';\n/** Suffix ABI parameters for the ERC-8010 wrapped signature. */\nexport const suffixParameters = AbiParameters.from('(uint256 chainId, address delegation, uint256 nonce, uint8 yParity, uint256 r, uint256 s), address to, bytes data');\n/**\n * Asserts that the wrapped signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc8010 } from 'ox/erc8010'\n *\n * SignatureErc8010.assert('0xdeadbeef')\n * // @error: InvalidWrappedSignatureError: Value `0xdeadbeef` is an invalid ERC-8010 wrapped signature.\n * ```\n *\n * @param value - The value to assert.\n */\nexport function assert(value) {\n    if (typeof value === 'string') {\n        if (Hex.slice(value, -32) !== magicBytes)\n            throw new InvalidWrappedSignatureError(value);\n    }\n    else\n        Signature.assert(value.authorization);\n}\n/**\n * Parses an [ERC-8010 wrapped signature](https://github.com/jxom/ERCs/blob/16f7e3891fff2e1e9c25dea0485497739db8a816/ERCS/erc-8010.md) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1 } from 'ox'\n * import { SignatureErc8010 } from 'ox/erc8010' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * // Instantiate from serialized format. // [!code focus]\n * const wrapped = SignatureErc8010.from('0x...') // [!code focus]\n * // @log: { authorization: { ... }, data: '0x...', signature: { ... } } // [!code focus]\n *\n * // Instantiate from constituent parts. // [!code focus]\n * const wrapped = SignatureErc8010.from({ // [!code focus]\n *   authorization: { ... }, // [!code focus]\n *   data: '0x...', // [!code focus]\n *   signature, // [!code focus]\n * })\n * // @log: { authorization: { ... }, data: '0x...', signature: { ... } }\n * ```\n *\n * @param value - Value to parse.\n * @returns Parsed value.\n */\nexport function from(value) {\n    if (typeof value === 'string')\n        return unwrap(value);\n    return value;\n}\n/**\n * Unwraps an [ERC-8010 wrapped signature](https://github.com/jxom/ERCs/blob/16f7e3891fff2e1e9c25dea0485497739db8a816/ERCS/erc-8010.md) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc8010 } from 'ox/erc8010'\n *\n * const { authorization, data, signature } = SignatureErc8010.unwrap('0x...')\n * ```\n *\n * @param wrapped - Wrapped signature to unwrap.\n * @returns Unwrapped signature.\n */\nexport function unwrap(wrapped) {\n    assert(wrapped);\n    const suffixLength = Hex.toNumber(Hex.slice(wrapped, -64, -32));\n    const suffix = Hex.slice(wrapped, -suffixLength - 64, -64);\n    const signature = Hex.slice(wrapped, 0, -suffixLength - 64);\n    const [auth, to, data] = AbiParameters.decode(suffixParameters, suffix);\n    const authorization = Authorization.from({\n        address: auth.delegation,\n        chainId: Number(auth.chainId),\n        nonce: auth.nonce,\n        yParity: auth.yParity,\n        r: auth.r,\n        s: auth.s,\n    });\n    return {\n        authorization,\n        signature,\n        ...(data && data !== '0x' ? { data, to } : {}),\n    };\n}\n/**\n * Wraps a signature into [ERC-8010 format](https://github.com/jxom/ERCs/blob/16f7e3891fff2e1e9c25dea0485497739db8a816/ERCS/erc-8010.md).\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, Signature } from 'ox'\n * import { SignatureErc8010 } from 'ox/erc8010' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * const wrapped = SignatureErc8010.wrap({ // [!code focus]\n *   authorization: { ... }, // [!code focus]\n *   data: '0xdeadbeef', // [!code focus]\n *   signature: Signature.toHex(signature), // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param value - Values to wrap.\n * @returns Wrapped signature.\n */\nexport function wrap(value) {\n    const { data, signature } = value;\n    assert(value);\n    const self = Secp256k1.recoverAddress({\n        payload: Authorization.getSignPayload(value.authorization),\n        signature: Signature.from(value.authorization),\n    });\n    const suffix = AbiParameters.encode(suffixParameters, [\n        {\n            ...value.authorization,\n            delegation: value.authorization.address,\n            chainId: BigInt(value.authorization.chainId),\n        },\n        value.to ?? self,\n        data ?? '0x',\n    ]);\n    const suffixLength = Hex.fromNumber(Hex.size(suffix), { size: 32 });\n    return Hex.concat(signature, suffix, suffixLength, magicBytes);\n}\n/**\n * Validates a wrapped signature. Returns `true` if the wrapped signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc8010 } from 'ox/erc8010'\n *\n * const valid = SignatureErc8010.validate('0xdeadbeef')\n * // @log: false\n * ```\n *\n * @param value - The value to validate.\n * @returns `true` if the value is valid, `false` otherwise.\n */\nexport function validate(value) {\n    try {\n        assert(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/** Thrown when the ERC-8010 wrapped signature is invalid. */\nexport class InvalidWrappedSignatureError extends Errors.BaseError {\n    constructor(wrapped) {\n        super(`Value \\`${wrapped}\\` is an invalid ERC-8010 wrapped signature.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SignatureErc8010.InvalidWrappedSignatureError'\n        });\n    }\n}\n//# sourceMappingURL=SignatureErc8010.js.map",
    "/**\n * Utility functions for working with [ERC-8010 wrapped signatures](https://eips.ethereum.org/EIPS/eip-8010#specification).\n *\n * @example\n * ```ts twoslash\n * import { Authorization, PersonalMessage, Secp256k1, Signature } from 'ox'\n * import { SignatureErc8010 } from 'ox/erc8010' // [!code focus]\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const authorizationSignature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationSigned = Authorization.from(authorization, {\n *   signature: authorizationSignature,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: PersonalMessage.getSignPayload('0xdeadbeef'),\n *   privateKey: '0x...',\n * })\n *\n * const wrapped = SignatureErc8010.wrap({ // [!code focus]\n *   authorization: authorizationSigned, // [!code focus]\n *   data: '0xcafebabe', // [!code focus]\n *   signature: Signature.toHex(signature), // [!code focus]\n * }) // [!code focus]\n * // @log: '0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041fa78c5905fb0b9d6066ef531f962a62bc6ef0d5eb59ecb134056d206f75aaed7780926ff2601a935c2c79707d9e1799948c9f19dcdde1e090e903b19a07923d01c000000000000000000000000000000000000000000000000000000000000008010801080108010801080108010801080108010801080108010801080108010'\n * ```\n *\n * @category ERC-8010\n */\nexport * as SignatureErc8010 from './SignatureErc8010.js';\n//# sourceMappingURL=index.js.map",
    "import { BaseError } from './base.js';\nexport class InvalidDecimalNumberError extends BaseError {\n    constructor({ value }) {\n        super(`Number \\`${value}\\` is not a valid decimal number.`, {\n            name: 'InvalidDecimalNumberError',\n        });\n    }\n}\n//# sourceMappingURL=unit.js.map",
    "import { InvalidDecimalNumberError } from '../../errors/unit.js';\n/**\n * Multiplies a string representation of a number by a given exponent of base 10 (10exponent).\n *\n * - Docs: https://viem.sh/docs/utilities/parseUnits\n *\n * @example\n * import { parseUnits } from 'viem'\n *\n * parseUnits('420', 9)\n * // 420000000000n\n */\nexport function parseUnits(value, decimals) {\n    if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n        throw new InvalidDecimalNumberError({ value });\n    let [integer, fraction = '0'] = value.split('.');\n    const negative = integer.startsWith('-');\n    if (negative)\n        integer = integer.slice(1);\n    // trim trailing zeros.\n    fraction = fraction.replace(/(0+)$/, '');\n    // round off if the fraction is larger than the number of decimals.\n    if (decimals === 0) {\n        if (Math.round(Number(`.${fraction}`)) === 1)\n            integer = `${BigInt(integer) + 1n}`;\n        fraction = '';\n    }\n    else if (fraction.length > decimals) {\n        const [left, unit, right] = [\n            fraction.slice(0, decimals - 1),\n            fraction.slice(decimals - 1, decimals),\n            fraction.slice(decimals),\n        ];\n        const rounded = Math.round(Number(`${unit}.${right}`));\n        if (rounded > 9)\n            fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');\n        else\n            fraction = `${left}${rounded}`;\n        if (fraction.length > decimals) {\n            fraction = fraction.slice(1);\n            integer = `${BigInt(integer) + 1n}`;\n        }\n        fraction = fraction.slice(0, decimals);\n    }\n    else {\n        fraction = fraction.padEnd(decimals, '0');\n    }\n    return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n}\n//# sourceMappingURL=parseUnits.js.map",
    "import { etherUnits } from '../../constants/unit.js';\nimport { parseUnits } from './parseUnits.js';\n/**\n * Converts a string representation of ether to numerical wei.\n *\n * - Docs: https://viem.sh/docs/utilities/parseEther\n *\n * @example\n * import { parseEther } from 'viem'\n *\n * parseEther('420')\n * // 420000000000000000000n\n */\nexport function parseEther(ether, unit = 'wei') {\n    return parseUnits(ether, etherUnits[unit]);\n}\n//# sourceMappingURL=parseEther.js.map",
    "// biome-ignore lint/performance/noBarrelFile: entrypoint module\nexport { parseAbi, parseAbiItem, parseAbiParameter, parseAbiParameters, } from 'abitype';\nexport { parseAccount, } from '../accounts/utils/parseAccount.js';\nexport { publicKeyToAddress, } from '../accounts/utils/publicKeyToAddress.js';\nexport { decodeAbiParameters, } from './abi/decodeAbiParameters.js';\nexport { decodeErrorResult, } from './abi/decodeErrorResult.js';\nexport { decodeEventLog, } from './abi/decodeEventLog.js';\nexport { decodeFunctionData, } from './abi/decodeFunctionData.js';\nexport { decodeFunctionResult, } from './abi/decodeFunctionResult.js';\nexport { encodeAbiParameters, } from './abi/encodeAbiParameters.js';\nexport { encodeDeployData, } from './abi/encodeDeployData.js';\nexport { encodeErrorResult, } from './abi/encodeErrorResult.js';\nexport { encodeEventTopics, } from './abi/encodeEventTopics.js';\nexport { encodeFunctionData, } from './abi/encodeFunctionData.js';\nexport { encodeFunctionResult, } from './abi/encodeFunctionResult.js';\nexport { encodePacked } from './abi/encodePacked.js';\nexport { formatAbiItem, formatAbiParams, } from './abi/formatAbiItem.js';\nexport { formatAbiItemWithArgs, } from './abi/formatAbiItemWithArgs.js';\nexport { getAbiItem, } from './abi/getAbiItem.js';\nexport { parseEventLogs, } from './abi/parseEventLogs.js';\nexport { getAddress, } from './address/getAddress.js';\nexport { getContractAddress, getCreate2Address, getCreateAddress, } from './address/getContractAddress.js';\nexport { isAddress } from './address/isAddress.js';\nexport { isAddressEqual, } from './address/isAddressEqual.js';\nexport { hashAuthorization, } from './authorization/hashAuthorization.js';\nexport { recoverAuthorizationAddress, } from './authorization/recoverAuthorizationAddress.js';\nexport { serializeAuthorizationList, } from './authorization/serializeAuthorizationList.js';\nexport { verifyAuthorization, } from './authorization/verifyAuthorization.js';\nexport { buildRequest, } from './buildRequest.js';\nexport { ccipRequest, \n/** @deprecated Use `ccipRequest`. */\nccipRequest as ccipFetch, offchainLookup, offchainLookupAbiItem, offchainLookupSignature, } from './ccip.js';\nexport { assertCurrentChain, } from './chain/assertCurrentChain.js';\nexport { defineChain } from './chain/defineChain.js';\nexport { extractChain, } from './chain/extractChain.js';\nexport { getChainContractAddress, } from './chain/getChainContractAddress.js';\nexport { concat, concatBytes, concatHex, } from './data/concat.js';\nexport { isBytes } from './data/isBytes.js';\nexport { isHex } from './data/isHex.js';\nexport { pad, padBytes, padHex, } from './data/pad.js';\nexport { size } from './data/size.js';\nexport { slice, sliceBytes, sliceHex, } from './data/slice.js';\nexport { trim } from './data/trim.js';\nexport { bytesToBigInt, bytesToBigInt as bytesToBigint, bytesToBool, bytesToNumber, bytesToString, fromBytes, } from './encoding/fromBytes.js';\nexport { fromHex, hexToBigInt, hexToBool, hexToNumber, hexToString, } from './encoding/fromHex.js';\nexport { fromRlp, } from './encoding/fromRlp.js';\nexport { boolToBytes, hexToBytes, numberToBytes, stringToBytes, toBytes, } from './encoding/toBytes.js';\nexport { boolToHex, bytesToHex, numberToHex, stringToHex, toHex, } from './encoding/toHex.js';\nexport { toRlp, } from './encoding/toRlp.js';\nexport { getCallError, } from './errors/getCallError.js';\nexport { getContractError, } from './errors/getContractError.js';\nexport { getEstimateGasError, } from './errors/getEstimateGasError.js';\nexport { containsNodeError, getNodeError, } from './errors/getNodeError.js';\nexport { getTransactionError, } from './errors/getTransactionError.js';\nexport { defineBlock, formatBlock, } from './formatters/block.js';\nexport { extract } from './formatters/extract.js';\nexport { defineFormatter, } from './formatters/formatter.js';\nexport { formatLog } from './formatters/log.js';\nexport { defineTransaction, formatTransaction, transactionType, } from './formatters/transaction.js';\nexport { defineTransactionReceipt, } from './formatters/transactionReceipt.js';\nexport { defineTransactionRequest, formatTransactionRequest, } from './formatters/transactionRequest.js';\nexport { getAction } from './getAction.js';\nexport { isHash } from './hash/isHash.js';\nexport { keccak256 } from './hash/keccak256.js';\nexport { ripemd160 } from './hash/ripemd160.js';\nexport { sha256 } from './hash/sha256.js';\nexport { toEventHash, } from './hash/toEventHash.js';\nexport { toEventSelector, \n/** @deprecated use `toEventSelector`. */\ntoEventSelector as getEventSelector, } from './hash/toEventSelector.js';\nexport { toEventSignature, \n/** @deprecated use `toEventSignature`. */\ntoEventSignature as getEventSignature, } from './hash/toEventSignature.js';\nexport { toFunctionHash, } from './hash/toFunctionHash.js';\nexport { toFunctionSelector, \n/** @deprecated use `toFunctionSelector`. */\ntoFunctionSelector as getFunctionSelector, } from './hash/toFunctionSelector.js';\nexport { toFunctionSignature, \n/** @deprecated use `toFunctionSignature`. */\ntoFunctionSignature as getFunctionSignature, } from './hash/toFunctionSignature.js';\nexport { createNonceManager, nonceManager, } from './nonceManager.js';\nexport { arrayRegex, bytesRegex, integerRegex } from './regex.js';\nexport { getSocket, rpc, } from './rpc/compat.js';\nexport { getHttpRpcClient, } from './rpc/http.js';\nexport { getSocketRpcClient, socketClientCache, } from './rpc/socket.js';\nexport { getWebSocketRpcClient } from './rpc/webSocket.js';\nexport { hashMessage, } from './signature/hashMessage.js';\nexport { hashStruct, hashTypedData, } from './signature/hashTypedData.js';\nexport { isErc6492Signature, } from './signature/isErc6492Signature.js';\nexport { isErc8010Signature, } from './signature/isErc8010Signature.js';\nexport { parseErc6492Signature, } from './signature/parseErc6492Signature.js';\nexport { parseErc8010Signature, } from './signature/parseErc8010Signature.js';\nexport { recoverAddress, } from './signature/recoverAddress.js';\nexport { recoverMessageAddress, } from './signature/recoverMessageAddress.js';\nexport { recoverPublicKey, } from './signature/recoverPublicKey.js';\nexport { recoverTypedDataAddress, } from './signature/recoverTypedDataAddress.js';\nexport { serializeErc6492Signature, } from './signature/serializeErc6492Signature.js';\nexport { serializeErc8010Signature, } from './signature/serializeErc8010Signature.js';\nexport { verifyHash, } from './signature/verifyHash.js';\nexport { verifyMessage, } from './signature/verifyMessage.js';\nexport { verifyTypedData, } from './signature/verifyTypedData.js';\nexport { stringify } from './stringify.js';\nexport { assertRequest, } from './transaction/assertRequest.js';\nexport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy, } from './transaction/assertTransaction.js';\nexport { getSerializedTransactionType, } from './transaction/getSerializedTransactionType.js';\nexport { getTransactionType, } from './transaction/getTransactionType.js';\nexport { parseTransaction, } from './transaction/parseTransaction.js';\nexport { serializeAccessList, } from './transaction/serializeAccessList.js';\nexport { serializeTransaction, } from './transaction/serializeTransaction.js';\nexport { serializeTypedData, validateTypedData, } from './typedData.js';\nexport { formatEther } from './unit/formatEther.js';\nexport { formatGwei } from './unit/formatGwei.js';\nexport { formatUnits } from './unit/formatUnits.js';\nexport { parseEther } from './unit/parseEther.js';\nexport { parseGwei } from './unit/parseGwei.js';\nexport { parseUnits } from './unit/parseUnits.js';\n//# sourceMappingURL=index.js.map",
    "import { hexToNumber } from '../index.js';\nfunction formatStorageProof(storageProof) {\n    return storageProof.map((proof) => ({\n        ...proof,\n        value: BigInt(proof.value),\n    }));\n}\nexport function formatProof(proof) {\n    return {\n        ...proof,\n        balance: proof.balance ? BigInt(proof.balance) : undefined,\n        nonce: proof.nonce ? hexToNumber(proof.nonce) : undefined,\n        storageProof: proof.storageProof\n            ? formatStorageProof(proof.storageProof)\n            : undefined,\n    };\n}\n//# sourceMappingURL=proof.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { formatProof, } from '../../utils/formatters/proof.js';\n/**\n * Returns the account and storage values of the specified account including the Merkle-proof.\n *\n * - Docs: https://viem.sh/docs/actions/public/getProof\n * - JSON-RPC Methods:\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n *\n * @param client - Client to use\n * @param parameters - {@link GetProofParameters}\n * @returns Proof data. {@link GetProofReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getProof } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getProof(client, {\n *  address: '0x...',\n *  storageKeys: ['0x...'],\n * })\n */\nexport async function getProof(client, { address, blockNumber, blockTag: blockTag_, storageKeys, }) {\n    const blockTag = blockTag_ ?? 'latest';\n    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n    const proof = await client.request({\n        method: 'eth_getProof',\n        params: [address, storageKeys, blockNumberHex || blockTag],\n    });\n    return formatProof(proof);\n}\n//# sourceMappingURL=getProof.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Returns the value from a storage slot at a given address.\n *\n * - Docs: https://viem.sh/docs/contract/getStorageAt\n * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n *\n * @param client - Client to use\n * @param parameters - {@link GetStorageAtParameters}\n * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getStorageAt } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getStorageAt(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   slot: toHex(0),\n * })\n */\nexport async function getStorageAt(client, { address, blockNumber, blockTag = 'latest', slot }) {\n    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n    const data = await client.request({\n        method: 'eth_getStorageAt',\n        params: [address, slot, blockNumberHex || blockTag],\n    });\n    return data;\n}\n//# sourceMappingURL=getStorageAt.js.map",
    "import { TransactionNotFoundError, } from '../../errors/transaction.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { formatTransaction, } from '../../utils/formatters/transaction.js';\n/**\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransaction\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionParameters}\n * @returns The transaction information. {@link GetTransactionReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransaction } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transaction = await getTransaction(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransaction(client, { blockHash, blockNumber, blockTag: blockTag_, hash, index, }) {\n    const blockTag = blockTag_ || 'latest';\n    const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n    let transaction = null;\n    if (hash) {\n        transaction = await client.request({\n            method: 'eth_getTransactionByHash',\n            params: [hash],\n        }, { dedupe: true });\n    }\n    else if (blockHash) {\n        transaction = await client.request({\n            method: 'eth_getTransactionByBlockHashAndIndex',\n            params: [blockHash, numberToHex(index)],\n        }, { dedupe: true });\n    }\n    else if (blockNumberHex || blockTag) {\n        transaction = await client.request({\n            method: 'eth_getTransactionByBlockNumberAndIndex',\n            params: [blockNumberHex || blockTag, numberToHex(index)],\n        }, { dedupe: Boolean(blockNumberHex) });\n    }\n    if (!transaction)\n        throw new TransactionNotFoundError({\n            blockHash,\n            blockNumber,\n            blockTag,\n            hash,\n            index,\n        });\n    const format = client.chain?.formatters?.transaction?.format || formatTransaction;\n    return format(transaction, 'getTransaction');\n}\n//# sourceMappingURL=getTransaction.js.map",
    "import { getAction } from '../../utils/getAction.js';\nimport { getBlockNumber, } from './getBlockNumber.js';\nimport { getTransaction, } from './getTransaction.js';\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations(client, { hash, transactionReceipt }) {\n    const [blockNumber, transaction] = await Promise.all([\n        getAction(client, getBlockNumber, 'getBlockNumber')({}),\n        hash\n            ? getAction(client, getTransaction, 'getTransaction')({ hash })\n            : undefined,\n    ]);\n    const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;\n    if (!transactionBlockNumber)\n        return 0n;\n    return blockNumber - transactionBlockNumber + 1n;\n}\n//# sourceMappingURL=getTransactionConfirmations.js.map",
    "import { TransactionReceiptNotFoundError, } from '../../errors/transaction.js';\nimport { formatTransactionReceipt, } from '../../utils/formatters/transactionReceipt.js';\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt(client, { hash }) {\n    const receipt = await client.request({\n        method: 'eth_getTransactionReceipt',\n        params: [hash],\n    }, { dedupe: true });\n    if (!receipt)\n        throw new TransactionReceiptNotFoundError({ hash });\n    const format = client.chain?.formatters?.transactionReceipt?.format ||\n        formatTransactionReceipt;\n    return format(receipt, 'getTransactionReceipt');\n}\n//# sourceMappingURL=getTransactionReceipt.js.map",
    "import { multicall3Abi } from '../../constants/abis.js';\nimport { multicall3Bytecode } from '../../constants/contracts.js';\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js';\nimport { BaseError } from '../../errors/base.js';\nimport { RawContractError } from '../../errors/contract.js';\nimport { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress, } from '../../utils/chain/getChainContractAddress.js';\nimport { getContractError, } from '../../utils/errors/getContractError.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract } from './readContract.js';\n/**\n * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n *\n * - Docs: https://viem.sh/docs/contract/multicall\n *\n * @param client - Client to use\n * @param parameters - {@link MulticallParameters}\n * @returns An array of results with accompanying status. {@link MulticallReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { multicall } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const abi = parseAbi([\n *   'function balanceOf(address) view returns (uint256)',\n *   'function totalSupply() view returns (uint256)',\n * ])\n * const results = await multicall(client, {\n *   contracts: [\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'balanceOf',\n *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n *     },\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'totalSupply',\n *     },\n *   ],\n * })\n * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n */\nexport async function multicall(client, parameters) {\n    const { account, authorizationList, allowFailure = true, blockNumber, blockOverrides, blockTag, stateOverride, } = parameters;\n    const contracts = parameters.contracts;\n    const { batchSize = parameters.batchSize ?? 1024, deployless = parameters.deployless ?? false, } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};\n    const multicallAddress = (() => {\n        if (parameters.multicallAddress)\n            return parameters.multicallAddress;\n        if (deployless)\n            return null;\n        if (client.chain) {\n            return getChainContractAddress({\n                blockNumber,\n                chain: client.chain,\n                contract: 'multicall3',\n            });\n        }\n        throw new Error('client chain not configured. multicallAddress is required.');\n    })();\n    const chunkedCalls = [[]];\n    let currentChunk = 0;\n    let currentChunkSize = 0;\n    for (let i = 0; i < contracts.length; i++) {\n        const { abi, address, args, functionName } = contracts[i];\n        try {\n            const callData = encodeFunctionData({ abi, args, functionName });\n            currentChunkSize += (callData.length - 2) / 2;\n            // Check to see if we need to create a new chunk.\n            if (\n            // Check if batching is enabled.\n            batchSize > 0 &&\n                // Check if the current size of the batch exceeds the size limit.\n                currentChunkSize > batchSize &&\n                // Check if the current chunk is not already empty.\n                chunkedCalls[currentChunk].length > 0) {\n                currentChunk++;\n                currentChunkSize = (callData.length - 2) / 2;\n                chunkedCalls[currentChunk] = [];\n            }\n            chunkedCalls[currentChunk] = [\n                ...chunkedCalls[currentChunk],\n                {\n                    allowFailure: true,\n                    callData,\n                    target: address,\n                },\n            ];\n        }\n        catch (err) {\n            const error = getContractError(err, {\n                abi,\n                address,\n                args,\n                docsPath: '/docs/contract/multicall',\n                functionName,\n                sender: account,\n            });\n            if (!allowFailure)\n                throw error;\n            chunkedCalls[currentChunk] = [\n                ...chunkedCalls[currentChunk],\n                {\n                    allowFailure: true,\n                    callData: '0x',\n                    target: address,\n                },\n            ];\n        }\n    }\n    const aggregate3Results = await Promise.allSettled(chunkedCalls.map((calls) => getAction(client, readContract, 'readContract')({\n        ...(multicallAddress === null\n            ? { code: multicall3Bytecode }\n            : { address: multicallAddress }),\n        abi: multicall3Abi,\n        account,\n        args: [calls],\n        authorizationList,\n        blockNumber,\n        blockOverrides,\n        blockTag,\n        functionName: 'aggregate3',\n        stateOverride,\n    })));\n    const results = [];\n    for (let i = 0; i < aggregate3Results.length; i++) {\n        const result = aggregate3Results[i];\n        // If an error occurred in a `readContract` invocation (ie. network error),\n        // then append the failure reason to each contract result.\n        if (result.status === 'rejected') {\n            if (!allowFailure)\n                throw result.reason;\n            for (let j = 0; j < chunkedCalls[i].length; j++) {\n                results.push({\n                    status: 'failure',\n                    error: result.reason,\n                    result: undefined,\n                });\n            }\n            continue;\n        }\n        // If the `readContract` call was successful, then decode the results.\n        const aggregate3Result = result.value;\n        for (let j = 0; j < aggregate3Result.length; j++) {\n            // Extract the response from `readContract`\n            const { returnData, success } = aggregate3Result[j];\n            // Extract the request call data from the original call.\n            const { callData } = chunkedCalls[i][j];\n            // Extract the contract config for this call from the `contracts` argument\n            // for decoding.\n            const { abi, address, functionName, args } = contracts[results.length];\n            try {\n                if (callData === '0x')\n                    throw new AbiDecodingZeroDataError();\n                if (!success)\n                    throw new RawContractError({ data: returnData });\n                const result = decodeFunctionResult({\n                    abi,\n                    args,\n                    data: returnData,\n                    functionName,\n                });\n                results.push(allowFailure ? { result, status: 'success' } : result);\n            }\n            catch (err) {\n                const error = getContractError(err, {\n                    abi,\n                    address,\n                    args,\n                    docsPath: '/docs/contract/multicall',\n                    functionName,\n                });\n                if (!allowFailure)\n                    throw error;\n                results.push({ error, result: undefined, status: 'failure' });\n            }\n        }\n    }\n    if (results.length !== contracts.length)\n        throw new BaseError('multicall results mismatch');\n    return results;\n}\n//# sourceMappingURL=multicall.js.map",
    "import * as BlockOverrides from 'ox/BlockOverrides';\nimport { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js';\nimport { RawContractError } from '../../errors/contract.js';\nimport { UnknownNodeError } from '../../errors/node.js';\nimport { decodeFunctionResult, } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { concat } from '../../utils/data/concat.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { getContractError } from '../../utils/errors/getContractError.js';\nimport { getNodeError, } from '../../utils/errors/getNodeError.js';\nimport { formatBlock, } from '../../utils/formatters/block.js';\nimport { formatLog } from '../../utils/formatters/log.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { serializeStateOverride, } from '../../utils/stateOverride.js';\nimport { assertRequest, } from '../../utils/transaction/assertRequest.js';\n/**\n * Simulates a set of calls on block(s) with optional block and state overrides.\n *\n * @example\n * ```ts\n * import { createClient, http, parseEther } from 'viem'\n * import { simulate } from 'viem/actions'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const result = await simulate(client, {\n *   blocks: [{\n *     blockOverrides: {\n *       number: 69420n,\n *     },\n *     calls: [{\n *       {\n *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *         data: '0xdeadbeef',\n *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       },\n *       {\n *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *         value: parseEther('1'),\n *       },\n *     }],\n *     stateOverrides: [{\n *       address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *       balance: parseEther('10'),\n *     }],\n *   }]\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link SimulateBlocksParameters}\n * @returns Simulated blocks. {@link SimulateBlocksReturnType}\n */\nexport async function simulateBlocks(client, parameters) {\n    const { blockNumber, blockTag = client.experimental_blockTag ?? 'latest', blocks, returnFullTransactions, traceTransfers, validation, } = parameters;\n    try {\n        const blockStateCalls = [];\n        for (const block of blocks) {\n            const blockOverrides = block.blockOverrides\n                ? BlockOverrides.toRpc(block.blockOverrides)\n                : undefined;\n            const calls = block.calls.map((call_) => {\n                const call = call_;\n                const account = call.account ? parseAccount(call.account) : undefined;\n                const data = call.abi ? encodeFunctionData(call) : call.data;\n                const request = {\n                    ...call,\n                    account,\n                    data: call.dataSuffix\n                        ? concat([data || '0x', call.dataSuffix])\n                        : data,\n                    from: call.from ?? account?.address,\n                };\n                assertRequest(request);\n                return formatTransactionRequest(request);\n            });\n            const stateOverrides = block.stateOverrides\n                ? serializeStateOverride(block.stateOverrides)\n                : undefined;\n            blockStateCalls.push({\n                blockOverrides,\n                calls,\n                stateOverrides,\n            });\n        }\n        const blockNumberHex = typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined;\n        const block = blockNumberHex || blockTag;\n        const result = await client.request({\n            method: 'eth_simulateV1',\n            params: [\n                { blockStateCalls, returnFullTransactions, traceTransfers, validation },\n                block,\n            ],\n        });\n        return result.map((block, i) => ({\n            ...formatBlock(block),\n            calls: block.calls.map((call, j) => {\n                const { abi, args, functionName, to } = blocks[i].calls[j];\n                const data = call.error?.data ?? call.returnData;\n                const gasUsed = BigInt(call.gasUsed);\n                const logs = call.logs?.map((log) => formatLog(log));\n                const status = call.status === '0x1' ? 'success' : 'failure';\n                const result = abi && status === 'success' && data !== '0x'\n                    ? decodeFunctionResult({\n                        abi,\n                        data,\n                        functionName,\n                    })\n                    : null;\n                const error = (() => {\n                    if (status === 'success')\n                        return undefined;\n                    let error;\n                    if (call.error?.data === '0x')\n                        error = new AbiDecodingZeroDataError();\n                    else if (call.error)\n                        error = new RawContractError(call.error);\n                    if (!error)\n                        return undefined;\n                    return getContractError(error, {\n                        abi: (abi ?? []),\n                        address: to ?? '0x',\n                        args,\n                        functionName: functionName ?? '<unknown>',\n                    });\n                })();\n                return {\n                    data,\n                    gasUsed,\n                    logs,\n                    status,\n                    ...(status === 'success'\n                        ? {\n                            result,\n                        }\n                        : {\n                            error,\n                        }),\n                };\n            }),\n        }));\n    }\n    catch (e) {\n        const cause = e;\n        const error = getNodeError(cause, {});\n        if (error instanceof UnknownNodeError)\n            throw cause;\n        throw error;\n    }\n}\n//# sourceMappingURL=simulateBlocks.js.map",
    "import * as Address from '../Address.js';\nimport * as Errors from '../Errors.js';\n/** @internal */\nexport function normalizeSignature(signature) {\n    let active = true;\n    let current = '';\n    let level = 0;\n    let result = '';\n    let valid = false;\n    for (let i = 0; i < signature.length; i++) {\n        const char = signature[i];\n        // If the character is a separator, we want to reactivate.\n        if (['(', ')', ','].includes(char))\n            active = true;\n        // If the character is a \"level\" token, we want to increment/decrement.\n        if (char === '(')\n            level++;\n        if (char === ')')\n            level--;\n        // If we aren't active, we don't want to mutate the result.\n        if (!active)\n            continue;\n        // If level === 0, we are at the definition level.\n        if (level === 0) {\n            if (char === ' ' && ['event', 'function', 'error', ''].includes(result))\n                result = '';\n            else {\n                result += char;\n                // If we are at the end of the definition, we must be finished.\n                if (char === ')') {\n                    valid = true;\n                    break;\n                }\n            }\n            continue;\n        }\n        // Ignore spaces\n        if (char === ' ') {\n            // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n            if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n                current = '';\n                active = false;\n            }\n            continue;\n        }\n        result += char;\n        current += char;\n    }\n    if (!valid)\n        throw new Errors.BaseError('Unable to normalize signature.');\n    return result;\n}\n/** @internal */\nexport function isArgOfType(arg, abiParameter) {\n    const argType = typeof arg;\n    const abiParameterType = abiParameter.type;\n    switch (abiParameterType) {\n        case 'address':\n            return Address.validate(arg, { strict: false });\n        case 'bool':\n            return argType === 'boolean';\n        case 'function':\n            return argType === 'string';\n        case 'string':\n            return argType === 'string';\n        default: {\n            if (abiParameterType === 'tuple' && 'components' in abiParameter)\n                return Object.values(abiParameter.components).every((component, index) => {\n                    return isArgOfType(Object.values(arg)[index], component);\n                });\n            // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n            // https://regexr.com/6v8hp\n            if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))\n                return argType === 'number' || argType === 'bigint';\n            // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n            // https://regexr.com/6va55\n            if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n                return argType === 'string' || arg instanceof Uint8Array;\n            // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n            // https://regexr.com/6va6i\n            if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n                return (Array.isArray(arg) &&\n                    arg.every((x) => isArgOfType(x, {\n                        ...abiParameter,\n                        // Pop off `[]` or `[M]` from end of type\n                        type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n                    })));\n            }\n            return false;\n        }\n    }\n}\n/** @internal */\nexport function getAmbiguousTypes(sourceParameters, targetParameters, args) {\n    for (const parameterIndex in sourceParameters) {\n        const sourceParameter = sourceParameters[parameterIndex];\n        const targetParameter = targetParameters[parameterIndex];\n        if (sourceParameter.type === 'tuple' &&\n            targetParameter.type === 'tuple' &&\n            'components' in sourceParameter &&\n            'components' in targetParameter)\n            return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);\n        const types = [sourceParameter.type, targetParameter.type];\n        const ambiguous = (() => {\n            if (types.includes('address') && types.includes('bytes20'))\n                return true;\n            if (types.includes('address') && types.includes('string'))\n                return Address.validate(args[parameterIndex], {\n                    strict: false,\n                });\n            if (types.includes('address') && types.includes('bytes'))\n                return Address.validate(args[parameterIndex], {\n                    strict: false,\n                });\n            return false;\n        })();\n        if (ambiguous)\n            return types;\n    }\n    return;\n}\n//# sourceMappingURL=abiItem.js.map",
    "import * as abitype from 'abitype';\nimport * as Errors from './Errors.js';\nimport * as Hash from './Hash.js';\nimport * as Hex from './Hex.js';\nimport * as internal from './internal/abiItem.js';\n/**\n * Formats an {@link ox#AbiItem.AbiItem} into a **Human Readable ABI Item**.\n *\n * @example\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const formatted = AbiItem.format({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiItem - The ABI Item to format.\n * @returns The formatted ABI Item  .\n */\nexport function format(abiItem) {\n    return abitype.formatAbiItem(abiItem);\n}\n/**\n * Parses an arbitrary **JSON ABI Item** or **Human Readable ABI Item** into a typed {@link ox#AbiItem.AbiItem}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from(\n *   'function approve(address spender, uint256 amount) returns (bool)' // [!code hl]\n * )\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from([\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\n *   'function approve(Foo foo) returns (bool)',\n * ])\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiItem - The ABI Item to parse.\n * @returns The typed ABI Item.\n */\nexport function from(abiItem, options = {}) {\n    const { prepare = true } = options;\n    const item = (() => {\n        if (Array.isArray(abiItem))\n            return abitype.parseAbiItem(abiItem);\n        if (typeof abiItem === 'string')\n            return abitype.parseAbiItem(abiItem);\n        return abiItem;\n    })();\n    return {\n        ...item,\n        ...(prepare ? { hash: getSignatureHash(item) } : {}),\n    };\n}\n/**\n * Extracts an {@link ox#AbiItem.AbiItem} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ABI Items can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiItem.fromAbi(abi, 'Transfer') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Items can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiItem.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Item from an `eth_call` RPC response,\n * a Transaction `input`, or from Event Log `topics`.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi(abi, name, options) {\n    const { args = [], prepare = true } = (options ??\n        {});\n    const isSelector = Hex.validate(name, { strict: false });\n    const abiItems = abi.filter((abiItem) => {\n        if (isSelector) {\n            if (abiItem.type === 'function' || abiItem.type === 'error')\n                return getSelector(abiItem) === Hex.slice(name, 0, 4);\n            if (abiItem.type === 'event')\n                return getSignatureHash(abiItem) === name;\n            return false;\n        }\n        return 'name' in abiItem && abiItem.name === name;\n    });\n    if (abiItems.length === 0)\n        throw new NotFoundError({ name: name });\n    if (abiItems.length === 1)\n        return {\n            ...abiItems[0],\n            ...(prepare ? { hash: getSignatureHash(abiItems[0]) } : {}),\n        };\n    let matchedAbiItem;\n    for (const abiItem of abiItems) {\n        if (!('inputs' in abiItem))\n            continue;\n        if (!args || args.length === 0) {\n            if (!abiItem.inputs || abiItem.inputs.length === 0)\n                return {\n                    ...abiItem,\n                    ...(prepare ? { hash: getSignatureHash(abiItem) } : {}),\n                };\n            continue;\n        }\n        if (!abiItem.inputs)\n            continue;\n        if (abiItem.inputs.length === 0)\n            continue;\n        if (abiItem.inputs.length !== args.length)\n            continue;\n        const matched = args.every((arg, index) => {\n            const abiParameter = 'inputs' in abiItem && abiItem.inputs[index];\n            if (!abiParameter)\n                return false;\n            return internal.isArgOfType(arg, abiParameter);\n        });\n        if (matched) {\n            // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n            if (matchedAbiItem &&\n                'inputs' in matchedAbiItem &&\n                matchedAbiItem.inputs) {\n                const ambiguousTypes = internal.getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);\n                if (ambiguousTypes)\n                    throw new AmbiguityError({\n                        abiItem,\n                        type: ambiguousTypes[0],\n                    }, {\n                        abiItem: matchedAbiItem,\n                        type: ambiguousTypes[1],\n                    });\n            }\n            matchedAbiItem = abiItem;\n        }\n    }\n    const abiItem = (() => {\n        if (matchedAbiItem)\n            return matchedAbiItem;\n        const [abiItem, ...overloads] = abiItems;\n        return { ...abiItem, overloads };\n    })();\n    if (!abiItem)\n        throw new NotFoundError({ name: name });\n    return {\n        ...abiItem,\n        ...(prepare ? { hash: getSignatureHash(abiItem) } : {}),\n    };\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getSelector(...parameters) {\n    const abiItem = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name] = parameters;\n            return fromAbi(abi, name);\n        }\n        return parameters[0];\n    })();\n    return Hex.slice(getSignatureHash(abiItem), 0, 4);\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getSignature(...parameters) {\n    const abiItem = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name] = parameters;\n            return fromAbi(abi, name);\n        }\n        return parameters[0];\n    })();\n    const signature = (() => {\n        if (typeof abiItem === 'string')\n            return abiItem;\n        return abitype.formatAbiItem(abiItem);\n    })();\n    return internal.normalizeSignature(signature);\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getSignatureHash(...parameters) {\n    const abiItem = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name] = parameters;\n            return fromAbi(abi, name);\n        }\n        return parameters[0];\n    })();\n    if (typeof abiItem !== 'string' && 'hash' in abiItem && abiItem.hash)\n        return abiItem.hash;\n    return Hash.keccak256(Hex.fromString(getSignature(abiItem)));\n}\n/**\n * Throws when ambiguous types are found on overloaded ABI items.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from(['function foo(address)', 'function foo(bytes20)'])\n * AbiFunction.fromAbi(foo, 'foo', {\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // @error: AbiItem.AmbiguityError: Found ambiguous types in overloaded ABI Items.\n * // @error: `bytes20` in `foo(bytes20)`, and\n * // @error: `address` in `foo(address)`\n * // @error: These types encode differently and cannot be distinguished at runtime.\n * // @error: Remove one of the ambiguous items in the ABI.\n * ```\n *\n * ### Solution\n *\n * Remove one of the ambiguous types from the ABI.\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function foo(bytes20)' // [!code --]\n * ])\n * AbiFunction.fromAbi(foo, 'foo', {\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // @error: AbiItem.AmbiguityError: Found ambiguous types in overloaded ABI Items.\n * // @error: `bytes20` in `foo(bytes20)`, and\n * // @error: `address` in `foo(address)`\n * // @error: These types encode differently and cannot be distinguished at runtime.\n * // @error: Remove one of the ambiguous items in the ABI.\n * ```\n */\nexport class AmbiguityError extends Errors.BaseError {\n    constructor(x, y) {\n        super('Found ambiguous types in overloaded ABI Items.', {\n            metaMessages: [\n                // TODO: abitype to add support for signature-formatted ABI items.\n                `\\`${x.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(x.abiItem))}\\`, and`,\n                `\\`${y.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(y.abiItem))}\\``,\n                '',\n                'These types encode differently and cannot be distinguished at runtime.',\n                'Remove one of the ambiguous items in the ABI.',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiItem.AmbiguityError'\n        });\n    }\n}\n/**\n * Throws when an ABI item is not found in the ABI.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)'\n * ])\n * AbiFunction.fromAbi(foo, 'baz')\n * // @error: AbiItem.NotFoundError: ABI function with name \"baz\" not found.\n * ```\n *\n * ### Solution\n *\n * Ensure the ABI item exists on the ABI.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)',\n *   'function baz(bool)' // [!code ++]\n * ])\n * AbiFunction.fromAbi(foo, 'baz')\n * ```\n */\nexport class NotFoundError extends Errors.BaseError {\n    constructor({ name, data, type = 'item', }) {\n        const selector = (() => {\n            if (name)\n                return ` with name \"${name}\"`;\n            if (data)\n                return ` with data \"${data}\"`;\n            return '';\n        })();\n        super(`ABI ${type}${selector} not found.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiItem.NotFoundError'\n        });\n    }\n}\n/**\n * Throws when the selector size is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)'\n * ])\n * AbiFunction.fromAbi(foo, '0xaaa')\n * // @error: AbiItem.InvalidSelectorSizeError: Selector size is invalid. Expected 4 bytes. Received 2 bytes (\"0xaaa\").\n * ```\n *\n * ### Solution\n *\n * Ensure the selector size is 4 bytes.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiFunction } from 'ox'\n *\n * const foo = Abi.from([\n *   'function foo(address)',\n *   'function bar(uint)'\n * ])\n * AbiFunction.fromAbi(foo, '0x7af82b1a')\n * ```\n */\nexport class InvalidSelectorSizeError extends Errors.BaseError {\n    constructor({ data }) {\n        super(`Selector size is invalid. Expected 4 bytes. Received ${Hex.size(data)} bytes (\"${data}\").`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiItem.InvalidSelectorSizeError'\n        });\n    }\n}\n//# sourceMappingURL=AbiItem.js.map",
    "import * as abitype from 'abitype';\nimport * as AbiItem from './AbiItem.js';\nimport * as AbiParameters from './AbiParameters.js';\nimport * as Hex from './Hex.js';\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decode(...parameters) {\n    const [abiConstructor, options] = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, options] = parameters;\n            return [fromAbi(abi), options];\n        }\n        return parameters;\n    })();\n    const { bytecode } = options;\n    if (abiConstructor.inputs.length === 0)\n        return undefined;\n    const data = options.data.replace(bytecode, '0x');\n    return AbiParameters.decode(abiConstructor.inputs, data);\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encode(...parameters) {\n    const [abiConstructor, options] = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, options] = parameters;\n            return [fromAbi(abi), options];\n        }\n        return parameters;\n    })();\n    const { bytecode, args } = options;\n    return Hex.concat(bytecode, abiConstructor.inputs?.length && args?.length\n        ? AbiParameters.encode(abiConstructor.inputs, args)\n        : '0x');\n}\n/** @internal */\nexport function format(abiConstructor) {\n    return abitype.formatAbiItem(abiConstructor);\n}\n/** @internal */\nexport function from(abiConstructor) {\n    return AbiItem.from(abiConstructor);\n}\n/** @internal */\nexport function fromAbi(abi) {\n    const item = abi.find((item) => item.type === 'constructor');\n    if (!item)\n        throw new AbiItem.NotFoundError({ name: 'constructor' });\n    return item;\n}\n//# sourceMappingURL=AbiConstructor.js.map",
    "import * as abitype from 'abitype';\nimport * as AbiItem from './AbiItem.js';\nimport * as AbiParameters from './AbiParameters.js';\nimport * as Hex from './Hex.js';\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decodeData(...parameters) {\n    const [abiFunction, data] = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, data] = parameters;\n            return [fromAbi(abi, name), data];\n        }\n        return parameters;\n    })();\n    const { overloads } = abiFunction;\n    if (Hex.size(data) < 4)\n        throw new AbiItem.InvalidSelectorSizeError({ data });\n    if (abiFunction.inputs.length === 0)\n        return undefined;\n    const item = overloads\n        ? fromAbi([abiFunction, ...overloads], data)\n        : abiFunction;\n    if (Hex.size(data) <= 4)\n        return undefined;\n    return AbiParameters.decode(item.inputs, Hex.slice(data, 4));\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decodeResult(...parameters) {\n    const [abiFunction, data, options = {}] = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, data, options] = parameters;\n            return [fromAbi(abi, name), data, options];\n        }\n        return parameters;\n    })();\n    const values = AbiParameters.decode(abiFunction.outputs, data, options);\n    if (values && Object.keys(values).length === 0)\n        return undefined;\n    if (values && Object.keys(values).length === 1) {\n        if (Array.isArray(values))\n            return values[0];\n        return Object.values(values)[0];\n    }\n    return values;\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encodeData(...parameters) {\n    const [abiFunction, args = []] = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, args] = parameters;\n            return [fromAbi(abi, name, { args }), args];\n        }\n        const [abiFunction, args] = parameters;\n        return [abiFunction, args];\n    })();\n    const { overloads } = abiFunction;\n    const item = overloads\n        ? fromAbi([abiFunction, ...overloads], abiFunction.name, {\n            args,\n        })\n        : abiFunction;\n    const selector = getSelector(item);\n    const data = args.length > 0 ? AbiParameters.encode(item.inputs, args) : undefined;\n    return data ? Hex.concat(selector, data) : selector;\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encodeResult(...parameters) {\n    const [abiFunction, output, options = {}] = (() => {\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, output, options] = parameters;\n            return [fromAbi(abi, name), output, options];\n        }\n        return parameters;\n    })();\n    const { as = 'Array' } = options;\n    const values = (() => {\n        if (abiFunction.outputs.length === 1)\n            return [output];\n        if (Array.isArray(output))\n            return output;\n        if (as === 'Object')\n            return Object.values(output);\n        return [output];\n    })();\n    return AbiParameters.encode(abiFunction.outputs, values);\n}\n/**\n * Formats an {@link ox#AbiFunction.AbiFunction} into a **Human Readable ABI Function**.\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const formatted = AbiFunction.format({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiFunction - The ABI Function to format.\n * @returns The formatted ABI Function.\n */\nexport function format(abiFunction) {\n    return abitype.formatAbiItem(abiFunction);\n}\n/**\n * Parses an arbitrary **JSON ABI Function** or **Human Readable ABI Function** into a typed {@link ox#AbiFunction.AbiFunction}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from({\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * })\n *\n * approve\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from(\n *   'function approve(address spender, uint256 amount) returns (bool)' // [!code hl]\n * )\n *\n * approve\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from([\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\n *   'function approve(Foo foo) returns (bool)',\n * ])\n *\n * approve\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiFunction - The ABI Function to parse.\n * @returns Typed ABI Function.\n */\nexport function from(abiFunction, options = {}) {\n    return AbiItem.from(abiFunction, options);\n}\n/**\n * Extracts an {@link ox#AbiFunction.AbiFunction} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Functions can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiFunction.fromAbi(abi, 'foo') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Functions can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiFunction.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Function from an `eth_call` RPC response or\n * from a Transaction `input`.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi(abi, name, options) {\n    const item = AbiItem.fromAbi(abi, name, options);\n    if (item.type !== 'function')\n        throw new AbiItem.NotFoundError({ name, type: 'function' });\n    return item;\n}\n/**\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiFunction.AbiFunction}.\n *\n * Useful for computing function selectors for calldata.\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const selector = AbiFunction.getSelector('function ownerOf(uint256 tokenId)')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const selector = AbiFunction.getSelector({\n *   inputs: [{ type: 'uint256' }],\n *   name: 'ownerOf',\n *   outputs: [],\n *   stateMutability: 'view',\n *   type: 'function'\n * })\n * // @log: '0x6352211e'\n * ```\n *\n * @param abiItem - The ABI item to compute the selector for.\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the function signature.\n */\nexport function getSelector(abiItem) {\n    return AbiItem.getSelector(abiItem);\n}\n//# sourceMappingURL=AbiFunction.js.map",
    "export const entryPoint06Address = '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789';\nexport const entryPoint07Address = '0x0000000071727De22E5E9d8BAf0edAc6f37da032';\nexport const entryPoint08Address = '0x4337084D9E255Ff0702461CF8895CE9E3b5Ff108';\nexport const ethAddress = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\nexport const zeroAddress = '0x0000000000000000000000000000000000000000';\n//# sourceMappingURL=address.js.map",
    "import * as AbiConstructor from 'ox/AbiConstructor';\nimport * as AbiFunction from 'ox/AbiFunction';\nimport { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { ethAddress, zeroAddress } from '../../constants/address.js';\nimport { deploylessCallViaBytecodeBytecode } from '../../constants/contracts.js';\nimport { BaseError } from '../../errors/base.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { hexToBigInt } from '../../utils/index.js';\nimport { createAccessList, } from './createAccessList.js';\nimport { simulateBlocks, } from './simulateBlocks.js';\nconst getBalanceCode = '0x6080604052348015600e575f80fd5b5061016d8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063f8b2cb4f1461002d575b5f80fd5b610047600480360381019061004291906100db565b61005d565b604051610054919061011e565b60405180910390f35b5f8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100aa82610081565b9050919050565b6100ba816100a0565b81146100c4575f80fd5b50565b5f813590506100d5816100b1565b92915050565b5f602082840312156100f0576100ef61007d565b5b5f6100fd848285016100c7565b91505092915050565b5f819050919050565b61011881610106565b82525050565b5f6020820190506101315f83018461010f565b9291505056fea26469706673582212203b9fe929fe995c7cf9887f0bdba8a36dd78e8b73f149b17d2d9ad7cd09d2dc6264736f6c634300081a0033';\n/**\n * Simulates execution of a batch of calls.\n *\n * @param client - Client to use\n * @param parameters - {@link SimulateCallsParameters}\n * @returns Results. {@link SimulateCallsReturnType}\n *\n * @example\n * ```ts\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateCalls } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const result = await simulateCalls(client, {\n *   account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n *   calls: [{\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: parseEther('1'),\n *     },\n *   ]\n * })\n * ```\n */\nexport async function simulateCalls(client, parameters) {\n    const { blockNumber, blockTag, calls, stateOverrides, traceAssetChanges, traceTransfers, validation, } = parameters;\n    const account = parameters.account\n        ? parseAccount(parameters.account)\n        : undefined;\n    if (traceAssetChanges && !account)\n        throw new BaseError('`account` is required when `traceAssetChanges` is true');\n    // Derive bytecode to extract ETH balance via a contract call.\n    const getBalanceData = account\n        ? AbiConstructor.encode(AbiConstructor.from('constructor(bytes, bytes)'), {\n            bytecode: deploylessCallViaBytecodeBytecode,\n            args: [\n                getBalanceCode,\n                AbiFunction.encodeData(AbiFunction.from('function getBalance(address)'), [account.address]),\n            ],\n        })\n        : undefined;\n    // Fetch ERC20/721 addresses that were \"touched\" from the calls.\n    const assetAddresses = traceAssetChanges\n        ? await Promise.all(parameters.calls.map(async (call) => {\n            if (!call.data && !call.abi)\n                return;\n            const { accessList } = await createAccessList(client, {\n                account: account.address,\n                ...call,\n                data: call.abi ? encodeFunctionData(call) : call.data,\n            });\n            return accessList.map(({ address, storageKeys }) => storageKeys.length > 0 ? address : null);\n        })).then((x) => x.flat().filter(Boolean))\n        : [];\n    const blocks = await simulateBlocks(client, {\n        blockNumber,\n        blockTag: blockTag,\n        blocks: [\n            ...(traceAssetChanges\n                ? [\n                    // ETH pre balances\n                    {\n                        calls: [{ data: getBalanceData }],\n                        stateOverrides,\n                    },\n                    // Asset pre balances\n                    {\n                        calls: assetAddresses.map((address, i) => ({\n                            abi: [\n                                AbiFunction.from('function balanceOf(address) returns (uint256)'),\n                            ],\n                            functionName: 'balanceOf',\n                            args: [account.address],\n                            to: address,\n                            from: zeroAddress,\n                            nonce: i,\n                        })),\n                        stateOverrides: [\n                            {\n                                address: zeroAddress,\n                                nonce: 0,\n                            },\n                        ],\n                    },\n                ]\n                : []),\n            {\n                calls: [...calls, {}].map((call) => ({\n                    ...call,\n                    from: account?.address,\n                })),\n                stateOverrides,\n            },\n            ...(traceAssetChanges\n                ? [\n                    // ETH post balances\n                    {\n                        calls: [{ data: getBalanceData }],\n                    },\n                    // Asset post balances\n                    {\n                        calls: assetAddresses.map((address, i) => ({\n                            abi: [\n                                AbiFunction.from('function balanceOf(address) returns (uint256)'),\n                            ],\n                            functionName: 'balanceOf',\n                            args: [account.address],\n                            to: address,\n                            from: zeroAddress,\n                            nonce: i,\n                        })),\n                        stateOverrides: [\n                            {\n                                address: zeroAddress,\n                                nonce: 0,\n                            },\n                        ],\n                    },\n                    // Decimals\n                    {\n                        calls: assetAddresses.map((address, i) => ({\n                            to: address,\n                            abi: [\n                                AbiFunction.from('function decimals() returns (uint256)'),\n                            ],\n                            functionName: 'decimals',\n                            from: zeroAddress,\n                            nonce: i,\n                        })),\n                        stateOverrides: [\n                            {\n                                address: zeroAddress,\n                                nonce: 0,\n                            },\n                        ],\n                    },\n                    // Token URI\n                    {\n                        calls: assetAddresses.map((address, i) => ({\n                            to: address,\n                            abi: [\n                                AbiFunction.from('function tokenURI(uint256) returns (string)'),\n                            ],\n                            functionName: 'tokenURI',\n                            args: [0n],\n                            from: zeroAddress,\n                            nonce: i,\n                        })),\n                        stateOverrides: [\n                            {\n                                address: zeroAddress,\n                                nonce: 0,\n                            },\n                        ],\n                    },\n                    // Symbols\n                    {\n                        calls: assetAddresses.map((address, i) => ({\n                            to: address,\n                            abi: [AbiFunction.from('function symbol() returns (string)')],\n                            functionName: 'symbol',\n                            from: zeroAddress,\n                            nonce: i,\n                        })),\n                        stateOverrides: [\n                            {\n                                address: zeroAddress,\n                                nonce: 0,\n                            },\n                        ],\n                    },\n                ]\n                : []),\n        ],\n        traceTransfers,\n        validation,\n    });\n    const block_results = traceAssetChanges ? blocks[2] : blocks[0];\n    const [block_ethPre, block_assetsPre, , block_ethPost, block_assetsPost, block_decimals, block_tokenURI, block_symbols,] = traceAssetChanges ? blocks : [];\n    // Extract call results from the simulation.\n    const { calls: block_calls, ...block } = block_results;\n    const results = block_calls.slice(0, -1) ?? [];\n    // Extract pre-execution ETH and asset balances.\n    const ethPre = block_ethPre?.calls ?? [];\n    const assetsPre = block_assetsPre?.calls ?? [];\n    const balancesPre = [...ethPre, ...assetsPre].map((call) => call.status === 'success' ? hexToBigInt(call.data) : null);\n    // Extract post-execution ETH and asset balances.\n    const ethPost = block_ethPost?.calls ?? [];\n    const assetsPost = block_assetsPost?.calls ?? [];\n    const balancesPost = [...ethPost, ...assetsPost].map((call) => call.status === 'success' ? hexToBigInt(call.data) : null);\n    // Extract asset symbols & decimals.\n    const decimals = (block_decimals?.calls ?? []).map((x) => x.status === 'success' ? x.result : null);\n    const symbols = (block_symbols?.calls ?? []).map((x) => x.status === 'success' ? x.result : null);\n    const tokenURI = (block_tokenURI?.calls ?? []).map((x) => x.status === 'success' ? x.result : null);\n    const changes = [];\n    for (const [i, balancePost] of balancesPost.entries()) {\n        const balancePre = balancesPre[i];\n        if (typeof balancePost !== 'bigint')\n            continue;\n        if (typeof balancePre !== 'bigint')\n            continue;\n        const decimals_ = decimals[i - 1];\n        const symbol_ = symbols[i - 1];\n        const tokenURI_ = tokenURI[i - 1];\n        const token = (() => {\n            if (i === 0)\n                return {\n                    address: ethAddress,\n                    decimals: 18,\n                    symbol: 'ETH',\n                };\n            return {\n                address: assetAddresses[i - 1],\n                decimals: tokenURI_ || decimals_ ? Number(decimals_ ?? 1) : undefined,\n                symbol: symbol_ ?? undefined,\n            };\n        })();\n        if (changes.some((change) => change.token.address === token.address))\n            continue;\n        changes.push({\n            token,\n            value: {\n                pre: balancePre,\n                post: balancePost,\n                diff: balancePost - balancePre,\n            },\n        });\n    }\n    return {\n        assetChanges: changes,\n        block,\n        results,\n    };\n}\n//# sourceMappingURL=simulateCalls.js.map",
    "import * as AbiParameters from '../core/AbiParameters.js';\nimport * as Errors from '../core/Errors.js';\nimport * as Hex from '../core/Hex.js';\n/**\n * Magic bytes used to identify ERC-6492 wrapped signatures.\n */\nexport const magicBytes = '0x6492649264926492649264926492649264926492649264926492649264926492';\n/**\n * Deployless ERC-6492 signature verification bytecode.\n */\nexport const universalSignatureValidatorBytecode = '0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572';\n/**\n * ABI for the ERC-6492 universal deployless signature validator contract.\n *\n * Constructor return value is `0x1` (valid) or `0x0` (invalid).\n */\nexport const universalSignatureValidatorAbi = [\n    {\n        inputs: [\n            {\n                name: '_signer',\n                type: 'address',\n            },\n            {\n                name: '_hash',\n                type: 'bytes32',\n            },\n            {\n                name: '_signature',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            {\n                name: '_signer',\n                type: 'address',\n            },\n            {\n                name: '_hash',\n                type: 'bytes32',\n            },\n            {\n                name: '_signature',\n                type: 'bytes',\n            },\n        ],\n        outputs: [\n            {\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n        name: 'isValidSig',\n    },\n];\n/**\n * Asserts that the wrapped signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc6492 } from 'ox/erc6492'\n *\n * SignatureErc6492.assert('0xdeadbeef')\n * // @error: InvalidWrappedSignatureError: Value `0xdeadbeef` is an invalid ERC-6492 wrapped signature.\n * ```\n *\n * @param wrapped - The wrapped signature to assert.\n */\nexport function assert(wrapped) {\n    if (Hex.slice(wrapped, -32) !== magicBytes)\n        throw new InvalidWrappedSignatureError(wrapped);\n}\n/**\n * Parses an [ERC-6492 wrapped signature](https://eips.ethereum.org/EIPS/eip-6492#specification) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1 } from 'ox'\n * import { SignatureErc6492 } from 'ox/erc6492' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * // Instantiate from serialized format. // [!code focus]\n * const wrapped = SignatureErc6492.from('0x...') // [!code focus]\n * // @log: { data: '0x...', signature: { ... }, to: '0x...', } // [!code focus]\n *\n * // Instantiate from constituent parts. // [!code focus]\n * const wrapped = SignatureErc6492.from({ // [!code focus]\n *   data: '0x...', // [!code focus]\n *   signature, // [!code focus]\n *   to: '0x...', // [!code focus]\n * })\n * // @log: { data: '0x...', signature: { ... }, to: '0x...', }\n * ```\n *\n * @param wrapped - Wrapped signature to parse.\n * @returns Wrapped signature.\n */\nexport function from(wrapped) {\n    if (typeof wrapped === 'string')\n        return unwrap(wrapped);\n    return wrapped;\n}\n/**\n * Parses an [ERC-6492 wrapped signature](https://eips.ethereum.org/EIPS/eip-6492#specification) into its constituent parts.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc6492 } from 'ox/erc6492'\n *\n * const { data, signature, to } = SignatureErc6492.unwrap('0x...')\n * ```\n *\n * @param wrapped - Wrapped signature to parse.\n * @returns Wrapped signature.\n */\nexport function unwrap(wrapped) {\n    assert(wrapped);\n    const [to, data, signature] = AbiParameters.decode(AbiParameters.from('address, bytes, bytes'), wrapped);\n    return { data, signature, to };\n}\n/**\n * Serializes an [ERC-6492 wrapped signature](https://eips.ethereum.org/EIPS/eip-6492#specification).\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, Signature } from 'ox'\n * import { SignatureErc6492 } from 'ox/erc6492' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: '0x...',\n *   privateKey: '0x...',\n * })\n *\n * const wrapped = SignatureErc6492.wrap({ // [!code focus]\n *   data: '0xdeadbeef', // [!code focus]\n *   signature: Signature.toHex(signature), // [!code focus]\n *   to: '0x00000000219ab540356cBB839Cbe05303d7705Fa', // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param value - Wrapped signature to serialize.\n * @returns Serialized wrapped signature.\n */\nexport function wrap(value) {\n    const { data, signature, to } = value;\n    return Hex.concat(AbiParameters.encode(AbiParameters.from('address, bytes, bytes'), [\n        to,\n        data,\n        signature,\n    ]), magicBytes);\n}\n/**\n * Validates a wrapped signature. Returns `true` if the wrapped signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { SignatureErc6492 } from 'ox/erc6492'\n *\n * const valid = SignatureErc6492.validate('0xdeadbeef')\n * // @log: false\n * ```\n *\n * @param wrapped - The wrapped signature to validate.\n * @returns `true` if the wrapped signature is valid, `false` otherwise.\n */\nexport function validate(wrapped) {\n    try {\n        assert(wrapped);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/** Thrown when the ERC-6492 wrapped signature is invalid. */\nexport class InvalidWrappedSignatureError extends Errors.BaseError {\n    constructor(wrapped) {\n        super(`Value \\`${wrapped}\\` is an invalid ERC-6492 wrapped signature.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SignatureErc6492.InvalidWrappedSignatureError'\n        });\n    }\n}\n//# sourceMappingURL=SignatureErc6492.js.map",
    "/**\n * Utility functions for working with [ERC-6492 wrapped signatures](https://eips.ethereum.org/EIPS/eip-6492#specification).\n *\n * @example\n * ```ts twoslash\n * import { PersonalMessage, Secp256k1, Signature } from 'ox'\n * import { SignatureErc6492 } from 'ox/erc6492' // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload: PersonalMessage.getSignPayload('0xdeadbeef'),\n *   privateKey: '0x...',\n * })\n *\n * const wrapped = SignatureErc6492.wrap({ // [!code focus]\n *   data: '0xcafebabe', // [!code focus]\n *   signature: Signature.toHex(signature), // [!code focus]\n *   to: '0xcafebabecafebabecafebabecafebabecafebabe', // [!code focus]\n * }) // [!code focus]\n * // @log: '0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041fa78c5905fb0b9d6066ef531f962a62bc6ef0d5eb59ecb134056d206f75aaed7780926ff2601a935c2c79707d9e1799948c9f19dcdde1e090e903b19a07923d01c000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492'\n * ```\n *\n * @category ERC-6492\n */\nexport * as SignatureErc6492 from './SignatureErc6492.js';\n//# sourceMappingURL=index.js.map",
    "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hexToBigInt } from '../encoding/fromHex.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * serializeSignature({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function serializeSignature({ r, s, to = 'hex', v, yParity, }) {\n    const yParity_ = (() => {\n        if (yParity === 0 || yParity === 1)\n            return yParity;\n        if (v && (v === 27n || v === 28n || v >= 35n))\n            return v % 2n === 0n ? 1 : 0;\n        throw new Error('Invalid `v` or `yParity` value');\n    })();\n    const signature = `0x${new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}`;\n    if (to === 'hex')\n        return signature;\n    return hexToBytes(signature);\n}\n//# sourceMappingURL=serializeSignature.js.map",
    "import { SignatureErc6492 } from 'ox/erc6492';\nimport { SignatureErc8010 } from 'ox/erc8010';\nimport { erc1271Abi, erc6492SignatureValidatorAbi, multicall3Abi, } from '../../constants/abis.js';\nimport { erc6492SignatureValidatorByteCode, multicall3Bytecode, } from '../../constants/contracts.js';\nimport { CallExecutionError, ContractFunctionExecutionError, } from '../../errors/contract.js';\nimport { encodeDeployData, } from '../../utils/abi/encodeDeployData.js';\nimport { encodeFunctionData, } from '../../utils/abi/encodeFunctionData.js';\nimport { getAddress, } from '../../utils/address/getAddress.js';\nimport { isAddressEqual, } from '../../utils/address/isAddressEqual.js';\nimport { verifyAuthorization } from '../../utils/authorization/verifyAuthorization.js';\nimport { concatHex } from '../../utils/data/concat.js';\nimport { isHex } from '../../utils/data/isHex.js';\nimport { hexToBool } from '../../utils/encoding/fromHex.js';\nimport { bytesToHex, numberToHex, } from '../../utils/encoding/toHex.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { recoverAddress, } from '../../utils/signature/recoverAddress.js';\nimport { serializeSignature, } from '../../utils/signature/serializeSignature.js';\nimport { call } from './call.js';\nimport { getCode } from './getCode.js';\nimport { readContract } from './readContract.js';\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash(client, parameters) {\n    const { address, hash, erc6492VerifierAddress: verifierAddress = parameters.universalSignatureVerifierAddress ??\n        client.chain?.contracts?.erc6492Verifier?.address, multicallAddress = parameters.multicallAddress ??\n        client.chain?.contracts?.multicall3?.address, } = parameters;\n    const signature = (() => {\n        const signature = parameters.signature;\n        if (isHex(signature))\n            return signature;\n        if (typeof signature === 'object' && 'r' in signature && 's' in signature)\n            return serializeSignature(signature);\n        return bytesToHex(signature);\n    })();\n    try {\n        if (SignatureErc8010.validate(signature))\n            return await verifyErc8010(client, {\n                ...parameters,\n                multicallAddress,\n                signature,\n            });\n        return await verifyErc6492(client, {\n            ...parameters,\n            verifierAddress,\n            signature,\n        });\n    }\n    catch (error) {\n        // Fallback attempt to verify the signature via ECDSA recovery.\n        try {\n            const verified = isAddressEqual(getAddress(address), await recoverAddress({ hash, signature }));\n            if (verified)\n                return true;\n        }\n        catch { }\n        if (error instanceof VerificationError) {\n            // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n            // this can happen for many reasons, for example if signer can not be recovered from the signature\n            // or if the signature has no valid format\n            return false;\n        }\n        throw error;\n    }\n}\n/** @internal */\nexport async function verifyErc8010(client, parameters) {\n    const { address, blockNumber, blockTag, hash, multicallAddress } = parameters;\n    const { authorization: authorization_ox, data: initData, signature, to, } = SignatureErc8010.unwrap(parameters.signature);\n    // Check if already delegated\n    const code = await getCode(client, {\n        address,\n        blockNumber,\n        blockTag,\n    });\n    // If already delegated, perform standard ERC-1271 verification.\n    if (code === concatHex(['0xef0100', authorization_ox.address]))\n        return await verifyErc1271(client, {\n            address,\n            blockNumber,\n            blockTag,\n            hash,\n            signature,\n        });\n    const authorization = {\n        address: authorization_ox.address,\n        chainId: Number(authorization_ox.chainId),\n        nonce: Number(authorization_ox.nonce),\n        r: numberToHex(authorization_ox.r, { size: 32 }),\n        s: numberToHex(authorization_ox.s, { size: 32 }),\n        yParity: authorization_ox.yParity,\n    };\n    const valid = await verifyAuthorization({\n        address,\n        authorization,\n    });\n    if (!valid)\n        throw new VerificationError();\n    // Deployless verification.\n    const results = await getAction(client, readContract, 'readContract')({\n        ...(multicallAddress\n            ? { address: multicallAddress }\n            : { code: multicall3Bytecode }),\n        authorizationList: [authorization],\n        abi: multicall3Abi,\n        blockNumber,\n        blockTag: 'pending',\n        functionName: 'aggregate3',\n        args: [\n            [\n                ...(initData\n                    ? [\n                        {\n                            allowFailure: true,\n                            target: to ?? address,\n                            callData: initData,\n                        },\n                    ]\n                    : []),\n                {\n                    allowFailure: true,\n                    target: address,\n                    callData: encodeFunctionData({\n                        abi: erc1271Abi,\n                        functionName: 'isValidSignature',\n                        args: [hash, signature],\n                    }),\n                },\n            ],\n        ],\n    });\n    const data = results[results.length - 1]?.returnData;\n    if (data?.startsWith('0x1626ba7e'))\n        return true;\n    throw new VerificationError();\n}\n/** @internal */\n// biome-ignore lint/correctness/noUnusedVariables: _\nasync function verifyErc6492(client, parameters) {\n    const { address, factory, factoryData, hash, signature, verifierAddress, ...rest } = parameters;\n    const wrappedSignature = await (async () => {\n        // If no `factory` or `factoryData` is provided, it is assumed that the\n        // address is not a Smart Account, or the Smart Account is already deployed.\n        if (!factory && !factoryData)\n            return signature;\n        // If the signature is already wrapped, return the signature.\n        if (SignatureErc6492.validate(signature))\n            return signature;\n        // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\n        // to perform counterfactual validation.\n        return SignatureErc6492.wrap({\n            data: factoryData,\n            signature,\n            to: factory,\n        });\n    })();\n    const args = verifierAddress\n        ? {\n            to: verifierAddress,\n            data: encodeFunctionData({\n                abi: erc6492SignatureValidatorAbi,\n                functionName: 'isValidSig',\n                args: [address, hash, wrappedSignature],\n            }),\n            ...rest,\n        }\n        : {\n            data: encodeDeployData({\n                abi: erc6492SignatureValidatorAbi,\n                args: [address, hash, wrappedSignature],\n                bytecode: erc6492SignatureValidatorByteCode,\n            }),\n            ...rest,\n        };\n    const { data } = await getAction(client, call, 'call')(args).catch((error) => {\n        if (error instanceof CallExecutionError)\n            throw new VerificationError();\n        throw error;\n    });\n    if (hexToBool(data ?? '0x0'))\n        return true;\n    throw new VerificationError();\n}\n/** @internal */\nexport async function verifyErc1271(client, parameters) {\n    const { address, blockNumber, blockTag, hash, signature } = parameters;\n    const result = await getAction(client, readContract, 'readContract')({\n        address,\n        abi: erc1271Abi,\n        args: [hash, signature],\n        blockNumber,\n        blockTag,\n        functionName: 'isValidSignature',\n    }).catch((error) => {\n        if (error instanceof ContractFunctionExecutionError)\n            throw new VerificationError();\n        throw error;\n    });\n    if (result.startsWith('0x1626ba7e'))\n        return true;\n    throw new VerificationError();\n}\nclass VerificationError extends Error {\n}\n//# sourceMappingURL=verifyHash.js.map",
    "import { hashMessage } from '../../utils/signature/hashMessage.js';\nimport { verifyHash, } from './verifyHash.js';\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage(client, { address, message, factory, factoryData, signature, ...callRequest }) {\n    const hash = hashMessage(message);\n    return verifyHash(client, {\n        address,\n        factory: factory,\n        factoryData: factoryData,\n        hash,\n        signature,\n        ...callRequest,\n    });\n}\n//# sourceMappingURL=verifyMessage.js.map",
    "import { hashTypedData, } from '../../utils/signature/hashTypedData.js';\nimport { verifyHash, } from './verifyHash.js';\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData(client, parameters) {\n    const { address, factory, factoryData, signature, message, primaryType, types, domain, ...callRequest } = parameters;\n    const hash = hashTypedData({ message, primaryType, types, domain });\n    return verifyHash(client, {\n        address,\n        factory: factory,\n        factoryData: factoryData,\n        hash,\n        signature,\n        ...callRequest,\n    });\n}\n//# sourceMappingURL=verifyTypedData.js.map",
    "import { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { getBlockNumber, } from './getBlockNumber.js';\n/**\n * Watches and returns incoming block numbers.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlockNumberParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, watchBlockNumber, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlockNumber(client, {\n *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n * })\n */\nexport function watchBlockNumber(client, { emitOnBegin = false, emitMissed = false, onBlockNumber, onError, poll: poll_, pollingInterval = client.pollingInterval, }) {\n    const enablePolling = (() => {\n        if (typeof poll_ !== 'undefined')\n            return poll_;\n        if (client.transport.type === 'webSocket' ||\n            client.transport.type === 'ipc')\n            return false;\n        if (client.transport.type === 'fallback' &&\n            (client.transport.transports[0].config.type === 'webSocket' ||\n                client.transport.transports[0].config.type === 'ipc'))\n            return false;\n        return true;\n    })();\n    let prevBlockNumber;\n    const pollBlockNumber = () => {\n        const observerId = stringify([\n            'watchBlockNumber',\n            client.uid,\n            emitOnBegin,\n            emitMissed,\n            pollingInterval,\n        ]);\n        return observe(observerId, { onBlockNumber, onError }, (emit) => poll(async () => {\n            try {\n                const blockNumber = await getAction(client, getBlockNumber, 'getBlockNumber')({ cacheTime: 0 });\n                if (prevBlockNumber !== undefined) {\n                    // If the current block number is the same as the previous,\n                    // we can skip.\n                    if (blockNumber === prevBlockNumber)\n                        return;\n                    // If we have missed out on some previous blocks, and the\n                    // `emitMissed` flag is truthy, let's emit those blocks.\n                    if (blockNumber - prevBlockNumber > 1 && emitMissed) {\n                        for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\n                            emit.onBlockNumber(i, prevBlockNumber);\n                            prevBlockNumber = i;\n                        }\n                    }\n                }\n                // If the next block number is greater than the previous,\n                // it is not in the past, and we can emit the new block number.\n                if (prevBlockNumber === undefined ||\n                    blockNumber > prevBlockNumber) {\n                    emit.onBlockNumber(blockNumber, prevBlockNumber);\n                    prevBlockNumber = blockNumber;\n                }\n            }\n            catch (err) {\n                emit.onError?.(err);\n            }\n        }, {\n            emitOnBegin,\n            interval: pollingInterval,\n        }));\n    };\n    const subscribeBlockNumber = () => {\n        const observerId = stringify([\n            'watchBlockNumber',\n            client.uid,\n            emitOnBegin,\n            emitMissed,\n        ]);\n        return observe(observerId, { onBlockNumber, onError }, (emit) => {\n            let active = true;\n            let unsubscribe = () => (active = false);\n            (async () => {\n                try {\n                    const transport = (() => {\n                        if (client.transport.type === 'fallback') {\n                            const transport = client.transport.transports.find((transport) => transport.config.type === 'webSocket' ||\n                                transport.config.type === 'ipc');\n                            if (!transport)\n                                return client.transport;\n                            return transport.value;\n                        }\n                        return client.transport;\n                    })();\n                    const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n                        params: ['newHeads'],\n                        onData(data) {\n                            if (!active)\n                                return;\n                            const blockNumber = hexToBigInt(data.result?.number);\n                            emit.onBlockNumber(blockNumber, prevBlockNumber);\n                            prevBlockNumber = blockNumber;\n                        },\n                        onError(error) {\n                            emit.onError?.(error);\n                        },\n                    });\n                    unsubscribe = unsubscribe_;\n                    if (!active)\n                        unsubscribe();\n                }\n                catch (err) {\n                    onError?.(err);\n                }\n            })();\n            return () => unsubscribe();\n        });\n    };\n    return enablePolling ? pollBlockNumber() : subscribeBlockNumber();\n}\n//# sourceMappingURL=watchBlockNumber.js.map",
    "import { BlockNotFoundError } from '../../errors/block.js';\nimport { TransactionNotFoundError, TransactionReceiptNotFoundError, WaitForTransactionReceiptTimeoutError, } from '../../errors/transaction.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { withResolvers } from '../../utils/promise/withResolvers.js';\nimport { withRetry, } from '../../utils/promise/withRetry.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { getBlock } from './getBlock.js';\nimport { getTransaction, } from './getTransaction.js';\nimport { getTransactionReceipt, } from './getTransactionReceipt.js';\nimport { watchBlockNumber, } from './watchBlockNumber.js';\n/**\n * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt).\n *\n * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n * - JSON-RPC Methods:\n *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n *   - If a Transaction has been replaced:\n *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n *     - Checks if one of the Transactions is a replacement\n *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n *\n * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n *\n * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n *\n * There are 3 types of Transaction Replacement reasons:\n *\n * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForTransactionReceiptParameters}\n * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, waitForTransactionReceipt, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await waitForTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function waitForTransactionReceipt(client, parameters) {\n    const { checkReplacement = true, confirmations = 1, hash, onReplaced, retryCount = 6, retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff\n    timeout = 180_000, } = parameters;\n    const observerId = stringify(['waitForTransactionReceipt', client.uid, hash]);\n    const pollingInterval = (() => {\n        if (parameters.pollingInterval)\n            return parameters.pollingInterval;\n        if (client.chain?.experimental_preconfirmationTime)\n            return client.chain.experimental_preconfirmationTime;\n        return client.pollingInterval;\n    })();\n    let transaction;\n    let replacedTransaction;\n    let receipt;\n    let retrying = false;\n    let _unobserve;\n    let _unwatch;\n    const { promise, resolve, reject } = withResolvers();\n    const timer = timeout\n        ? setTimeout(() => {\n            _unwatch?.();\n            _unobserve?.();\n            reject(new WaitForTransactionReceiptTimeoutError({ hash }));\n        }, timeout)\n        : undefined;\n    _unobserve = observe(observerId, { onReplaced, resolve, reject }, async (emit) => {\n        receipt = await getAction(client, getTransactionReceipt, 'getTransactionReceipt')({ hash }).catch(() => undefined);\n        if (receipt && confirmations <= 1) {\n            clearTimeout(timer);\n            emit.resolve(receipt);\n            _unobserve?.();\n            return;\n        }\n        _unwatch = getAction(client, watchBlockNumber, 'watchBlockNumber')({\n            emitMissed: true,\n            emitOnBegin: true,\n            poll: true,\n            pollingInterval,\n            async onBlockNumber(blockNumber_) {\n                const done = (fn) => {\n                    clearTimeout(timer);\n                    _unwatch?.();\n                    fn();\n                    _unobserve?.();\n                };\n                let blockNumber = blockNumber_;\n                if (retrying)\n                    return;\n                try {\n                    // If we already have a valid receipt, let's check if we have enough\n                    // confirmations. If we do, then we can resolve.\n                    if (receipt) {\n                        if (confirmations > 1 &&\n                            (!receipt.blockNumber ||\n                                blockNumber - receipt.blockNumber + 1n < confirmations))\n                            return;\n                        done(() => emit.resolve(receipt));\n                        return;\n                    }\n                    // Get the transaction to check if it's been replaced.\n                    // We need to retry as some RPC Providers may be slow to sync\n                    // up mined transactions.\n                    if (checkReplacement && !transaction) {\n                        retrying = true;\n                        await withRetry(async () => {\n                            transaction = (await getAction(client, getTransaction, 'getTransaction')({ hash }));\n                            if (transaction.blockNumber)\n                                blockNumber = transaction.blockNumber;\n                        }, {\n                            delay: retryDelay,\n                            retryCount,\n                        });\n                        retrying = false;\n                    }\n                    // Get the receipt to check if it's been processed.\n                    receipt = await getAction(client, getTransactionReceipt, 'getTransactionReceipt')({ hash });\n                    // Check if we have enough confirmations. If not, continue polling.\n                    if (confirmations > 1 &&\n                        (!receipt.blockNumber ||\n                            blockNumber - receipt.blockNumber + 1n < confirmations))\n                        return;\n                    done(() => emit.resolve(receipt));\n                }\n                catch (err) {\n                    // If the receipt is not found, the transaction will be pending.\n                    // We need to check if it has potentially been replaced.\n                    if (err instanceof TransactionNotFoundError ||\n                        err instanceof TransactionReceiptNotFoundError) {\n                        if (!transaction) {\n                            retrying = false;\n                            return;\n                        }\n                        try {\n                            replacedTransaction = transaction;\n                            // Let's retrieve the transactions from the current block.\n                            // We need to retry as some RPC Providers may be slow to sync\n                            // up mined blocks.\n                            retrying = true;\n                            const block = await withRetry(() => getAction(client, getBlock, 'getBlock')({\n                                blockNumber,\n                                includeTransactions: true,\n                            }), {\n                                delay: retryDelay,\n                                retryCount,\n                                shouldRetry: ({ error }) => error instanceof BlockNotFoundError,\n                            });\n                            retrying = false;\n                            const replacementTransaction = block.transactions.find(({ from, nonce }) => from === replacedTransaction.from &&\n                                nonce === replacedTransaction.nonce);\n                            // If we couldn't find a replacement transaction, continue polling.\n                            if (!replacementTransaction)\n                                return;\n                            // If we found a replacement transaction, return it's receipt.\n                            receipt = await getAction(client, getTransactionReceipt, 'getTransactionReceipt')({\n                                hash: replacementTransaction.hash,\n                            });\n                            // Check if we have enough confirmations. If not, continue polling.\n                            if (confirmations > 1 &&\n                                (!receipt.blockNumber ||\n                                    blockNumber - receipt.blockNumber + 1n < confirmations))\n                                return;\n                            let reason = 'replaced';\n                            if (replacementTransaction.to === replacedTransaction.to &&\n                                replacementTransaction.value === replacedTransaction.value &&\n                                replacementTransaction.input === replacedTransaction.input) {\n                                reason = 'repriced';\n                            }\n                            else if (replacementTransaction.from === replacementTransaction.to &&\n                                replacementTransaction.value === 0n) {\n                                reason = 'cancelled';\n                            }\n                            done(() => {\n                                emit.onReplaced?.({\n                                    reason,\n                                    replacedTransaction: replacedTransaction,\n                                    transaction: replacementTransaction,\n                                    transactionReceipt: receipt,\n                                });\n                                emit.resolve(receipt);\n                            });\n                        }\n                        catch (err_) {\n                            done(() => emit.reject(err_));\n                        }\n                    }\n                    else {\n                        done(() => emit.reject(err));\n                    }\n                }\n            },\n        });\n    });\n    return promise;\n}\n//# sourceMappingURL=waitForTransactionReceipt.js.map",
    "import { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { getBlock } from './getBlock.js';\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks(client, { blockTag = client.experimental_blockTag ?? 'latest', emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval, }) {\n    const enablePolling = (() => {\n        if (typeof poll_ !== 'undefined')\n            return poll_;\n        if (client.transport.type === 'webSocket' ||\n            client.transport.type === 'ipc')\n            return false;\n        if (client.transport.type === 'fallback' &&\n            (client.transport.transports[0].config.type === 'webSocket' ||\n                client.transport.transports[0].config.type === 'ipc'))\n            return false;\n        return true;\n    })();\n    const includeTransactions = includeTransactions_ ?? false;\n    let prevBlock;\n    const pollBlocks = () => {\n        const observerId = stringify([\n            'watchBlocks',\n            client.uid,\n            blockTag,\n            emitMissed,\n            emitOnBegin,\n            includeTransactions,\n            pollingInterval,\n        ]);\n        return observe(observerId, { onBlock, onError }, (emit) => poll(async () => {\n            try {\n                const block = await getAction(client, getBlock, 'getBlock')({\n                    blockTag,\n                    includeTransactions,\n                });\n                if (block.number !== null && prevBlock?.number != null) {\n                    // If the current block number is the same as the previous,\n                    // we can skip.\n                    if (block.number === prevBlock.number)\n                        return;\n                    // If we have missed out on some previous blocks, and the\n                    // `emitMissed` flag is truthy, let's emit those blocks.\n                    if (block.number - prevBlock.number > 1 && emitMissed) {\n                        for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                            const block = (await getAction(client, getBlock, 'getBlock')({\n                                blockNumber: i,\n                                includeTransactions,\n                            }));\n                            emit.onBlock(block, prevBlock);\n                            prevBlock = block;\n                        }\n                    }\n                }\n                if (\n                // If no previous block exists, emit.\n                prevBlock?.number == null ||\n                    // If the block tag is \"pending\" with no block number, emit.\n                    (blockTag === 'pending' && block?.number == null) ||\n                    // If the next block number is greater than the previous block number, emit.\n                    // We don't want to emit blocks in the past.\n                    (block.number !== null && block.number > prevBlock.number)) {\n                    emit.onBlock(block, prevBlock);\n                    prevBlock = block;\n                }\n            }\n            catch (err) {\n                emit.onError?.(err);\n            }\n        }, {\n            emitOnBegin,\n            interval: pollingInterval,\n        }));\n    };\n    const subscribeBlocks = () => {\n        let active = true;\n        let emitFetched = true;\n        let unsubscribe = () => (active = false);\n        (async () => {\n            try {\n                if (emitOnBegin) {\n                    getAction(client, getBlock, 'getBlock')({\n                        blockTag,\n                        includeTransactions,\n                    })\n                        .then((block) => {\n                        if (!active)\n                            return;\n                        if (!emitFetched)\n                            return;\n                        onBlock(block, undefined);\n                        emitFetched = false;\n                    })\n                        .catch(onError);\n                }\n                const transport = (() => {\n                    if (client.transport.type === 'fallback') {\n                        const transport = client.transport.transports.find((transport) => transport.config.type === 'webSocket' ||\n                            transport.config.type === 'ipc');\n                        if (!transport)\n                            return client.transport;\n                        return transport.value;\n                    }\n                    return client.transport;\n                })();\n                const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n                    params: ['newHeads'],\n                    async onData(data) {\n                        if (!active)\n                            return;\n                        const block = (await getAction(client, getBlock, 'getBlock')({\n                            blockNumber: data.result?.number,\n                            includeTransactions,\n                        }).catch(() => { }));\n                        if (!active)\n                            return;\n                        onBlock(block, prevBlock);\n                        emitFetched = false;\n                        prevBlock = block;\n                    },\n                    onError(error) {\n                        onError?.(error);\n                    },\n                });\n                unsubscribe = unsubscribe_;\n                if (!active)\n                    unsubscribe();\n            }\n            catch (err) {\n                onError?.(err);\n            }\n        })();\n        return () => unsubscribe();\n    };\n    return enablePolling ? pollBlocks() : subscribeBlocks();\n}\n//# sourceMappingURL=watchBlocks.js.map",
    "import { DecodeLogDataMismatch, DecodeLogTopicsMismatch, } from '../../errors/abi.js';\nimport { InvalidInputRpcError } from '../../errors/rpc.js';\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js';\nimport { encodeEventTopics, } from '../../utils/abi/encodeEventTopics.js';\nimport { formatLog } from '../../utils/formatters/log.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { createEventFilter, } from './createEventFilter.js';\nimport { getBlockNumber } from './getBlockNumber.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { getLogs } from './getLogs.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent(client, { address, args, batch = true, event, events, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_, }) {\n    const enablePolling = (() => {\n        if (typeof poll_ !== 'undefined')\n            return poll_;\n        if (typeof fromBlock === 'bigint')\n            return true;\n        if (client.transport.type === 'webSocket' ||\n            client.transport.type === 'ipc')\n            return false;\n        if (client.transport.type === 'fallback' &&\n            (client.transport.transports[0].config.type === 'webSocket' ||\n                client.transport.transports[0].config.type === 'ipc'))\n            return false;\n        return true;\n    })();\n    const strict = strict_ ?? false;\n    const pollEvent = () => {\n        const observerId = stringify([\n            'watchEvent',\n            address,\n            args,\n            batch,\n            client.uid,\n            event,\n            pollingInterval,\n            fromBlock,\n        ]);\n        return observe(observerId, { onLogs, onError }, (emit) => {\n            let previousBlockNumber;\n            if (fromBlock !== undefined)\n                previousBlockNumber = fromBlock - 1n;\n            let filter;\n            let initialized = false;\n            const unwatch = poll(async () => {\n                if (!initialized) {\n                    try {\n                        filter = (await getAction(client, createEventFilter, 'createEventFilter')({\n                            address,\n                            args,\n                            event: event,\n                            events,\n                            strict,\n                            fromBlock,\n                        }));\n                    }\n                    catch { }\n                    initialized = true;\n                    return;\n                }\n                try {\n                    let logs;\n                    if (filter) {\n                        logs = await getAction(client, getFilterChanges, 'getFilterChanges')({ filter });\n                    }\n                    else {\n                        // If the filter doesn't exist, we will fall back to use `getLogs`.\n                        // The fall back exists because some RPC Providers do not support filters.\n                        // Fetch the block number to use for `getLogs`.\n                        const blockNumber = await getAction(client, getBlockNumber, 'getBlockNumber')({});\n                        // If the block number has changed, we will need to fetch the logs.\n                        // If the block number doesn't exist, we are yet to reach the first poll interval,\n                        // so do not emit any logs.\n                        if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                            logs = await getAction(client, getLogs, 'getLogs')({\n                                address,\n                                args,\n                                event: event,\n                                events,\n                                fromBlock: previousBlockNumber + 1n,\n                                toBlock: blockNumber,\n                            });\n                        }\n                        else {\n                            logs = [];\n                        }\n                        previousBlockNumber = blockNumber;\n                    }\n                    if (logs.length === 0)\n                        return;\n                    if (batch)\n                        emit.onLogs(logs);\n                    else\n                        for (const log of logs)\n                            emit.onLogs([log]);\n                }\n                catch (err) {\n                    // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n                    // Reinitialize the filter when this occurs\n                    if (filter && err instanceof InvalidInputRpcError)\n                        initialized = false;\n                    emit.onError?.(err);\n                }\n            }, {\n                emitOnBegin: true,\n                interval: pollingInterval,\n            });\n            return async () => {\n                if (filter)\n                    await getAction(client, uninstallFilter, 'uninstallFilter')({ filter });\n                unwatch();\n            };\n        });\n    };\n    const subscribeEvent = () => {\n        let active = true;\n        let unsubscribe = () => (active = false);\n        (async () => {\n            try {\n                const transport = (() => {\n                    if (client.transport.type === 'fallback') {\n                        const transport = client.transport.transports.find((transport) => transport.config.type === 'webSocket' ||\n                            transport.config.type === 'ipc');\n                        if (!transport)\n                            return client.transport;\n                        return transport.value;\n                    }\n                    return client.transport;\n                })();\n                const events_ = events ?? (event ? [event] : undefined);\n                let topics = [];\n                if (events_) {\n                    const encoded = events_.flatMap((event) => encodeEventTopics({\n                        abi: [event],\n                        eventName: event.name,\n                        args,\n                    }));\n                    // TODO: Clean up type casting\n                    topics = [encoded];\n                    if (event)\n                        topics = topics[0];\n                }\n                const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n                    params: ['logs', { address, topics }],\n                    onData(data) {\n                        if (!active)\n                            return;\n                        const log = data.result;\n                        try {\n                            const { eventName, args } = decodeEventLog({\n                                abi: events_ ?? [],\n                                data: log.data,\n                                topics: log.topics,\n                                strict,\n                            });\n                            const formatted = formatLog(log, { args, eventName });\n                            onLogs([formatted]);\n                        }\n                        catch (err) {\n                            let eventName;\n                            let isUnnamed;\n                            if (err instanceof DecodeLogDataMismatch ||\n                                err instanceof DecodeLogTopicsMismatch) {\n                                // If strict mode is on, and log data/topics do not match event definition, skip.\n                                if (strict_)\n                                    return;\n                                eventName = err.abiItem.name;\n                                isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name));\n                            }\n                            // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                            const formatted = formatLog(log, {\n                                args: isUnnamed ? [] : {},\n                                eventName,\n                            });\n                            onLogs([formatted]);\n                        }\n                    },\n                    onError(error) {\n                        onError?.(error);\n                    },\n                });\n                unsubscribe = unsubscribe_;\n                if (!active)\n                    unsubscribe();\n            }\n            catch (err) {\n                onError?.(err);\n            }\n        })();\n        return () => unsubscribe();\n    };\n    return enablePolling ? pollEvent() : subscribeEvent();\n}\n//# sourceMappingURL=watchEvent.js.map",
    "import { getAction } from '../../utils/getAction.js';\nimport { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { createPendingTransactionFilter } from './createPendingTransactionFilter.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns pending transaction hashes.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n * - JSON-RPC Methods:\n *   - When `poll: true`\n *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n *\n * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n *\n * @param client - Client to use\n * @param parameters - {@link WatchPendingTransactionsParameters}\n * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchPendingTransactions } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = await watchPendingTransactions(client, {\n *   onTransactions: (hashes) => console.log(hashes),\n * })\n */\nexport function watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval, }) {\n    const enablePolling = typeof poll_ !== 'undefined'\n        ? poll_\n        : client.transport.type !== 'webSocket' && client.transport.type !== 'ipc';\n    const pollPendingTransactions = () => {\n        const observerId = stringify([\n            'watchPendingTransactions',\n            client.uid,\n            batch,\n            pollingInterval,\n        ]);\n        return observe(observerId, { onTransactions, onError }, (emit) => {\n            let filter;\n            const unwatch = poll(async () => {\n                try {\n                    if (!filter) {\n                        try {\n                            filter = await getAction(client, createPendingTransactionFilter, 'createPendingTransactionFilter')({});\n                            return;\n                        }\n                        catch (err) {\n                            unwatch();\n                            throw err;\n                        }\n                    }\n                    const hashes = await getAction(client, getFilterChanges, 'getFilterChanges')({ filter });\n                    if (hashes.length === 0)\n                        return;\n                    if (batch)\n                        emit.onTransactions(hashes);\n                    else\n                        for (const hash of hashes)\n                            emit.onTransactions([hash]);\n                }\n                catch (err) {\n                    emit.onError?.(err);\n                }\n            }, {\n                emitOnBegin: true,\n                interval: pollingInterval,\n            });\n            return async () => {\n                if (filter)\n                    await getAction(client, uninstallFilter, 'uninstallFilter')({ filter });\n                unwatch();\n            };\n        });\n    };\n    const subscribePendingTransactions = () => {\n        let active = true;\n        let unsubscribe = () => (active = false);\n        (async () => {\n            try {\n                const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n                    params: ['newPendingTransactions'],\n                    onData(data) {\n                        if (!active)\n                            return;\n                        const transaction = data.result;\n                        onTransactions([transaction]);\n                    },\n                    onError(error) {\n                        onError?.(error);\n                    },\n                });\n                unsubscribe = unsubscribe_;\n                if (!active)\n                    unsubscribe();\n            }\n            catch (err) {\n                onError?.(err);\n            }\n        })();\n        return () => unsubscribe();\n    };\n    return enablePolling\n        ? pollPendingTransactions()\n        : subscribePendingTransactions();\n}\n//# sourceMappingURL=watchPendingTransactions.js.map",
    "/**\n * @description Parses EIP-4361 formatted message into message fields object.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n *\n * @returns EIP-4361 fields object\n */\nexport function parseSiweMessage(message) {\n    const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n        ?.groups ?? {});\n    const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } = (message.match(suffixRegex)?.groups ?? {});\n    const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1);\n    return {\n        ...prefix,\n        ...suffix,\n        ...(chainId ? { chainId: Number(chainId) } : {}),\n        ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n        ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n        ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n        ...(requestId ? { requestId } : {}),\n        ...(resources ? { resources } : {}),\n        ...(scheme ? { scheme } : {}),\n        ...(statement ? { statement } : {}),\n    };\n}\n// https://regexr.com/80gdj\nconst prefixRegex = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/;\n// https://regexr.com/80gf9\nconst suffixRegex = /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/;\n//# sourceMappingURL=parseSiweMessage.js.map",
    "import { isAddress } from '../address/isAddress.js';\nimport { isAddressEqual } from '../address/isAddressEqual.js';\n/**\n * @description Validates EIP-4361 message.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n */\nexport function validateSiweMessage(parameters) {\n    const { address, domain, message, nonce, scheme, time = new Date(), } = parameters;\n    if (domain && message.domain !== domain)\n        return false;\n    if (nonce && message.nonce !== nonce)\n        return false;\n    if (scheme && message.scheme !== scheme)\n        return false;\n    if (message.expirationTime && time >= message.expirationTime)\n        return false;\n    if (message.notBefore && time < message.notBefore)\n        return false;\n    try {\n        if (!message.address)\n            return false;\n        if (!isAddress(message.address, { strict: false }))\n            return false;\n        if (address && !isAddressEqual(message.address, address))\n            return false;\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=validateSiweMessage.js.map",
    "import { hashMessage } from '../../utils/signature/hashMessage.js';\nimport { parseSiweMessage } from '../../utils/siwe/parseSiweMessage.js';\nimport { validateSiweMessage, } from '../../utils/siwe/validateSiweMessage.js';\nimport { verifyHash, } from '../public/verifyHash.js';\n/**\n * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifySiweMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n */\nexport async function verifySiweMessage(client, parameters) {\n    const { address, domain, message, nonce, scheme, signature, time = new Date(), ...callRequest } = parameters;\n    const parsed = parseSiweMessage(message);\n    if (!parsed.address)\n        return false;\n    const isValid = validateSiweMessage({\n        address,\n        domain,\n        message: parsed,\n        nonce,\n        scheme,\n        time,\n    });\n    if (!isValid)\n        return false;\n    const hash = hashMessage(message);\n    return verifyHash(client, {\n        address: parsed.address,\n        hash,\n        signature,\n        ...callRequest,\n    });\n}\n//# sourceMappingURL=verifySiweMessage.js.map",
    "import { TransactionReceiptRevertedError } from '../../errors/transaction.js';\nimport { formatTransactionReceipt } from '../../utils/formatters/transactionReceipt.js';\nimport { numberToHex, } from '../../utils/index.js';\n/**\n * Sends a **signed** transaction to the network synchronously,\n * and waits for the transaction to be included in a block.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransactionSync\n * - JSON-RPC Method: [`eth_sendRawTransactionSync`](https://eips.ethereum.org/EIPS/eip-7966)\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionParameters}\n * @returns The transaction receipt. {@link SendRawTransactionSyncReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendRawTransactionSync } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const receipt = await sendRawTransactionSync(client, {\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n * })\n */\nexport async function sendRawTransactionSync(client, { serializedTransaction, throwOnReceiptRevert, timeout, }) {\n    const receipt = await client.request({\n        method: 'eth_sendRawTransactionSync',\n        params: timeout\n            ? [serializedTransaction, numberToHex(timeout)]\n            : [serializedTransaction],\n    }, { retryCount: 0 });\n    const format = client.chain?.formatters?.transactionReceipt?.format ||\n        formatTransactionReceipt;\n    const formatted = format(receipt);\n    if (formatted.status === 'reverted' && throwOnReceiptRevert)\n        throw new TransactionReceiptRevertedError({ receipt: formatted });\n    return formatted;\n}\n//# sourceMappingURL=sendRawTransactionSync.js.map",
    "import { getEnsAddress, } from '../../actions/ens/getEnsAddress.js';\nimport { getEnsAvatar, } from '../../actions/ens/getEnsAvatar.js';\nimport { getEnsName, } from '../../actions/ens/getEnsName.js';\nimport { getEnsResolver, } from '../../actions/ens/getEnsResolver.js';\nimport { getEnsText, } from '../../actions/ens/getEnsText.js';\nimport { call, } from '../../actions/public/call.js';\nimport { createAccessList, } from '../../actions/public/createAccessList.js';\nimport { createBlockFilter, } from '../../actions/public/createBlockFilter.js';\nimport { createContractEventFilter, } from '../../actions/public/createContractEventFilter.js';\nimport { createEventFilter, } from '../../actions/public/createEventFilter.js';\nimport { createPendingTransactionFilter, } from '../../actions/public/createPendingTransactionFilter.js';\nimport { estimateContractGas, } from '../../actions/public/estimateContractGas.js';\nimport { estimateFeesPerGas, } from '../../actions/public/estimateFeesPerGas.js';\nimport { estimateGas, } from '../../actions/public/estimateGas.js';\nimport { estimateMaxPriorityFeePerGas, } from '../../actions/public/estimateMaxPriorityFeePerGas.js';\nimport { getBalance, } from '../../actions/public/getBalance.js';\nimport { getBlobBaseFee, } from '../../actions/public/getBlobBaseFee.js';\nimport { getBlock, } from '../../actions/public/getBlock.js';\nimport { getBlockNumber, } from '../../actions/public/getBlockNumber.js';\nimport { getBlockTransactionCount, } from '../../actions/public/getBlockTransactionCount.js';\nimport { getChainId, } from '../../actions/public/getChainId.js';\nimport { getCode, } from '../../actions/public/getCode.js';\nimport { getContractEvents, } from '../../actions/public/getContractEvents.js';\nimport { getEip712Domain, } from '../../actions/public/getEip712Domain.js';\nimport { getFeeHistory, } from '../../actions/public/getFeeHistory.js';\nimport { getFilterChanges, } from '../../actions/public/getFilterChanges.js';\nimport { getFilterLogs, } from '../../actions/public/getFilterLogs.js';\nimport { getGasPrice, } from '../../actions/public/getGasPrice.js';\nimport { getLogs, } from '../../actions/public/getLogs.js';\nimport { getProof, } from '../../actions/public/getProof.js';\nimport { getStorageAt, } from '../../actions/public/getStorageAt.js';\nimport { getTransaction, } from '../../actions/public/getTransaction.js';\nimport { getTransactionConfirmations, } from '../../actions/public/getTransactionConfirmations.js';\nimport { getTransactionCount, } from '../../actions/public/getTransactionCount.js';\nimport { getTransactionReceipt, } from '../../actions/public/getTransactionReceipt.js';\nimport { multicall, } from '../../actions/public/multicall.js';\nimport { readContract, } from '../../actions/public/readContract.js';\nimport { simulateBlocks, } from '../../actions/public/simulateBlocks.js';\nimport { simulateCalls, } from '../../actions/public/simulateCalls.js';\nimport { simulateContract, } from '../../actions/public/simulateContract.js';\nimport { uninstallFilter, } from '../../actions/public/uninstallFilter.js';\nimport { verifyHash, } from '../../actions/public/verifyHash.js';\nimport { verifyMessage, } from '../../actions/public/verifyMessage.js';\nimport { verifyTypedData, } from '../../actions/public/verifyTypedData.js';\nimport { waitForTransactionReceipt, } from '../../actions/public/waitForTransactionReceipt.js';\nimport { watchBlockNumber, } from '../../actions/public/watchBlockNumber.js';\nimport { watchBlocks, } from '../../actions/public/watchBlocks.js';\nimport { watchContractEvent, } from '../../actions/public/watchContractEvent.js';\nimport { watchEvent, } from '../../actions/public/watchEvent.js';\nimport { watchPendingTransactions, } from '../../actions/public/watchPendingTransactions.js';\nimport { verifySiweMessage, } from '../../actions/siwe/verifySiweMessage.js';\nimport { prepareTransactionRequest, } from '../../actions/wallet/prepareTransactionRequest.js';\nimport { sendRawTransaction, } from '../../actions/wallet/sendRawTransaction.js';\nimport { sendRawTransactionSync, } from '../../actions/wallet/sendRawTransactionSync.js';\nexport function publicActions(client) {\n    return {\n        call: (args) => call(client, args),\n        createAccessList: (args) => createAccessList(client, args),\n        createBlockFilter: () => createBlockFilter(client),\n        createContractEventFilter: (args) => createContractEventFilter(client, args),\n        createEventFilter: (args) => createEventFilter(client, args),\n        createPendingTransactionFilter: () => createPendingTransactionFilter(client),\n        estimateContractGas: (args) => estimateContractGas(client, args),\n        estimateGas: (args) => estimateGas(client, args),\n        getBalance: (args) => getBalance(client, args),\n        getBlobBaseFee: () => getBlobBaseFee(client),\n        getBlock: (args) => getBlock(client, args),\n        getBlockNumber: (args) => getBlockNumber(client, args),\n        getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\n        getBytecode: (args) => getCode(client, args),\n        getChainId: () => getChainId(client),\n        getCode: (args) => getCode(client, args),\n        getContractEvents: (args) => getContractEvents(client, args),\n        getEip712Domain: (args) => getEip712Domain(client, args),\n        getEnsAddress: (args) => getEnsAddress(client, args),\n        getEnsAvatar: (args) => getEnsAvatar(client, args),\n        getEnsName: (args) => getEnsName(client, args),\n        getEnsResolver: (args) => getEnsResolver(client, args),\n        getEnsText: (args) => getEnsText(client, args),\n        getFeeHistory: (args) => getFeeHistory(client, args),\n        estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\n        getFilterChanges: (args) => getFilterChanges(client, args),\n        getFilterLogs: (args) => getFilterLogs(client, args),\n        getGasPrice: () => getGasPrice(client),\n        getLogs: (args) => getLogs(client, args),\n        getProof: (args) => getProof(client, args),\n        estimateMaxPriorityFeePerGas: (args) => estimateMaxPriorityFeePerGas(client, args),\n        getStorageAt: (args) => getStorageAt(client, args),\n        getTransaction: (args) => getTransaction(client, args),\n        getTransactionConfirmations: (args) => getTransactionConfirmations(client, args),\n        getTransactionCount: (args) => getTransactionCount(client, args),\n        getTransactionReceipt: (args) => getTransactionReceipt(client, args),\n        multicall: (args) => multicall(client, args),\n        prepareTransactionRequest: (args) => prepareTransactionRequest(client, args),\n        readContract: (args) => readContract(client, args),\n        sendRawTransaction: (args) => sendRawTransaction(client, args),\n        sendRawTransactionSync: (args) => sendRawTransactionSync(client, args),\n        simulate: (args) => simulateBlocks(client, args),\n        simulateBlocks: (args) => simulateBlocks(client, args),\n        simulateCalls: (args) => simulateCalls(client, args),\n        simulateContract: (args) => simulateContract(client, args),\n        verifyHash: (args) => verifyHash(client, args),\n        verifyMessage: (args) => verifyMessage(client, args),\n        verifySiweMessage: (args) => verifySiweMessage(client, args),\n        verifyTypedData: (args) => verifyTypedData(client, args),\n        uninstallFilter: (args) => uninstallFilter(client, args),\n        waitForTransactionReceipt: (args) => waitForTransactionReceipt(client, args),\n        watchBlocks: (args) => watchBlocks(client, args),\n        watchBlockNumber: (args) => watchBlockNumber(client, args),\n        watchContractEvent: (args) => watchContractEvent(client, args),\n        watchEvent: (args) => watchEvent(client, args),\n        watchPendingTransactions: (args) => watchPendingTransactions(client, args),\n    };\n}\n//# sourceMappingURL=public.js.map",
    "import { createClient, } from './createClient.js';\nimport { publicActions } from './decorators/public.js';\n/**\n * Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/public\n *\n * A Public Client is an interface to \"public\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Public Client. {@link PublicClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createPublicClient(parameters) {\n    const { key = 'public', name = 'Public Client' } = parameters;\n    const client = createClient({\n        ...parameters,\n        key,\n        name,\n        type: 'publicClient',\n    });\n    return client.extend(publicActions);\n}\n//# sourceMappingURL=createPublicClient.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain(client, { chain }) {\n    const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain;\n    await client.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n            {\n                chainId: numberToHex(id),\n                chainName: name,\n                nativeCurrency,\n                rpcUrls: rpcUrls.default.http,\n                blockExplorerUrls: blockExplorers\n                    ? Object.values(blockExplorers).map(({ url }) => url)\n                    : undefined,\n            },\n        ],\n    }, { dedupe: true, retryCount: 0 });\n}\n//# sourceMappingURL=addChain.js.map",
    "import { encodeDeployData } from '../../utils/abi/encodeDeployData.js';\nimport { sendTransaction, } from './sendTransaction.js';\n/**\n * Deploys a contract to the network, given bytecode and constructor arguments.\n *\n * - Docs: https://viem.sh/docs/contract/deployContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_deploying-contracts\n *\n * @param client - Client to use\n * @param parameters - {@link DeployContractParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n *\n * @example\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { deployContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await deployContract(client, {\n *   abi: [],\n *   account: '0x…,\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n * })\n */\nexport function deployContract(walletClient, parameters) {\n    const { abi, args, bytecode, ...request } = parameters;\n    const calldata = encodeDeployData({ abi, args, bytecode });\n    return sendTransaction(walletClient, {\n        ...request,\n        ...(request.authorizationList ? { to: null } : {}),\n        data: calldata,\n    });\n}\n//# sourceMappingURL=deployContract.js.map",
    "import { checksumAddress, } from '../../utils/address/getAddress.js';\n/**\n * Returns a list of account addresses owned by the wallet or client.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getAddresses\n * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\n *\n * @param client - Client to use\n * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getAddresses } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const accounts = await getAddresses(client)\n */\nexport async function getAddresses(client) {\n    if (client.account?.type === 'local')\n        return [client.account.address];\n    const addresses = await client.request({ method: 'eth_accounts' }, { dedupe: true });\n    return addresses.map((address) => checksumAddress(address));\n}\n//# sourceMappingURL=getAddresses.js.map",
    "import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCapabilities } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const capabilities = await getCapabilities(client)\n */\nexport async function getCapabilities(client, parameters = {}) {\n    const { account = client.account, chainId } = parameters;\n    const account_ = account ? parseAccount(account) : undefined;\n    const params = chainId\n        ? [account_?.address, [numberToHex(chainId)]]\n        : [account_?.address];\n    const capabilities_raw = await client.request({\n        method: 'wallet_getCapabilities',\n        params,\n    });\n    const capabilities = {};\n    for (const [chainId, capabilities_] of Object.entries(capabilities_raw)) {\n        capabilities[Number(chainId)] = {};\n        for (let [key, value] of Object.entries(capabilities_)) {\n            if (key === 'addSubAccount')\n                key = 'unstable_addSubAccount';\n            capabilities[Number(chainId)][key] = value;\n        }\n    }\n    return (typeof chainId === 'number' ? capabilities[chainId] : capabilities);\n}\n//# sourceMappingURL=getCapabilities.js.map",
    "/**\n * Gets the wallets current permissions.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getPermissions\n * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n *\n * @param client - Client to use\n * @returns The wallet permissions. {@link GetPermissionsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getPermissions } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const permissions = await getPermissions(client)\n */\nexport async function getPermissions(client) {\n    const permissions = await client.request({ method: 'wallet_getPermissions' }, { dedupe: true });\n    return permissions;\n}\n//# sourceMappingURL=getPermissions.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, } from '../../errors/account.js';\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { getTransactionCount } from '../public/getTransactionCount.js';\n/**\n * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n *\n * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link PrepareAuthorizationParameters}\n * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const authorization = await prepareAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function prepareAuthorization(client, parameters) {\n    const { account: account_ = client.account, chainId, nonce } = parameters;\n    if (!account_)\n        throw new AccountNotFoundError({\n            docsPath: '/docs/eip7702/prepareAuthorization',\n        });\n    const account = parseAccount(account_);\n    const executor = (() => {\n        if (!parameters.executor)\n            return undefined;\n        if (parameters.executor === 'self')\n            return parameters.executor;\n        return parseAccount(parameters.executor);\n    })();\n    const authorization = {\n        address: parameters.contractAddress ?? parameters.address,\n        chainId,\n        nonce,\n    };\n    if (typeof authorization.chainId === 'undefined')\n        authorization.chainId =\n            client.chain?.id ??\n                (await getAction(client, getChainId, 'getChainId')({}));\n    if (typeof authorization.nonce === 'undefined') {\n        authorization.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({\n            address: account.address,\n            blockTag: 'pending',\n        });\n        if (executor === 'self' ||\n            (executor?.address && isAddressEqual(executor.address, account.address)))\n            authorization.nonce += 1;\n    }\n    return authorization;\n}\n//# sourceMappingURL=prepareAuthorization.js.map",
    "import { getAddress } from '../../utils/address/getAddress.js';\n/**\n * Requests a list of accounts managed by a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses\n * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\n *\n * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\n *\n * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\n *\n * @param client - Client to use\n * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { requestAddresses } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const accounts = await requestAddresses(client)\n */\nexport async function requestAddresses(client) {\n    const addresses = await client.request({ method: 'eth_requestAccounts' }, { dedupe: true, retryCount: 0 });\n    return addresses.map((address) => getAddress(address));\n}\n//# sourceMappingURL=requestAddresses.js.map",
    "/**\n * Requests permissions for a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions\n * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n *\n * @param client - Client to use\n * @param parameters - {@link RequestPermissionsParameters}\n * @returns The wallet permissions. {@link RequestPermissionsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { requestPermissions } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const permissions = await requestPermissions(client, {\n *   eth_accounts: {}\n * })\n */\nexport async function requestPermissions(client, permissions) {\n    return client.request({\n        method: 'wallet_requestPermissions',\n        params: [permissions],\n    }, { retryCount: 0 });\n}\n//# sourceMappingURL=requestPermissions.js.map",
    "import { sendCalls, } from './sendCalls.js';\nimport { waitForCallsStatus, } from './waitForCallsStatus.js';\n/**\n * Requests the connected wallet to send a batch of calls, and waits for the calls to be included in a block.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCallsSync\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Calls status. {@link SendCallsSyncReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const status = await sendCallsSync(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCallsSync(client, parameters) {\n    const { chain = client.chain } = parameters;\n    const timeout = parameters.timeout ?? Math.max((chain?.blockTime ?? 0) * 3, 5_000);\n    const result = await sendCalls(client, parameters);\n    const status = await waitForCallsStatus(client, {\n        ...parameters,\n        id: result.id,\n        timeout,\n    });\n    return status;\n}\n//# sourceMappingURL=sendCallsSync.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, AccountTypeNotSupportedError, } from '../../errors/account.js';\nimport { BaseError } from '../../errors/base.js';\nimport { TransactionReceiptRevertedError, } from '../../errors/transaction.js';\nimport { recoverAuthorizationAddress, } from '../../utils/authorization/recoverAuthorizationAddress.js';\nimport { assertCurrentChain, } from '../../utils/chain/assertCurrentChain.js';\nimport { getTransactionError, } from '../../utils/errors/getTransactionError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { LruMap } from '../../utils/lru.js';\nimport { assertRequest, } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { waitForTransactionReceipt, } from '../public/waitForTransactionReceipt.js';\nimport { defaultParameters, prepareTransactionRequest, } from './prepareTransactionRequest.js';\nimport { sendRawTransactionSync, } from './sendRawTransactionSync.js';\nconst supportsWalletNamespace = new LruMap(128);\n/**\n * Creates, signs, and sends a new transaction to the network synchronously.\n * Returns the transaction receipt.\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionSyncParameters}\n * @returns The transaction receipt. {@link SendTransactionSyncReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransactionSync } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const receipt = await sendTransactionSync(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransactionSync } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const receipt = await sendTransactionSync(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransactionSync(client, parameters) {\n    const { account: account_ = client.account, chain = client.chain, accessList, authorizationList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, pollingInterval, throwOnReceiptRevert, type, value, ...rest } = parameters;\n    const timeout = parameters.timeout ?? Math.max((chain?.blockTime ?? 0) * 3, 5_000);\n    if (typeof account_ === 'undefined')\n        throw new AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/sendTransactionSync',\n        });\n    const account = account_ ? parseAccount(account_) : null;\n    try {\n        assertRequest(parameters);\n        const to = await (async () => {\n            // If `to` exists on the parameters, use that.\n            if (parameters.to)\n                return parameters.to;\n            // If `to` is null, we are sending a deployment transaction.\n            if (parameters.to === null)\n                return undefined;\n            // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n            // address of the first authorization in the list.\n            if (authorizationList && authorizationList.length > 0)\n                return await recoverAuthorizationAddress({\n                    authorization: authorizationList[0],\n                }).catch(() => {\n                    throw new BaseError('`to` is required. Could not infer from `authorizationList`.');\n                });\n            // Otherwise, we are sending a deployment transaction.\n            return undefined;\n        })();\n        if (account?.type === 'json-rpc' || account === null) {\n            let chainId;\n            if (chain !== null) {\n                chainId = await getAction(client, getChainId, 'getChainId')({});\n                assertCurrentChain({\n                    currentChainId: chainId,\n                    chain,\n                });\n            }\n            const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n            const format = chainFormat || formatTransactionRequest;\n            const request = format({\n                // Pick out extra data that might exist on the chain's transaction request type.\n                ...extract(rest, { format: chainFormat }),\n                accessList,\n                account,\n                authorizationList,\n                blobs,\n                chainId,\n                data,\n                gas,\n                gasPrice,\n                maxFeePerBlobGas,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                nonce,\n                to,\n                type,\n                value,\n            }, 'sendTransaction');\n            const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid);\n            const method = isWalletNamespaceSupported\n                ? 'wallet_sendTransaction'\n                : 'eth_sendTransaction';\n            const hash = await (async () => {\n                try {\n                    return await client.request({\n                        method,\n                        params: [request],\n                    }, { retryCount: 0 });\n                }\n                catch (e) {\n                    if (isWalletNamespaceSupported === false)\n                        throw e;\n                    const error = e;\n                    // If the transport does not support the method or input, attempt to use the\n                    // `wallet_sendTransaction` method.\n                    if (error.name === 'InvalidInputRpcError' ||\n                        error.name === 'InvalidParamsRpcError' ||\n                        error.name === 'MethodNotFoundRpcError' ||\n                        error.name === 'MethodNotSupportedRpcError') {\n                        return (await client\n                            .request({\n                            method: 'wallet_sendTransaction',\n                            params: [request],\n                        }, { retryCount: 0 })\n                            .then((hash) => {\n                            supportsWalletNamespace.set(client.uid, true);\n                            return hash;\n                        })\n                            .catch((e) => {\n                            const walletNamespaceError = e;\n                            if (walletNamespaceError.name === 'MethodNotFoundRpcError' ||\n                                walletNamespaceError.name === 'MethodNotSupportedRpcError') {\n                                supportsWalletNamespace.set(client.uid, false);\n                                throw error;\n                            }\n                            throw walletNamespaceError;\n                        }));\n                    }\n                    throw error;\n                }\n            })();\n            const receipt = await getAction(client, waitForTransactionReceipt, 'waitForTransactionReceipt')({\n                checkReplacement: false,\n                hash,\n                pollingInterval,\n                timeout,\n            });\n            if (throwOnReceiptRevert && receipt.status === 'reverted')\n                throw new TransactionReceiptRevertedError({ receipt });\n            return receipt;\n        }\n        if (account?.type === 'local') {\n            // Prepare the request for signing (assign appropriate fees, etc.)\n            const request = await getAction(client, prepareTransactionRequest, 'prepareTransactionRequest')({\n                account,\n                accessList,\n                authorizationList,\n                blobs,\n                chain,\n                data,\n                gas,\n                gasPrice,\n                maxFeePerBlobGas,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                nonce,\n                nonceManager: account.nonceManager,\n                parameters: [...defaultParameters, 'sidecars'],\n                type,\n                value,\n                ...rest,\n                to,\n            });\n            const serializer = chain?.serializers?.transaction;\n            const serializedTransaction = (await account.signTransaction(request, {\n                serializer,\n            }));\n            return (await getAction(client, sendRawTransactionSync, 'sendRawTransactionSync')({\n                serializedTransaction,\n                throwOnReceiptRevert,\n            }));\n        }\n        if (account?.type === 'smart')\n            throw new AccountTypeNotSupportedError({\n                metaMessages: [\n                    'Consider using the `sendUserOperation` Action instead.',\n                ],\n                docsPath: '/docs/actions/bundler/sendUserOperation',\n                type: 'smart',\n            });\n        throw new AccountTypeNotSupportedError({\n            docsPath: '/docs/actions/wallet/sendTransactionSync',\n            type: account?.type,\n        });\n    }\n    catch (err) {\n        if (err instanceof AccountTypeNotSupportedError)\n            throw err;\n        throw getTransactionError(err, {\n            ...parameters,\n            account,\n            chain: parameters.chain || undefined,\n        });\n    }\n}\n//# sourceMappingURL=sendTransactionSync.js.map",
    "/**\n * Requests for the wallet to show information about a call batch\n * that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/showCallsStatus\n * - JSON-RPC Methods: [`wallet_showCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link ShowCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { showCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * await showCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function showCallsStatus(client, parameters) {\n    const { id } = parameters;\n    await client.request({\n        method: 'wallet_showCallsStatus',\n        params: [id],\n    });\n    return;\n}\n//# sourceMappingURL=showCallsStatus.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, AccountTypeNotSupportedError, } from '../../errors/account.js';\nimport { prepareAuthorization, } from './prepareAuthorization.js';\n/**\n * Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\n *\n * With the calculated signature, you can:\n * - use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\n * - use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\n *\n * @param client - Client to use\n * @param parameters - {@link SignAuthorizationParameters}\n * @returns The signed Authorization object. {@link SignAuthorizationReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signAuthorization(client, {\n *   account: privateKeyToAccount('0x..'),\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signAuthorization } from 'viem/experimental'\n *\n * const client = createClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signAuthorization(client, {\n *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function signAuthorization(client, parameters) {\n    const { account: account_ = client.account } = parameters;\n    if (!account_)\n        throw new AccountNotFoundError({\n            docsPath: '/docs/eip7702/signAuthorization',\n        });\n    const account = parseAccount(account_);\n    if (!account.signAuthorization)\n        throw new AccountTypeNotSupportedError({\n            docsPath: '/docs/eip7702/signAuthorization',\n            metaMessages: [\n                'The `signAuthorization` Action does not support JSON-RPC Accounts.',\n            ],\n            type: account.type,\n        });\n    const authorization = await prepareAuthorization(client, parameters);\n    return account.signAuthorization(authorization);\n}\n//# sourceMappingURL=signAuthorization.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { stringToHex, toHex, } from '../../utils/encoding/toHex.js';\n/**\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   message: 'hello world',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n * })\n */\nexport async function signMessage(client, { account: account_ = client.account, message, }) {\n    if (!account_)\n        throw new AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/signMessage',\n        });\n    const account = parseAccount(account_);\n    if (account.signMessage)\n        return account.signMessage({ message });\n    const message_ = (() => {\n        if (typeof message === 'string')\n            return stringToHex(message);\n        if (message.raw instanceof Uint8Array)\n            return toHex(message.raw);\n        return message.raw;\n    })();\n    return client.request({\n        method: 'personal_sign',\n        params: [message_, account.address],\n    }, { retryCount: 0 });\n}\n//# sourceMappingURL=signMessage.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain, } from '../../utils/chain/assertCurrentChain.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatTransactionRequest, } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest, } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction(client, parameters) {\n    const { account: account_ = client.account, chain = client.chain, ...transaction } = parameters;\n    if (!account_)\n        throw new AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/signTransaction',\n        });\n    const account = parseAccount(account_);\n    assertRequest({\n        account,\n        ...parameters,\n    });\n    const chainId = await getAction(client, getChainId, 'getChainId')({});\n    if (chain !== null)\n        assertCurrentChain({\n            currentChainId: chainId,\n            chain,\n        });\n    const formatters = chain?.formatters || client.chain?.formatters;\n    const format = formatters?.transactionRequest?.format || formatTransactionRequest;\n    if (account.signTransaction)\n        return account.signTransaction({\n            ...transaction,\n            chainId,\n        }, { serializer: client.chain?.serializers?.transaction });\n    return await client.request({\n        method: 'eth_signTransaction',\n        params: [\n            {\n                ...format({\n                    ...transaction,\n                    account,\n                }, 'signTransaction'),\n                chainId: numberToHex(chainId),\n                from: account.address,\n            },\n        ],\n    }, { retryCount: 0 });\n}\n//# sourceMappingURL=signTransaction.js.map",
    "import { parseAccount, } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, } from '../../errors/account.js';\nimport { getTypesForEIP712Domain, serializeTypedData, validateTypedData, } from '../../utils/typedData.js';\n/**\n * Signs typed data and calculates an Ethereum-specific signature in [https://eips.ethereum.org/EIPS/eip-712](https://eips.ethereum.org/EIPS/eip-712): `sign(keccak256(\"\\x19\\x01\" ‖ domainSeparator ‖ hashStruct(message)))`\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTypedData\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param client - Client to use\n * @param parameters - {@link SignTypedDataParameters}\n * @returns The signed data. {@link SignTypedDataReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTypedData(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signTypedData(client, {\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n */\nexport async function signTypedData(client, parameters) {\n    const { account: account_ = client.account, domain, message, primaryType, } = parameters;\n    if (!account_)\n        throw new AccountNotFoundError({\n            docsPath: '/docs/actions/wallet/signTypedData',\n        });\n    const account = parseAccount(account_);\n    const types = {\n        EIP712Domain: getTypesForEIP712Domain({ domain }),\n        ...parameters.types,\n    };\n    // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n    // as we can't statically check this with TypeScript.\n    validateTypedData({ domain, message, primaryType, types });\n    if (account.signTypedData)\n        return account.signTypedData({ domain, message, primaryType, types });\n    const typedData = serializeTypedData({ domain, message, primaryType, types });\n    return client.request({\n        method: 'eth_signTypedData_v4',\n        params: [account.address, typedData],\n    }, { retryCount: 0 });\n}\n//# sourceMappingURL=signTypedData.js.map",
    "import { numberToHex, } from '../../utils/encoding/toHex.js';\n/**\n * Switch the target chain in a wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/switchChain\n * - JSON-RPC Methods: [`wallet_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\n *\n * @param client - Client to use\n * @param parameters - {@link SwitchChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet, optimism } from 'viem/chains'\n * import { switchChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * await switchChain(client, { id: optimism.id })\n */\nexport async function switchChain(client, { id }) {\n    await client.request({\n        method: 'wallet_switchEthereumChain',\n        params: [\n            {\n                chainId: numberToHex(id),\n            },\n        ],\n    }, { retryCount: 0 });\n}\n//# sourceMappingURL=switchChain.js.map",
    "/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/watchAsset\n * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\n *\n * @param client - Client to use\n * @param parameters - {@link WatchAssetParameters}\n * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchAsset } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const success = await watchAsset(client, {\n *   type: 'ERC20',\n *   options: {\n *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *     decimals: 18,\n *     symbol: 'WETH',\n *   },\n * })\n */\nexport async function watchAsset(client, params) {\n    const added = await client.request({\n        method: 'wallet_watchAsset',\n        params,\n    }, { retryCount: 0 });\n    return added;\n}\n//# sourceMappingURL=watchAsset.js.map",
    "import { sendTransactionSync, } from './sendTransactionSync.js';\nimport { writeContract } from './writeContract.js';\n/**\n * Executes a write function on a contract synchronously.\n * Returns the transaction receipt.\n *\n * - Docs: https://viem.sh/docs/contract/writeContractSync\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const receipt = await writeContractSync(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n */\nexport async function writeContractSync(client, parameters) {\n    return writeContract.internal(client, sendTransactionSync, 'sendTransactionSync', parameters);\n}\n//# sourceMappingURL=writeContractSync.js.map",
    "import { getChainId, } from '../../actions/public/getChainId.js';\nimport { addChain, } from '../../actions/wallet/addChain.js';\nimport { deployContract, } from '../../actions/wallet/deployContract.js';\nimport { getAddresses, } from '../../actions/wallet/getAddresses.js';\nimport { getCallsStatus, } from '../../actions/wallet/getCallsStatus.js';\nimport { getCapabilities, } from '../../actions/wallet/getCapabilities.js';\nimport { getPermissions, } from '../../actions/wallet/getPermissions.js';\nimport { prepareAuthorization, } from '../../actions/wallet/prepareAuthorization.js';\nimport { prepareTransactionRequest, } from '../../actions/wallet/prepareTransactionRequest.js';\nimport { requestAddresses, } from '../../actions/wallet/requestAddresses.js';\nimport { requestPermissions, } from '../../actions/wallet/requestPermissions.js';\nimport { sendCalls, } from '../../actions/wallet/sendCalls.js';\nimport { sendCallsSync, } from '../../actions/wallet/sendCallsSync.js';\nimport { sendRawTransaction, } from '../../actions/wallet/sendRawTransaction.js';\nimport { sendRawTransactionSync, } from '../../actions/wallet/sendRawTransactionSync.js';\nimport { sendTransaction, } from '../../actions/wallet/sendTransaction.js';\nimport { sendTransactionSync, } from '../../actions/wallet/sendTransactionSync.js';\nimport { showCallsStatus, } from '../../actions/wallet/showCallsStatus.js';\nimport { signAuthorization, } from '../../actions/wallet/signAuthorization.js';\nimport { signMessage, } from '../../actions/wallet/signMessage.js';\nimport { signTransaction, } from '../../actions/wallet/signTransaction.js';\nimport { signTypedData, } from '../../actions/wallet/signTypedData.js';\nimport { switchChain, } from '../../actions/wallet/switchChain.js';\nimport { waitForCallsStatus, } from '../../actions/wallet/waitForCallsStatus.js';\nimport { watchAsset, } from '../../actions/wallet/watchAsset.js';\nimport { writeContract, } from '../../actions/wallet/writeContract.js';\nimport { writeContractSync, } from '../../actions/wallet/writeContractSync.js';\nexport function walletActions(client) {\n    return {\n        addChain: (args) => addChain(client, args),\n        deployContract: (args) => deployContract(client, args),\n        getAddresses: () => getAddresses(client),\n        getCallsStatus: (args) => getCallsStatus(client, args),\n        getCapabilities: (args) => getCapabilities(client, args),\n        getChainId: () => getChainId(client),\n        getPermissions: () => getPermissions(client),\n        prepareAuthorization: (args) => prepareAuthorization(client, args),\n        prepareTransactionRequest: (args) => prepareTransactionRequest(client, args),\n        requestAddresses: () => requestAddresses(client),\n        requestPermissions: (args) => requestPermissions(client, args),\n        sendCalls: (args) => sendCalls(client, args),\n        sendCallsSync: (args) => sendCallsSync(client, args),\n        sendRawTransaction: (args) => sendRawTransaction(client, args),\n        sendRawTransactionSync: (args) => sendRawTransactionSync(client, args),\n        sendTransaction: (args) => sendTransaction(client, args),\n        sendTransactionSync: (args) => sendTransactionSync(client, args),\n        showCallsStatus: (args) => showCallsStatus(client, args),\n        signAuthorization: (args) => signAuthorization(client, args),\n        signMessage: (args) => signMessage(client, args),\n        signTransaction: (args) => signTransaction(client, args),\n        signTypedData: (args) => signTypedData(client, args),\n        switchChain: (args) => switchChain(client, args),\n        waitForCallsStatus: (args) => waitForCallsStatus(client, args),\n        watchAsset: (args) => watchAsset(client, args),\n        writeContract: (args) => writeContract(client, args),\n        writeContractSync: (args) => writeContractSync(client, args),\n    };\n}\n//# sourceMappingURL=wallet.js.map",
    "import { createClient, } from './createClient.js';\nimport { walletActions } from './decorators/wallet.js';\nexport function createWalletClient(parameters) {\n    const { key = 'wallet', name = 'Wallet Client', transport } = parameters;\n    const client = createClient({\n        ...parameters,\n        key,\n        name,\n        transport,\n        type: 'walletClient',\n    });\n    return client.extend(walletActions);\n}\n//# sourceMappingURL=createWalletClient.js.map",
    "import { buildRequest } from '../../utils/buildRequest.js';\nimport { uid as uid_ } from '../../utils/uid.js';\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport({ key, methods, name, request, retryCount = 3, retryDelay = 150, timeout, type, }, value) {\n    const uid = uid_();\n    return {\n        config: {\n            key,\n            methods,\n            name,\n            request,\n            retryCount,\n            retryDelay,\n            timeout,\n            type,\n        },\n        request: buildRequest(request, { methods, retryCount, retryDelay, uid }),\n        value,\n    };\n}\n//# sourceMappingURL=createTransport.js.map",
    "import { BaseError } from './base.js';\nexport class UrlRequiredError extends BaseError {\n    constructor() {\n        super('No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.', {\n            docsPath: '/docs/clients/intro',\n            name: 'UrlRequiredError',\n        });\n    }\n}\n//# sourceMappingURL=transport.js.map",
    "import { RpcRequestError } from '../../errors/request.js';\nimport { UrlRequiredError, } from '../../errors/transport.js';\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js';\nimport { getHttpRpcClient, } from '../../utils/rpc/http.js';\nimport { createTransport, } from './createTransport.js';\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(\n/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\nurl, config = {}) {\n    const { batch, fetchFn, fetchOptions, key = 'http', methods, name = 'HTTP JSON-RPC', onFetchRequest, onFetchResponse, retryDelay, raw, } = config;\n    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n        const { batchSize = 1000, wait = 0 } = typeof batch === 'object' ? batch : {};\n        const retryCount = config.retryCount ?? retryCount_;\n        const timeout = timeout_ ?? config.timeout ?? 10_000;\n        const url_ = url || chain?.rpcUrls.default.http[0];\n        if (!url_)\n            throw new UrlRequiredError();\n        const rpcClient = getHttpRpcClient(url_, {\n            fetchFn,\n            fetchOptions,\n            onRequest: onFetchRequest,\n            onResponse: onFetchResponse,\n            timeout,\n        });\n        return createTransport({\n            key,\n            methods,\n            name,\n            async request({ method, params }) {\n                const body = { method, params };\n                const { schedule } = createBatchScheduler({\n                    id: url_,\n                    wait,\n                    shouldSplitBatch(requests) {\n                        return requests.length > batchSize;\n                    },\n                    fn: (body) => rpcClient.request({\n                        body,\n                    }),\n                    sort: (a, b) => a.id - b.id,\n                });\n                const fn = async (body) => batch\n                    ? schedule(body)\n                    : [\n                        await rpcClient.request({\n                            body,\n                        }),\n                    ];\n                const [{ error, result }] = await fn(body);\n                if (raw)\n                    return { error, result };\n                if (error)\n                    throw new RpcRequestError({\n                        body,\n                        error,\n                        url: url_,\n                    });\n                return result;\n            },\n            retryCount,\n            retryDelay,\n            timeout,\n            type: 'http',\n        }, {\n            fetchOptions,\n            url: url_,\n        });\n    };\n}\n//# sourceMappingURL=http.js.map",
    "// biome-ignore lint/performance/noBarrelFile: entrypoint module\nexport { CircularReferenceError, InvalidAbiItemError, InvalidAbiParameterError, InvalidAbiParametersError, InvalidAbiTypeParameterError, InvalidFunctionModifierError, InvalidModifierError, InvalidParameterError, InvalidParenthesisError, InvalidSignatureError, InvalidStructSignatureError, parseAbi, parseAbiItem, parseAbiParameter, parseAbiParameters, SolidityProtectedKeywordError, UnknownSignatureError, UnknownTypeError, } from 'abitype';\nexport { getContract, } from './actions/getContract.js';\nexport { WaitForCallsStatusTimeoutError } from './actions/wallet/waitForCallsStatus.js';\nexport { createClient, rpcSchema, } from './clients/createClient.js';\nexport { createPublicClient, } from './clients/createPublicClient.js';\nexport { createTestClient, } from './clients/createTestClient.js';\nexport { createWalletClient, } from './clients/createWalletClient.js';\nexport { publicActions, } from './clients/decorators/public.js';\nexport { testActions, } from './clients/decorators/test.js';\nexport { walletActions, } from './clients/decorators/wallet.js';\nexport { createTransport, } from './clients/transports/createTransport.js';\nexport { custom, } from './clients/transports/custom.js';\nexport { fallback, shouldThrow, } from './clients/transports/fallback.js';\nexport { http, } from './clients/transports/http.js';\nexport { webSocket, } from './clients/transports/webSocket.js';\nexport { erc20Abi, erc20Abi_bytes32, erc721Abi, erc1155Abi, erc4626Abi, erc6492SignatureValidatorAbi, \n/** @deprecated use `erc6492SignatureValidatorAbi` instead. */\nerc6492SignatureValidatorAbi as universalSignatureValidatorAbi, multicall3Abi, } from './constants/abis.js';\nexport { ethAddress, zeroAddress } from './constants/address.js';\nexport { zeroHash } from './constants/bytes.js';\nexport { deploylessCallViaBytecodeBytecode, deploylessCallViaFactoryBytecode, erc6492SignatureValidatorByteCode, \n/** @deprecated use `erc6492SignatureValidatorByteCode` instead. */\nerc6492SignatureValidatorByteCode as universalSignatureValidatorByteCode, } from './constants/contracts.js';\nexport { maxInt8, maxInt16, maxInt24, maxInt32, maxInt40, maxInt48, maxInt56, maxInt64, maxInt72, maxInt80, maxInt88, maxInt96, maxInt104, maxInt112, maxInt120, maxInt128, maxInt136, maxInt144, maxInt152, maxInt160, maxInt168, maxInt176, maxInt184, maxInt192, maxInt200, maxInt208, maxInt216, maxInt224, maxInt232, maxInt240, maxInt248, maxInt256, maxUint8, maxUint16, maxUint24, maxUint32, maxUint40, maxUint48, maxUint56, maxUint64, maxUint72, maxUint80, maxUint88, maxUint96, maxUint104, maxUint112, maxUint120, maxUint128, maxUint136, maxUint144, maxUint152, maxUint160, maxUint168, maxUint176, maxUint184, maxUint192, maxUint200, maxUint208, maxUint216, maxUint224, maxUint232, maxUint240, maxUint248, maxUint256, minInt8, minInt16, minInt24, minInt32, minInt40, minInt48, minInt56, minInt64, minInt72, minInt80, minInt88, minInt96, minInt104, minInt112, minInt120, minInt128, minInt136, minInt144, minInt152, minInt160, minInt168, minInt176, minInt184, minInt192, minInt200, minInt208, minInt216, minInt224, minInt232, minInt240, minInt248, minInt256, } from './constants/number.js';\nexport { presignMessagePrefix } from './constants/strings.js';\nexport { etherUnits, gweiUnits, weiUnits } from './constants/unit.js';\nexport { AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError, AbiDecodingDataSizeInvalidError, AbiDecodingDataSizeTooSmallError, AbiDecodingZeroDataError, AbiEncodingArrayLengthMismatchError, AbiEncodingBytesSizeMismatchError, AbiEncodingLengthMismatchError, AbiErrorInputsNotFoundError, AbiErrorNotFoundError, AbiErrorSignatureNotFoundError, AbiEventNotFoundError, AbiEventSignatureEmptyTopicsError, AbiEventSignatureNotFoundError, AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, AbiFunctionSignatureNotFoundError, BytesSizeMismatchError, DecodeLogDataMismatch, DecodeLogTopicsMismatch, InvalidAbiDecodingTypeError, InvalidAbiEncodingTypeError, InvalidArrayError, InvalidDefinitionTypeError, UnsupportedPackedAbiType, } from './errors/abi.js';\nexport { InvalidAddressError, } from './errors/address.js';\nexport { BaseError, setErrorConfig } from './errors/base.js';\nexport { BlockNotFoundError, } from './errors/block.js';\nexport { BundleFailedError, } from './errors/calls.js';\nexport { ChainDoesNotSupportContract, ChainMismatchError, ChainNotFoundError, ClientChainNotConfiguredError, InvalidChainIdError, } from './errors/chain.js';\nexport { CallExecutionError, ContractFunctionExecutionError, ContractFunctionRevertedError, ContractFunctionZeroDataError, CounterfactualDeploymentFailedError, RawContractError, } from './errors/contract.js';\nexport { SizeExceedsPaddingSizeError, SliceOffsetOutOfBoundsError, } from './errors/data.js';\nexport { IntegerOutOfRangeError, InvalidBytesBooleanError, InvalidHexBooleanError, InvalidHexValueError, SizeOverflowError, } from './errors/encoding.js';\nexport { EnsAvatarInvalidNftUriError, EnsAvatarUnsupportedNamespaceError, EnsAvatarUriResolutionError, EnsInvalidChainIdError, } from './errors/ens.js';\nexport { EstimateGasExecutionError, } from './errors/estimateGas.js';\nexport { BaseFeeScalarError, Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError, } from './errors/fee.js';\nexport { FilterTypeNotSupportedError, } from './errors/log.js';\nexport { ExecutionRevertedError, FeeCapTooHighError, FeeCapTooLowError, InsufficientFundsError, IntrinsicGasTooHighError, IntrinsicGasTooLowError, NonceMaxValueError, NonceTooHighError, NonceTooLowError, TipAboveFeeCapError, TransactionTypeNotSupportedError, UnknownNodeError, } from './errors/node.js';\nexport { HttpRequestError, RpcRequestError, SocketClosedError, TimeoutError, WebSocketRequestError, } from './errors/request.js';\nexport { AtomicityNotSupportedError, AtomicReadyWalletRejectedUpgradeError, BundleTooLargeError, ChainDisconnectedError, DuplicateIdError, InternalRpcError, InvalidInputRpcError, InvalidParamsRpcError, InvalidRequestRpcError, JsonRpcVersionUnsupportedError, LimitExceededRpcError, MethodNotFoundRpcError, MethodNotSupportedRpcError, ParseRpcError, ProviderDisconnectedError, ProviderRpcError, ResourceNotFoundRpcError, ResourceUnavailableRpcError, RpcError, SwitchChainError, TransactionRejectedRpcError, UnauthorizedProviderError, UnknownBundleIdError, UnknownRpcError, UnsupportedChainIdError, UnsupportedNonOptionalCapabilityError, UnsupportedProviderMethodError, UserRejectedRequestError, } from './errors/rpc.js';\nexport { AccountStateConflictError, StateAssignmentConflictError, } from './errors/stateOverride.js';\nexport { FeeConflictError, InvalidLegacyVError, InvalidSerializableTransactionError, InvalidSerializedTransactionError, InvalidSerializedTransactionTypeError, InvalidStorageKeySizeError, TransactionExecutionError, TransactionNotFoundError, TransactionReceiptNotFoundError, WaitForTransactionReceiptTimeoutError, } from './errors/transaction.js';\nexport { UrlRequiredError, } from './errors/transport.js';\nexport { InvalidDomainError, InvalidPrimaryTypeError, InvalidStructTypeError, } from './errors/typedData.js';\nexport { InvalidDecimalNumberError, } from './errors/unit.js';\nexport { ProviderRpcError as EIP1193ProviderRpcError } from './types/eip1193.js';\nexport { decodeAbiParameters, } from './utils/abi/decodeAbiParameters.js';\nexport { decodeDeployData, } from './utils/abi/decodeDeployData.js';\nexport { decodeErrorResult, } from './utils/abi/decodeErrorResult.js';\nexport { decodeEventLog, } from './utils/abi/decodeEventLog.js';\nexport { decodeFunctionData, } from './utils/abi/decodeFunctionData.js';\nexport { decodeFunctionResult, } from './utils/abi/decodeFunctionResult.js';\nexport { encodeAbiParameters, } from './utils/abi/encodeAbiParameters.js';\nexport { encodeDeployData, } from './utils/abi/encodeDeployData.js';\nexport { encodeErrorResult, } from './utils/abi/encodeErrorResult.js';\nexport { encodeEventTopics, } from './utils/abi/encodeEventTopics.js';\nexport { encodeFunctionData, } from './utils/abi/encodeFunctionData.js';\nexport { encodeFunctionResult, } from './utils/abi/encodeFunctionResult.js';\nexport { encodePacked, } from './utils/abi/encodePacked.js';\nexport { getAbiItem, } from './utils/abi/getAbiItem.js';\nexport { parseEventLogs, } from './utils/abi/parseEventLogs.js';\nexport { prepareEncodeFunctionData, } from './utils/abi/prepareEncodeFunctionData.js';\nexport { checksumAddress, getAddress, } from './utils/address/getAddress.js';\nexport { getContractAddress, getCreate2Address, getCreateAddress, } from './utils/address/getContractAddress.js';\nexport { isAddress, } from './utils/address/isAddress.js';\nexport { isAddressEqual, } from './utils/address/isAddressEqual.js';\nexport { blobsToCommitments, } from './utils/blob/blobsToCommitments.js';\nexport { blobsToProofs, } from './utils/blob/blobsToProofs.js';\nexport { commitmentsToVersionedHashes, } from './utils/blob/commitmentsToVersionedHashes.js';\nexport { commitmentToVersionedHash, } from './utils/blob/commitmentToVersionedHash.js';\nexport { fromBlobs, } from './utils/blob/fromBlobs.js';\nexport { sidecarsToVersionedHashes, } from './utils/blob/sidecarsToVersionedHashes.js';\nexport { toBlobSidecars, } from './utils/blob/toBlobSidecars.js';\nexport { toBlobs, } from './utils/blob/toBlobs.js';\nexport { ccipRequest, \n/** @deprecated Use `ccipRequest`. */\nccipRequest as ccipFetch, offchainLookup, offchainLookupAbiItem, offchainLookupSignature, } from './utils/ccip.js';\nexport { assertCurrentChain, } from './utils/chain/assertCurrentChain.js';\nexport { defineChain } from './utils/chain/defineChain.js';\nexport { extractChain, } from './utils/chain/extractChain.js';\nexport { getChainContractAddress, } from './utils/chain/getChainContractAddress.js';\nexport { concat, concatBytes, concatHex, } from './utils/data/concat.js';\nexport { isBytes } from './utils/data/isBytes.js';\nexport { isHex } from './utils/data/isHex.js';\nexport { pad, padBytes, padHex, } from './utils/data/pad.js';\nexport { size } from './utils/data/size.js';\nexport { slice, sliceBytes, sliceHex, } from './utils/data/slice.js';\nexport { trim, } from './utils/data/trim.js';\nexport { bytesToBigInt, bytesToBool, bytesToNumber, bytesToString, fromBytes, } from './utils/encoding/fromBytes.js';\nexport { fromHex, hexToBigInt, hexToBool, hexToNumber, hexToString, } from './utils/encoding/fromHex.js';\nexport { fromRlp, } from './utils/encoding/fromRlp.js';\nexport { boolToBytes, hexToBytes, numberToBytes, stringToBytes, toBytes, } from './utils/encoding/toBytes.js';\nexport { boolToHex, bytesToHex, numberToHex, stringToHex, toHex, } from './utils/encoding/toHex.js';\nexport { bytesToRlp, hexToRlp, toRlp, } from './utils/encoding/toRlp.js';\nexport { labelhash } from './utils/ens/labelhash.js';\nexport { namehash } from './utils/ens/namehash.js';\nexport { toCoinType, } from './utils/ens/toCoinType.js';\nexport { getContractError, } from './utils/errors/getContractError.js';\nexport { defineBlock, formatBlock, } from './utils/formatters/block.js';\nexport { formatLog } from './utils/formatters/log.js';\nexport { defineTransaction, formatTransaction, transactionType, } from './utils/formatters/transaction.js';\nexport { defineTransactionReceipt, formatTransactionReceipt, } from './utils/formatters/transactionReceipt.js';\nexport { defineTransactionRequest, formatTransactionRequest, rpcTransactionType, } from './utils/formatters/transactionRequest.js';\nexport { isHash } from './utils/hash/isHash.js';\nexport { keccak256, } from './utils/hash/keccak256.js';\nexport { ripemd160, } from './utils/hash/ripemd160.js';\nexport { sha256, } from './utils/hash/sha256.js';\nexport { toEventHash, } from './utils/hash/toEventHash.js';\nexport { toEventSelector, \n/** @deprecated use `toEventSelector`. */\ntoEventSelector as getEventSelector, } from './utils/hash/toEventSelector.js';\nexport { toEventSignature, \n/** @deprecated use `toEventSignature`. */\ntoEventSignature as getEventSignature, } from './utils/hash/toEventSignature.js';\nexport { toFunctionHash, } from './utils/hash/toFunctionHash.js';\nexport { toFunctionSelector, \n/** @deprecated use `toFunctionSelector`. */\ntoFunctionSelector as getFunctionSelector, } from './utils/hash/toFunctionSelector.js';\nexport { toFunctionSignature, \n/** @deprecated use `toFunctionSignature`. */\ntoFunctionSignature as getFunctionSignature, } from './utils/hash/toFunctionSignature.js';\nexport { defineKzg, } from './utils/kzg/defineKzg.js';\nexport { setupKzg, } from './utils/kzg/setupKzg.js';\nexport { createNonceManager, nonceManager, } from './utils/nonceManager.js';\nexport { withCache } from './utils/promise/withCache.js';\nexport { withRetry, } from './utils/promise/withRetry.js';\nexport { withTimeout, } from './utils/promise/withTimeout.js';\nexport { compactSignatureToSignature, } from './utils/signature/compactSignatureToSignature.js';\nexport { hashMessage, } from './utils/signature/hashMessage.js';\nexport { hashDomain, hashStruct, hashTypedData, } from './utils/signature/hashTypedData.js';\nexport { isErc6492Signature, } from './utils/signature/isErc6492Signature.js';\nexport { isErc8010Signature, } from './utils/signature/isErc8010Signature.js';\nexport { \n/** @deprecated Use `parseCompactSignature`. */\nparseCompactSignature as hexToCompactSignature, parseCompactSignature, } from './utils/signature/parseCompactSignature.js';\nexport { parseErc6492Signature, } from './utils/signature/parseErc6492Signature.js';\nexport { parseErc8010Signature, } from './utils/signature/parseErc8010Signature.js';\nexport { \n/** @deprecated Use `parseSignature`. */\nparseSignature as hexToSignature, parseSignature, } from './utils/signature/parseSignature.js';\nexport { recoverAddress, } from './utils/signature/recoverAddress.js';\nexport { recoverMessageAddress, } from './utils/signature/recoverMessageAddress.js';\nexport { recoverPublicKey, } from './utils/signature/recoverPublicKey.js';\nexport { recoverTransactionAddress, } from './utils/signature/recoverTransactionAddress.js';\nexport { recoverTypedDataAddress, } from './utils/signature/recoverTypedDataAddress.js';\nexport { \n/** @deprecated Use `serializeCompactSignature` instead. */\nserializeCompactSignature as compactSignatureToHex, serializeCompactSignature, } from './utils/signature/serializeCompactSignature.js';\nexport { serializeErc6492Signature, } from './utils/signature/serializeErc6492Signature.js';\nexport { serializeErc8010Signature, } from './utils/signature/serializeErc8010Signature.js';\nexport { \n/** @deprecated Use `serializeSignature` instead. */\nserializeSignature as signatureToHex, serializeSignature, } from './utils/signature/serializeSignature.js';\nexport { signatureToCompactSignature, } from './utils/signature/signatureToCompactSignature.js';\nexport { toPrefixedMessage, } from './utils/signature/toPrefixedMessage.js';\nexport { verifyHash, } from './utils/signature/verifyHash.js';\nexport { verifyMessage, } from './utils/signature/verifyMessage.js';\nexport { verifyTypedData, } from './utils/signature/verifyTypedData.js';\nexport { stringify } from './utils/stringify.js';\nexport { assertRequest, } from './utils/transaction/assertRequest.js';\nexport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy, } from './utils/transaction/assertTransaction.js';\nexport { getSerializedTransactionType, } from './utils/transaction/getSerializedTransactionType.js';\nexport { getTransactionType, } from './utils/transaction/getTransactionType.js';\nexport { parseTransaction, } from './utils/transaction/parseTransaction.js';\nexport { serializeAccessList, } from './utils/transaction/serializeAccessList.js';\nexport { serializeTransaction, } from './utils/transaction/serializeTransaction.js';\nexport { domainSeparator, getTypesForEIP712Domain, serializeTypedData, validateTypedData, } from './utils/typedData.js';\nexport { formatEther, } from './utils/unit/formatEther.js';\nexport { formatGwei, } from './utils/unit/formatGwei.js';\nexport { formatUnits, } from './utils/unit/formatUnits.js';\nexport { parseEther, } from './utils/unit/parseEther.js';\nexport { parseGwei } from './utils/unit/parseGwei.js';\nexport { parseUnits, } from './utils/unit/parseUnits.js';\n//# sourceMappingURL=index.js.map",
    "// TODO(v3): Rename to `toLocalAccount` + add `source` property to define source (privateKey, mnemonic, hdKey, etc).\nimport { InvalidAddressError, } from '../errors/address.js';\nimport { isAddress, } from '../utils/address/isAddress.js';\n/**\n * @description Creates an Account from a custom signing implementation.\n *\n * @returns A Local Account.\n */\nexport function toAccount(source) {\n    if (typeof source === 'string') {\n        if (!isAddress(source, { strict: false }))\n            throw new InvalidAddressError({ address: source });\n        return {\n            address: source,\n            type: 'json-rpc',\n        };\n    }\n    if (!isAddress(source.address, { strict: false }))\n        throw new InvalidAddressError({ address: source.address });\n    return {\n        address: source.address,\n        nonceManager: source.nonceManager,\n        sign: source.sign,\n        signAuthorization: source.signAuthorization,\n        signMessage: source.signMessage,\n        signTransaction: source.signTransaction,\n        signTypedData: source.signTypedData,\n        source: 'custom',\n        type: 'local',\n    };\n}\n//# sourceMappingURL=toAccount.js.map",
    "// TODO(v3): Convert to sync.\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { isHex } from '../../utils/data/isHex.js';\nimport { hexToBytes, } from '../../utils/encoding/toBytes.js';\nimport { numberToHex, } from '../../utils/encoding/toHex.js';\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js';\nlet extraEntropy = false;\n/**\n * Sets extra entropy for signing functions.\n */\nexport function setSignEntropy(entropy) {\n    if (!entropy)\n        throw new Error('must be a `true` or a hex value.');\n    extraEntropy = entropy;\n}\n/**\n * @description Signs a hash with a given private key.\n *\n * @param hash The hash to sign.\n * @param privateKey The private key to sign with.\n *\n * @returns The signature.\n */\nexport async function sign({ hash, privateKey, to = 'object', }) {\n    const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2), {\n        lowS: true,\n        extraEntropy: isHex(extraEntropy, { strict: false })\n            ? hexToBytes(extraEntropy)\n            : extraEntropy,\n    });\n    const signature = {\n        r: numberToHex(r, { size: 32 }),\n        s: numberToHex(s, { size: 32 }),\n        v: recovery ? 28n : 27n,\n        yParity: recovery,\n    };\n    return (() => {\n        if (to === 'bytes' || to === 'hex')\n            return serializeSignature({ ...signature, to });\n        return signature;\n    })();\n}\n//# sourceMappingURL=sign.js.map",
    "import { hashAuthorization, } from '../../utils/authorization/hashAuthorization.js';\nimport { sign, } from './sign.js';\n/**\n * Signs an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport async function signAuthorization(parameters) {\n    const { chainId, nonce, privateKey, to = 'object' } = parameters;\n    const address = parameters.contractAddress ?? parameters.address;\n    const signature = await sign({\n        hash: hashAuthorization({ address, chainId, nonce }),\n        privateKey,\n        to,\n    });\n    if (to === 'object')\n        return {\n            address,\n            chainId,\n            nonce,\n            ...signature,\n        };\n    return signature;\n}\n//# sourceMappingURL=signAuthorization.js.map",
    "import { hashMessage, } from '../../utils/signature/hashMessage.js';\nimport { sign } from './sign.js';\n/**\n * @description Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191):\n * `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * @returns The signature.\n */\nexport async function signMessage({ message, privateKey, }) {\n    return await sign({ hash: hashMessage(message), privateKey, to: 'hex' });\n}\n//# sourceMappingURL=signMessage.js.map",
    "import { keccak256, } from '../../utils/hash/keccak256.js';\nimport { serializeTransaction, } from '../../utils/transaction/serializeTransaction.js';\nimport { sign } from './sign.js';\nexport async function signTransaction(parameters) {\n    const { privateKey, transaction, serializer = serializeTransaction, } = parameters;\n    const signableTransaction = (() => {\n        // For EIP-4844 Transactions, we want to sign the transaction payload body (tx_payload_body) without the sidecars (ie. without the network wrapper).\n        // See: https://github.com/ethereum/EIPs/blob/e00f4daa66bd56e2dbd5f1d36d09fd613811a48b/EIPS/eip-4844.md#networking\n        if (transaction.type === 'eip4844')\n            return {\n                ...transaction,\n                sidecars: false,\n            };\n        return transaction;\n    })();\n    const signature = await sign({\n        hash: keccak256(await serializer(signableTransaction)),\n        privateKey,\n    });\n    return (await serializer(transaction, signature));\n}\n//# sourceMappingURL=signTransaction.js.map",
    "import { hashTypedData, } from '../../utils/signature/hashTypedData.js';\nimport { sign } from './sign.js';\n/**\n * @description Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191):\n * `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * @returns The signature.\n */\nexport async function signTypedData(parameters) {\n    const { privateKey, ...typedData } = parameters;\n    return await sign({\n        hash: hashTypedData(typedData),\n        privateKey,\n        to: 'hex',\n    });\n}\n//# sourceMappingURL=signTypedData.js.map",
    "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toAccount } from './toAccount.js';\nimport { publicKeyToAddress, } from './utils/publicKeyToAddress.js';\nimport { sign } from './utils/sign.js';\nimport { signAuthorization } from './utils/signAuthorization.js';\nimport { signMessage } from './utils/signMessage.js';\nimport { signTransaction, } from './utils/signTransaction.js';\nimport { signTypedData, } from './utils/signTypedData.js';\n/**\n * @description Creates an Account from a private key.\n *\n * @returns A Private Key Account.\n */\nexport function privateKeyToAccount(privateKey, options = {}) {\n    const { nonceManager } = options;\n    const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false));\n    const address = publicKeyToAddress(publicKey);\n    const account = toAccount({\n        address,\n        nonceManager,\n        async sign({ hash }) {\n            return sign({ hash, privateKey, to: 'hex' });\n        },\n        async signAuthorization(authorization) {\n            return signAuthorization({ ...authorization, privateKey });\n        },\n        async signMessage({ message }) {\n            return signMessage({ message, privateKey });\n        },\n        async signTransaction(transaction, { serializer } = {}) {\n            return signTransaction({ privateKey, transaction, serializer });\n        },\n        async signTypedData(typedData) {\n            return signTypedData({ ...typedData, privateKey });\n        },\n    });\n    return {\n        ...account,\n        publicKey,\n        source: 'privateKey',\n    };\n}\n//# sourceMappingURL=privateKeyToAccount.js.map",
    "// biome-ignore lint/performance/noBarrelFile: entrypoint module\nexport { HDKey } from '@scure/bip32';\nexport { createNonceManager, nonceManager, } from '../utils/nonceManager.js';\nexport { \n/** @deprecated Use `serializeSignature` instead. */\nserializeSignature as signatureToHex, serializeSignature, } from '../utils/signature/serializeSignature.js';\nexport { generateMnemonic, } from './generateMnemonic.js';\nexport { generatePrivateKey, } from './generatePrivateKey.js';\nexport { hdKeyToAccount, } from './hdKeyToAccount.js';\nexport { mnemonicToAccount, } from './mnemonicToAccount.js';\nexport { privateKeyToAccount, } from './privateKeyToAccount.js';\nexport { toAccount } from './toAccount.js';\nexport { parseAccount, } from './utils/parseAccount.js';\nexport { privateKeyToAddress, } from './utils/privateKeyToAddress.js';\nexport { publicKeyToAddress, } from './utils/publicKeyToAddress.js';\nexport { setSignEntropy, sign, } from './utils/sign.js';\nexport { signAuthorization, } from './utils/signAuthorization.js';\nexport { signMessage, } from './utils/signMessage.js';\nexport { signTransaction, } from './utils/signTransaction.js';\nexport { signTypedData, } from './utils/signTypedData.js';\nexport { czech, english, french, italian, japanese, korean, portuguese, simplifiedChinese, spanish, traditionalChinese, } from './wordlists.js';\n//# sourceMappingURL=index.js.map",
    "import { defineChain } from '../../utils/chain/defineChain.js';\nexport const sepolia = /*#__PURE__*/ defineChain({\n    id: 11_155_111,\n    name: 'Sepolia',\n    nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://11155111.rpc.thirdweb.com'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Etherscan',\n            url: 'https://sepolia.etherscan.io',\n            apiUrl: 'https://api-sepolia.etherscan.io/api',\n        },\n    },\n    contracts: {\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 751532,\n        },\n        ensUniversalResolver: {\n            address: '0xeeeeeeee14d718c2b47d9923deab1335e144eeee',\n            blockCreated: 8_928_790,\n        },\n    },\n    testnet: true,\n});\n//# sourceMappingURL=sepolia.js.map",
    "// biome-ignore lint/performance/noBarrelFile: entrypoint module\nexport { \n/** @deprecated Use `zeroGGalileoTestnet` instead. */\nzeroG, } from './definitions/0g.js';\nexport { zeroGGalileoTestnet } from './definitions/0gGalileoTestnet.js';\nexport { zeroGMainnet } from './definitions/0gMainnet.js';\nexport { fireChain } from './definitions/5ireChain.js';\nexport { abey } from './definitions/abey.js';\nexport { abstract } from './definitions/abstract.js';\nexport { abstractTestnet } from './definitions/abstractTestnet.js';\nexport { acala } from './definitions/acala.js';\nexport { acria } from './definitions/acria.js';\nexport { adf } from './definitions/adf.js';\nexport { agungTestnet } from './definitions/agungTestnet.js';\nexport { aioz } from './definitions/aioz.js';\nexport { alephZero } from './definitions/alephZero.js';\nexport { alephZeroTestnet } from './definitions/alephZeroTestnet.js';\nexport { alienx } from './definitions/alienX.js';\nexport { alienxHalTestnet } from './definitions/alienXHalTestnet.js';\nexport { ancient8 } from './definitions/ancient8.js';\nexport { ancient8Sepolia } from './definitions/ancient8Sepolia.js';\nexport { anvil } from './definitions/anvil.js';\nexport { apeChain } from './definitions/apeChain.js';\nexport { apexTestnet } from './definitions/apexTestnet.js';\nexport { arbitrum } from './definitions/arbitrum.js';\nexport { arbitrumGoerli } from './definitions/arbitrumGoerli.js';\nexport { arbitrumNova } from './definitions/arbitrumNova.js';\nexport { arbitrumSepolia } from './definitions/arbitrumSepolia.js';\nexport { arenaz } from './definitions/arenaz.js';\nexport { areonNetwork } from './definitions/areonNetwork.js';\nexport { areonNetworkTestnet } from './definitions/areonNetworkTestnet.js';\nexport { areum } from './definitions/areum.js';\nexport { artelaTestnet } from './definitions/artelaTestnet.js';\nexport { arthera } from './definitions/arthera.js';\nexport { artheraTestnet } from './definitions/artheraTestnet.js';\nexport { assetChain } from './definitions/assetChain.js';\nexport { assetChainTestnet } from './definitions/assetChainTestnet.js';\nexport { astar } from './definitions/astar.js';\n/** @deprecated */\nexport { astarZkEVM } from './definitions/astarZkEVM.js';\n/** @deprecated */\nexport { astarZkyoto } from './definitions/astarZkyoto.js';\nexport { atletaOlympia } from './definitions/atletaOlympia.js';\nexport { aurora } from './definitions/aurora.js';\nexport { auroraTestnet } from './definitions/auroraTestnet.js';\nexport { auroria } from './definitions/auroria.js';\nexport { autheoTestnet } from './definitions/autheoTestnet.js';\nexport { avalanche } from './definitions/avalanche.js';\nexport { avalancheFuji } from './definitions/avalancheFuji.js';\nexport { b3 } from './definitions/b3.js';\nexport { b3Sepolia } from './definitions/b3Sepolia.js';\nexport { bahamut } from './definitions/bahamut.js';\nexport { base, basePreconf } from './definitions/base.js';\nexport { basecampTestnet } from './definitions/basecampTestnet.js';\nexport { baseGoerli } from './definitions/baseGoerli.js';\nexport { baseSepolia, baseSepoliaPreconf } from './definitions/baseSepolia.js';\nexport { beam } from './definitions/beam.js';\nexport { beamTestnet } from './definitions/beamTestnet.js';\nexport { bearNetworkChainMainnet } from './definitions/bearNetworkChainMainnet.js';\nexport { bearNetworkChainTestnet } from './definitions/bearNetworkChainTestnet.js';\nexport { berachain } from './definitions/berachain.js';\nexport { berachainBepolia } from './definitions/berachainBepolia.js';\nexport { berachainTestnet } from './definitions/berachainTestnet.js';\nexport { berachainTestnetbArtio } from './definitions/berachainTestnetbArtio.js';\nexport { bevmMainnet } from './definitions/bevmMainnet.js';\nexport { bifrost } from './definitions/bifrost.js';\nexport { birdlayer } from './definitions/birdlayer.js';\nexport { bitgert } from './definitions/bitgert.js';\nexport { bitkub } from './definitions/bitkub.js';\nexport { bitkubTestnet } from './definitions/bitkubTestnet.js';\nexport { bitlayer } from './definitions/bitlayer.js';\nexport { bitlayerTestnet } from './definitions/bitlayerTestnet.js';\nexport { bitrock } from './definitions/bitrock.js';\nexport { bitTorrent } from './definitions/bitTorrent.js';\nexport { bitTorrentTestnet } from './definitions/bitTorrentTestnet.js';\nexport { blast } from './definitions/blast.js';\nexport { blastSepolia } from './definitions/blastSepolia.js';\nexport { bob } from './definitions/bob.js';\nexport { boba } from './definitions/boba.js';\nexport { bobaSepolia } from './definitions/bobaSepolia.js';\nexport { bobSepolia } from './definitions/bobSepolia.js';\nexport { boolBetaMainnet } from './definitions/boolBetaMainnet.js';\nexport { botanix } from './definitions/botanix.js';\nexport { botanixTestnet } from './definitions/botanixTestnet.js';\nexport { bounceBit } from './definitions/bounceBit.js';\nexport { bounceBitTestnet } from './definitions/bounceBitTestnet.js';\nexport { bronos } from './definitions/bronos.js';\nexport { bronosTestnet } from './definitions/bronosTestnet.js';\nexport { bsc } from './definitions/bsc.js';\nexport { bscGreenfield } from './definitions/bscGreenfield.js';\nexport { bscTestnet } from './definitions/bscTestnet.js';\nexport { bsquared } from './definitions/bsquared.js';\nexport { bsquaredTestnet } from './definitions/bsquaredTestnet.js';\nexport { btr } from './definitions/btr.js';\nexport { btrTestnet } from './definitions/btrTestnet.js';\nexport { bxn } from './definitions/bxn.js';\nexport { bxnTestnet } from './definitions/bxnTestnet.js';\nexport { cannon } from './definitions/cannon.js';\nexport { canto } from './definitions/canto.js';\nexport { celo } from './definitions/celo.js';\n/** @deprecated use `celoSepolia` instead */\nexport { celoAlfajores } from './definitions/celoAlfajores.js';\nexport { celoSepolia } from './definitions/celoSepolia.js';\nexport { chang } from './definitions/chang.js';\nexport { chiliz } from './definitions/chiliz.js';\nexport { chips } from './definitions/chips.js';\nexport { citreaTestnet } from './definitions/citreaTestnet.js';\nexport { classic } from './definitions/classic.js';\nexport { coinbit } from './definitions/coinbit.js';\nexport { coinex } from './definitions/coinex.js';\nexport { confluxESpace } from './definitions/confluxESpace.js';\nexport { confluxESpaceTestnet } from './definitions/confluxESpaceTestnet.js';\nexport { coreDao } from './definitions/coreDao.js';\nexport { coreTestnet1 } from './definitions/coreTestnet1.js';\nexport { coreTestnet2 } from './definitions/coreTestnet2.js';\nexport { corn } from './definitions/corn.js';\nexport { cornTestnet } from './definitions/cornTestnet.js';\nexport { crab } from './definitions/crab.js';\nexport { creatorTestnet } from './definitions/creatorTestnet.js';\nexport { creditCoin3Devnet } from './definitions/creditCoin3Devnet.js';\nexport { creditCoin3Mainnet } from './definitions/creditCoin3Mainnet.js';\nexport { creditCoin3Testnet } from './definitions/creditCoin3Testnet.js';\nexport { cronos } from './definitions/cronos.js';\nexport { cronosTestnet } from './definitions/cronosTestnet.js';\nexport { cronoszkEVM } from './definitions/cronoszkEVM.js';\nexport { cronoszkEVMTestnet } from './definitions/cronoszkEVMTestnet.js';\nexport { crossbell } from './definitions/crossbell.js';\nexport { crossfi } from './definitions/crossfi.js';\nexport { curtis } from './definitions/curtis.js';\nexport { cyber } from './definitions/cyber.js';\nexport { cyberTestnet } from './definitions/cyberTestnet.js';\nexport { dailyNetwork } from './definitions/dailyNetwork.js';\nexport { dailyNetworkTestnet } from './definitions/dailyNetworkTestnet.js';\nexport { darwinia } from './definitions/darwinia.js';\nexport { dbkchain } from './definitions/dbkchain.js';\nexport { dchain } from './definitions/dchain.js';\nexport { dchainTestnet } from './definitions/dchainTestnet.js';\nexport { defichainEvm } from './definitions/defichainEvm.js';\nexport { defichainEvmTestnet } from './definitions/defichainEvmTestnet.js';\nexport { degen } from './definitions/degen.js';\nexport { dfk } from './definitions/dfk.js';\nexport { diode } from './definitions/diode.js';\nexport { disChain } from './definitions/disChain.js';\nexport { dodochainTestnet } from './definitions/dodochainTestnet.js';\nexport { dogechain } from './definitions/dogechain.js';\nexport { domaTestnet } from './definitions/domaTestnet.js';\nexport { donatuz } from './definitions/donatuz.js';\nexport { dosChain } from './definitions/dosChain.js';\nexport { dosChainTestnet } from './definitions/dosChainTestnet.js';\nexport { dreyerxMainnet } from './definitions/dreyerxMainnet.js';\nexport { dreyerxTestnet } from './definitions/dreyerxTestnet.js';\nexport { dustboyIoT } from './definitions/dustboyIoT.js';\nexport { dymension } from './definitions/dymension.js';\nexport { edexa } from './definitions/edexa.js';\nexport { edexaTestnet } from './definitions/edexaTestnet.js';\nexport { edgeless } from './definitions/edgeless.js';\nexport { edgelessTestnet } from './definitions/edgelessTestnet.js';\nexport { edgeware } from './definitions/edgeware.js';\nexport { edgewareTestnet } from './definitions/edgewareTestnet.js';\nexport { eduChain } from './definitions/eduChain.js';\nexport { eduChainTestnet } from './definitions/eduChainTestnet.js';\nexport { ekta } from './definitions/ekta.js';\nexport { ektaTestnet } from './definitions/ektaTestnet.js';\nexport { elastos } from './definitions/elastos.js';\nexport { elastosTestnet } from './definitions/elastosTestnet.js';\nexport { electroneum } from './definitions/electroneum.js';\nexport { electroneumTestnet } from './definitions/electroneumTestnet.js';\nexport { elysiumTestnet } from './definitions/elysiumTestnet.js';\nexport { energy } from './definitions/energy.js';\nexport { eni } from './definitions/eni.js';\nexport { eniTestnet } from './definitions/eniTestnet.js';\nexport { enuls } from './definitions/enuls.js';\nexport { eon } from './definitions/eon.js';\nexport { eos } from './definitions/eos.js';\nexport { eosTestnet } from './definitions/eosTestnet.js';\nexport { eteria } from './definitions/eteria.js';\nexport { etherlink } from './definitions/etherlink.js';\nexport { etherlinkTestnet } from './definitions/etherlinkTestnet.js';\nexport { ethernity } from './definitions/ethernity.js';\nexport { etp } from './definitions/etp.js';\nexport { evmos } from './definitions/evmos.js';\nexport { evmosTestnet } from './definitions/evmosTestnet.js';\nexport { excelonMainnet } from './definitions/excelonMainnet.js';\nexport { expanse } from './definitions/expanse.js';\nexport { exsat } from './definitions/exSat.js';\nexport { exsatTestnet } from './definitions/exSatTestnet.js';\nexport { fantom } from './definitions/fantom.js';\n/** @deprecated Use `sonicTestnet` instead. */\nexport { fantomSonicTestnet } from './definitions/fantomSonicTestnet.js';\nexport { fantomTestnet } from './definitions/fantomTestnet.js';\nexport { fibo } from './definitions/fibo.js';\nexport { filecoin } from './definitions/filecoin.js';\nexport { filecoinCalibration } from './definitions/filecoinCalibration.js';\nexport { filecoinHyperspace } from './definitions/filecoinHyperspace.js';\nexport { flame } from './definitions/flame.js';\nexport { flare } from './definitions/flare.js';\nexport { flareTestnet } from './definitions/flareTestnet.js';\nexport { flowMainnet } from './definitions/flowMainnet.js';\n/** @deprecated */\nexport { flowPreviewnet } from './definitions/flowPreviewnet.js';\nexport { flowTestnet } from './definitions/flowTestnet.js';\nexport { fluence } from './definitions/fluence.js';\nexport { fluenceStage } from './definitions/fluenceStage.js';\nexport { fluenceTestnet } from './definitions/fluenceTestnet.js';\nexport { fluentTestnet } from './definitions/fluentTestnet.js';\nexport { form } from './definitions/form.js';\nexport { forma } from './definitions/forma.js';\nexport { formTestnet } from './definitions/formTestnet.js';\nexport { forta } from './definitions/forta.js';\n/** @deprecated Use `anvil` instead. */\nexport { foundry } from './definitions/foundry.js';\nexport { fraxtal } from './definitions/fraxtal.js';\nexport { fraxtalTestnet } from './definitions/fraxtalTestnet.js';\nexport { funkiMainnet } from './definitions/funkiMainnet.js';\nexport { funkiSepolia } from './definitions/funkiSepolia.js';\nexport { fuse } from './definitions/fuse.js';\nexport { fuseSparknet } from './definitions/fuseSparknet.js';\nexport { fusion } from './definitions/fusion.js';\nexport { fusionTestnet } from './definitions/fusionTestnet.js';\nexport { garnet } from './definitions/garnet.js';\nexport { gatechain } from './definitions/gatechain.js';\nexport { geist } from './definitions/geist.js';\nexport { genesys } from './definitions/genesys.js';\nexport { giwaSepolia } from './definitions/giwaSepolia.js';\nexport { glideL1Protocol } from './definitions/glideL1Protocol.js';\nexport { glideL2Protocol } from './definitions/glideL2Protocol.js';\nexport { gnosis } from './definitions/gnosis.js';\nexport { gnosisChiado } from './definitions/gnosisChiado.js';\nexport { goat } from './definitions/goat.js';\nexport { gobi } from './definitions/gobi.js';\nexport { goChain } from './definitions/goChain.js';\nexport { godwoken } from './definitions/godwoken.js';\nexport { goerli } from './definitions/goerli.js';\nexport { graphite } from './definitions/graphite.js';\nexport { graphiteTestnet } from './definitions/graphiteTestnet.js';\nexport { gravity } from './definitions/gravity.js';\nexport { gunz } from './definitions/gunz.js';\nexport { guruNetwork } from './definitions/guruNetwork.js';\nexport { guruTestnet } from './definitions/guruTestnet.js';\nexport { ham } from './definitions/ham.js';\nexport { happychainTestnet } from './definitions/happychainTestnet.js';\nexport { haqqMainnet } from './definitions/haqqMainnet.js';\nexport { haqqTestedge2 } from './definitions/haqqTestedge2.js';\nexport { hardhat } from './definitions/hardhat.js';\nexport { harmonyOne } from './definitions/harmonyOne.js';\nexport { hashkey } from './definitions/hashKeyChain.js';\nexport { hashkeyTestnet } from './definitions/hashkeyChainTestnet.js';\nexport { haustTestnet } from './definitions/haustTestnet.js';\nexport { hedera } from './definitions/hedera.js';\nexport { hederaPreviewnet } from './definitions/hederaPreviewnet.js';\nexport { hederaTestnet } from './definitions/hederaTestnet.js';\nexport { hela } from './definitions/hela.js';\nexport { hemi } from './definitions/hemi.js';\nexport { hemiSepolia } from './definitions/hemiSepolia.js';\nexport { holesky } from './definitions/holesky.js';\nexport { hoodi } from './definitions/hoodi.js';\nexport { hpb } from './definitions/hpb.js';\nexport { huddle01Mainnet } from './definitions/huddle01Mainnet.js';\nexport { huddle01Testnet } from './definitions/huddle01Testnet.js';\nexport { humanity } from './definitions/humanity.js';\nexport { humanityTestnet } from './definitions/humanityTestnet.js';\nexport { humanode } from './definitions/humanode.js';\nexport { humanodeTestnet5 } from './definitions/humanodeTestnet5.js';\nexport { hychain } from './definitions/hychain.js';\nexport { hychainTestnet } from './definitions/hychainTestnet.js';\nexport { hyperliquidEvmTestnet } from './definitions/hyperliquidEvmTestnet.js';\nexport { icbNetwork } from './definitions/icbNetwork.js';\nexport { idchain } from './definitions/idchain.js';\nexport { immutableZkEvm } from './definitions/immutableZkEvm.js';\nexport { immutableZkEvmTestnet } from './definitions/immutableZkEvmTestnet.js';\nexport { inEVM } from './definitions/inEVM.js';\nexport { initVerse } from './definitions/initVerse.js';\nexport { initVerseGenesis } from './definitions/initVerseGenesis.js';\nexport { injective } from './definitions/injective.js';\nexport { injectiveTestnet } from './definitions/injectiveTestnet.js';\nexport { ink } from './definitions/ink.js';\nexport { inkSepolia } from './definitions/inkSepolia.js';\nexport { iota } from './definitions/iota.js';\nexport { iotaTestnet } from './definitions/iotaTestnet.js';\nexport { iotex } from './definitions/iotex.js';\nexport { iotexTestnet } from './definitions/iotexTestnet.js';\nexport { iSunCoin } from './definitions/iSunCoin.js';\nexport { jbc } from './definitions/jbc.js';\nexport { jbcTestnet } from './definitions/jbcTestnet.js';\nexport { jocMainnet } from './definitions/jocMainnet.js';\nexport { jocTestnet } from './definitions/jocTestnet.js';\nexport { jovay } from './definitions/jovay.js';\nexport { jovaySepolia } from './definitions/jovaySepolia.js';\nexport { juneo } from './definitions/juneo.js';\nexport { juneoBCH1Chain } from './definitions/juneoBCH1Chain.js';\nexport { juneoDAI1Chain } from './definitions/juneoDAI1Chain.js';\nexport { juneoDOGE1Chain } from './definitions/juneoDOGE1Chain.js';\nexport { juneoEUR1Chain } from './definitions/juneoEUR1Chain.js';\nexport { juneoGLD1Chain } from './definitions/juneoGLD1Chain.js';\nexport { juneoLINK1Chain } from './definitions/juneoLINK1Chain.js';\nexport { juneoLTC1Chain } from './definitions/juneoLTC1Chain.js';\nexport { juneomBTC1Chain } from './definitions/juneomBTC1Chain.js';\nexport { juneoSGD1Chain } from './definitions/juneoSGD1Chain.js';\nexport { juneoSocotraTestnet } from './definitions/juneoSocotraTestnet.js';\nexport { juneoUSD1Chain } from './definitions/juneoUSD1Chain.js';\nexport { juneoUSDT1Chain } from './definitions/juneoUSDT1Chain.js';\nexport { kaia } from './definitions/kaia.js';\nexport { kairos } from './definitions/kairos.js';\n/** @deprecated Use `kakarotStarknetSepolia` instead. */\nexport { kakarotSepolia } from './definitions/kakarotSepolia.js';\nexport { kakarotStarknetSepolia } from './definitions/kakarotStarknetSepolia.js';\nexport { kardiaChain } from './definitions/kardiaChain.js';\nexport { karura } from './definitions/karura.js';\nexport { katana } from './definitions/katana.js';\nexport { kava } from './definitions/kava.js';\nexport { kavaTestnet } from './definitions/kavaTestnet.js';\nexport { kcc } from './definitions/kcc.js';\nexport { kiiTestnetOro } from './definitions/kiiTestnet.js';\nexport { kinto } from './definitions/kinto.js';\n/** @deprecated Use `kaia` instead. */\nexport { klaytn } from './definitions/klaytn.js';\n/** @deprecated Use `kairos` instead. */\nexport { klaytnBaobab } from './definitions/klaytnBaobab.js';\nexport { koi } from './definitions/koi.js';\nexport { kroma } from './definitions/kroma.js';\nexport { kromaSepolia } from './definitions/kromaSepolia.js';\nexport { l3x } from './definitions/l3x.js';\nexport { l3xTestnet } from './definitions/l3xTestnet.js';\nexport { lavita } from './definitions/lavita.js';\nexport { lens } from './definitions/lens.js';\nexport { lensTestnet } from './definitions/lensTestnet.js';\nexport { lestnet } from './definitions/lestnet.js';\nexport { lightlinkPegasus } from './definitions/lightlinkPegasus.js';\nexport { lightlinkPhoenix } from './definitions/lightlinkPhoenix.js';\nexport { linea } from './definitions/linea.js';\n/** @deprecated Use `lineaSepolia` instead. */\nexport { lineaGoerli } from './definitions/lineaGoerli.js';\nexport { lineaSepolia } from './definitions/lineaSepolia.js';\n/** @deprecated Use `lineaSepolia` instead. */\nexport { lineaTestnet } from './definitions/lineaTestnet.js';\nexport { lisk } from './definitions/lisk.js';\nexport { liskSepolia } from './definitions/liskSepolia.js';\nexport { loadAlphanet } from './definitions/loadAlphanet.js';\nexport { localhost } from './definitions/localhost.js';\nexport { loop } from './definitions/loop.js';\nexport { lukso } from './definitions/lukso.js';\nexport { luksoTestnet } from './definitions/luksoTestnet.js';\nexport { lumiaMainnet } from './definitions/lumiaMainnet.js';\nexport { lumiaTestnet } from './definitions/lumiaTestnet.js';\nexport { lumoz } from './definitions/lumoz.js';\nexport { lumozTestnet } from './definitions/lumozTestnet.js';\nexport { lycan } from './definitions/lycan.js';\nexport { lyra } from './definitions/lyra.js';\nexport { mainnet } from './definitions/mainnet.js';\nexport { mandala } from './definitions/mandala.js';\nexport { manta } from './definitions/manta.js';\nexport { mantaSepoliaTestnet } from './definitions/mantaSepoliaTestnet.js';\nexport { mantaTestnet } from './definitions/mantaTestnet.js';\nexport { mantle } from './definitions/mantle.js';\nexport { mantleSepoliaTestnet } from './definitions/mantleSepoliaTestnet.js';\nexport { mantleTestnet } from './definitions/mantleTestnet.js';\nexport { mantraDuKongEVMTestnet } from './definitions/mantraDuKongEVMTestnet.js';\nexport { mantraEVM } from './definitions/mantraEVM.js';\nexport { mapProtocol } from './definitions/mapProtocol.js';\nexport { matchain } from './definitions/matchain.js';\nexport { matchainTestnet } from './definitions/matchainTestnet.js';\nexport { mchVerse } from './definitions/mchVerse.js';\nexport { megaethTestnet } from './definitions/megaethTestnet.js';\nexport { mekong } from './definitions/mekong.js';\nexport { meld } from './definitions/meld.js';\nexport { memecore } from './definitions/memecore.js';\nexport { formicarium } from './definitions/memecoreFormicariumTestnet.js';\nexport { merlin } from './definitions/merlin.js';\nexport { merlinErigonTestnet } from './definitions/merlinErigonTestnet.js';\nexport { metachain } from './definitions/metachain.js';\nexport { metachainIstanbul } from './definitions/metachainIstanbul.js';\nexport { metadium } from './definitions/metadium.js';\nexport { metalL2 } from './definitions/metalL2.js';\nexport { meter } from './definitions/meter.js';\nexport { meterTestnet } from './definitions/meterTestnet.js';\nexport { metis } from './definitions/metis.js';\n/** @deprecated Use `metisSepolia` instead. */\nexport { metisGoerli } from './definitions/metisGoerli.js';\nexport { metisSepolia } from './definitions/metisSepolia.js';\nexport { mev } from './definitions/mev.js';\nexport { mevTestnet } from './definitions/mevTestnet.js';\nexport { mint } from './definitions/mint.js';\nexport { mintSepoliaTestnet } from './definitions/mintSepoliaTestnet.js';\nexport { mitosisTestnet } from './definitions/mitosisTestnet.js';\nexport { mode } from './definitions/mode.js';\nexport { modeTestnet } from './definitions/modeTestnet.js';\nexport { monadTestnet } from './definitions/monadTestnet.js';\nexport { moonbaseAlpha } from './definitions/moonbaseAlpha.js';\nexport { moonbeam } from './definitions/moonbeam.js';\nexport { moonbeamDev } from './definitions/moonbeamDev.js';\nexport { moonriver } from './definitions/moonriver.js';\nexport { morph } from './definitions/morph.js';\nexport { morphHolesky } from './definitions/morphHolesky.js';\nexport { morphSepolia } from './definitions/morphSepolia.js';\nexport { nahmii } from './definitions/nahmii.js';\nexport { nautilus } from './definitions/nautilus.js';\nexport { near } from './definitions/near.js';\nexport { nearTestnet } from './definitions/nearTestnet.js';\nexport { neonDevnet } from './definitions/neonDevnet.js';\nexport { neonMainnet } from './definitions/neonMainnet.js';\nexport { neoxMainnet } from './definitions/neoxMainnet.js';\nexport { neoxT4 } from './definitions/neoxT4.js';\nexport { newton } from './definitions/newton.js';\nexport { nexi } from './definitions/nexi.js';\nexport { nexilix } from './definitions/nexilix.js';\nexport { nibiru } from './definitions/nibiru.js';\nexport { nitrographTestnet } from './definitions/nitrographTestnet.js';\nexport { oasisTestnet } from './definitions/oasisTestnet.js';\nexport { oasys } from './definitions/oasys.js';\nexport { odysseyTestnet } from './definitions/odysseyTestnet.js';\nexport { okc } from './definitions/okc.js';\nexport { omax } from './definitions/omax.js';\nexport { omni } from './definitions/omni.js';\nexport { omniOmega } from './definitions/omniOmega.js';\nexport { oneWorld } from './definitions/oneWorld.js';\nexport { oortMainnetDev } from './definitions/oortmainnetDev.js';\nexport { opBNB } from './definitions/opBNB.js';\nexport { opBNBTestnet } from './definitions/opBNBTestnet.js';\nexport { openledger } from './definitions/openledger.js';\nexport { optimism } from './definitions/optimism.js';\nexport { optimismGoerli } from './definitions/optimismGoerli.js';\nexport { optimismSepolia } from './definitions/optimismSepolia.js';\nexport { optopia } from './definitions/optopia.js';\nexport { optopiaTestnet } from './definitions/optopiaTestnet.js';\nexport { orderly } from './definitions/orderly.js';\nexport { orderlySepolia } from './definitions/orderlySepolia.js';\nexport { otimDevnet } from './definitions/otimDevnet.js';\nexport { palm } from './definitions/palm.js';\nexport { palmTestnet } from './definitions/palmTestnet.js';\nexport { peaq } from './definitions/peaq.js';\nexport { pgn } from './definitions/pgn.js';\nexport { pgnTestnet } from './definitions/pgnTestnet.js';\nexport { phoenix } from './definitions/phoenix.js';\nexport { planq } from './definitions/planq.js';\nexport { plasma } from './definitions/plasma.js';\nexport { plasmaDevnet } from './definitions/plasmaDevnet.js';\nexport { plasmaTestnet } from './definitions/plasmaTestnet.js';\nexport { playfiAlbireo } from './definitions/playfiAlbireo.js';\nexport { plinga } from './definitions/plinga.js';\n/** @deprecated Use `plumeMainnet` instead. */\nexport { plume } from './definitions/plume.js';\n/** @deprecated Use `plumeSepolia` instead. */\nexport { plumeDevnet } from './definitions/plumeDevnet.js';\nexport { plumeMainnet } from './definitions/plumeMainnet.js';\nexport { plumeSepolia } from './definitions/plumeSepolia.js';\n/** @deprecated Use `plumeSepolia` instead. */\nexport { plumeTestnet } from './definitions/plumeTestnet.js';\nexport { polterTestnet } from './definitions/polterTestnet.js';\nexport { polygon } from './definitions/polygon.js';\nexport { polygonAmoy } from './definitions/polygonAmoy.js';\nexport { polygonMumbai } from './definitions/polygonMumbai.js';\nexport { polygonZkEvm } from './definitions/polygonZkEvm.js';\nexport { polygonZkEvmCardona } from './definitions/polygonZkEvmCardona.js';\n/** @deprecated Use `polygonZkEvmCardona` instead. */\nexport { polygonZkEvmTestnet } from './definitions/polygonZkEvmTestnet.js';\nexport { polynomial } from './definitions/polynomial.js';\nexport { polynomialSepolia } from './definitions/polynomialSepolia.js';\nexport { premiumBlockTestnet } from './definitions/premiumBlock.js';\nexport { pulsechain } from './definitions/pulsechain.js';\nexport { pulsechainV4 } from './definitions/pulsechainV4.js';\nexport { pumpfiTestnet } from './definitions/pumpfiTestnet.js';\nexport { pyrope } from './definitions/pyrope.js';\nexport { ql1 } from './definitions/ql1.js';\nexport { qMainnet } from './definitions/qMainnet.js';\nexport { qTestnet } from './definitions/qTestnet.js';\nexport { quai } from './definitions/quai.js';\nexport { quaiTestnet } from './definitions/quaiTestnet.js';\nexport { real } from './definitions/real.js';\nexport { redbellyMainnet } from './definitions/redbellyMainnet.js';\nexport { redbellyTestnet } from './definitions/redbellyTestnet.js';\nexport { reddio } from './definitions/reddio.js';\nexport { reddioSepolia } from './definitions/reddioSepolia.js';\nexport { redstone } from './definitions/redstone.js';\nexport { rei } from './definitions/rei.js';\nexport { reyaNetwork } from './definitions/reyaNetwork.js';\nexport { riseTestnet } from './definitions/riseTestnet.js';\nexport { rivalz } from './definitions/rivalz.js';\nexport { rollux } from './definitions/rollux.js';\nexport { rolluxTestnet } from './definitions/rolluxTestnet.js';\nexport { ronin } from './definitions/ronin.js';\nexport { root } from './definitions/root.js';\nexport { rootPorcini } from './definitions/rootPorcini.js';\nexport { rootstock } from './definitions/rootstock.js';\nexport { rootstockTestnet } from './definitions/rootstockTestnet.js';\nexport { rss3 } from './definitions/rss3.js';\nexport { rss3Sepolia } from './definitions/rss3Sepolia.js';\nexport { saakuru } from './definitions/saakuru.js';\nexport { saga } from './definitions/saga.js';\nexport { saigon } from './definitions/saigon.js';\nexport { sanko } from './definitions/sanko.js';\nexport { sapphire } from './definitions/sapphire.js';\nexport { sapphireTestnet } from './definitions/sapphireTestnet.js';\nexport { satoshiVM } from './definitions/satoshivm.js';\nexport { satoshiVMTestnet } from './definitions/satoshivmTestnet.js';\nexport { scroll } from './definitions/scroll.js';\nexport { scrollSepolia } from './definitions/scrollSepolia.js';\nexport { sei } from './definitions/sei.js';\nexport { seiDevnet } from './definitions/seiDevnet.js';\nexport { seismicDevnet } from './definitions/seismicDevnet.js';\nexport { seiTestnet } from './definitions/seiTestnet.js';\nexport { sepolia } from './definitions/sepolia.js';\nexport { shape } from './definitions/shape.js';\nexport { shapeSepolia } from './definitions/shapeSepolia.js';\nexport { shardeum } from './definitions/shardeum.js';\nexport { shardeumSphinx } from './definitions/shardeumSphinx.js';\nexport { shibarium } from './definitions/shibarium.js';\nexport { shibariumTestnet } from './definitions/shibariumTestnet.js';\nexport { shiden } from './definitions/shiden.js';\nexport { shimmer } from './definitions/shimmer.js';\nexport { shimmerTestnet } from './definitions/shimmerTestnet.js';\nexport { sidraChain } from './definitions/sidra.js';\nexport { silicon } from './definitions/silicon.js';\nexport { siliconSepolia } from './definitions/siliconSepolia.js';\nexport { sixProtocol } from './definitions/sixProtocol.js';\nexport { skaleBlockBrawlers } from './definitions/skale/brawl.js';\nexport { skaleCalypso } from './definitions/skale/calypso.js';\nexport { skaleCalypsoTestnet } from './definitions/skale/calypsoTestnet.js';\nexport { skaleCryptoBlades } from './definitions/skale/cryptoBlades.js';\n/** @deprecated */\nexport { skaleCryptoColosseum } from './definitions/skale/cryptoColosseum.js';\nexport { skaleEuropa } from './definitions/skale/europa.js';\nexport { skaleEuropaTestnet } from './definitions/skale/europaTestnet.js';\nexport { skaleExorde } from './definitions/skale/exorde.js';\n/** @deprecated */\nexport { skaleHumanProtocol } from './definitions/skale/humanProtocol.js';\nexport { skaleNebula } from './definitions/skale/nebula.js';\nexport { skaleNebulaTestnet } from './definitions/skale/nebulaTestnet.js';\n/** @deprecated Use `skaleEuropa` instead.*/\nexport { skaleRazor } from './definitions/skale/razor.js';\nexport { skaleTitan } from './definitions/skale/titan.js';\nexport { skaleTitanTestnet } from './definitions/skale/titanTestnet.js';\nexport { sketchpad } from './definitions/sketchpad.js';\nexport { snax } from './definitions/snax.js';\nexport { snaxTestnet } from './definitions/snaxTestnet.js';\nexport { somniaTestnet } from './definitions/somniaTestnet.js';\nexport { soneium } from './definitions/soneium.js';\nexport { soneiumMinato } from './definitions/soneiumMinato.js';\nexport { songbird } from './definitions/songbird.js';\nexport { songbirdTestnet } from './definitions/songbirdTestnet.js';\nexport { sonic } from './definitions/sonic.js';\nexport { sonicBlazeTestnet } from './definitions/sonicBlazeTestnet.js';\n/** @deprecated Use `sonicBlazeTestnet` instead. */\nexport { sonicTestnet } from './definitions/sonicTestnet.js';\nexport { sophon } from './definitions/sophon.js';\nexport { sophonTestnet } from './definitions/sophonTestnet.js';\nexport { sova } from './definitions/sova.js';\nexport { sovaSepolia } from './definitions/sovaSepolia.js';\nexport { spicy } from './definitions/spicy.js';\nexport { statusSepolia, statusSepolia as statusNetworkSepolia, } from './definitions/statusNetworkSepolia.js';\nexport { step } from './definitions/step.js';\nexport { story } from './definitions/story.js';\nexport { storyAeneid } from './definitions/storyAeneid.js';\n/** @deprecated Use `storyAeneid` instead. */\nexport { storyOdyssey } from './definitions/storyOdyssey.js';\n/** @deprecated Use `storyAeneid` instead. */\nexport { storyTestnet } from './definitions/storyTestnet.js';\nexport { stratis } from './definitions/stratis.js';\nexport { superlumio } from './definitions/superlumio.js';\nexport { superposition } from './definitions/superposition.js';\nexport { superseed } from './definitions/superseed.js';\nexport { superseedSepolia } from './definitions/superseedSepolia.js';\nexport { surgeTestnet } from './definitions/surgeTestnet.js';\nexport { swan } from './definitions/swan.js';\nexport { swanProximaTestnet } from './definitions/swanProximaTestnet.js';\nexport { swanSaturnTestnet } from './definitions/swanSaturnTestnet.js';\nexport { swellchain } from './definitions/swellchain.js';\nexport { swellchainTestnet } from './definitions/swellchainTestnet.js';\nexport { swissdlt } from './definitions/swissdlt.js';\nexport { syscoin } from './definitions/syscoin.js';\nexport { syscoinTestnet } from './definitions/syscoinTestnet.js';\nexport { tac } from './definitions/tac.js';\nexport { tacSPB } from './definitions/tacSPB.js';\nexport { taiko } from './definitions/taiko.js';\nexport { taikoHekla } from './definitions/taikoHekla.js';\nexport { taikoJolnir } from './definitions/taikoJolnir.js';\nexport { taikoKatla } from './definitions/taikoKatla.js';\nexport { taikoTestnetSepolia } from './definitions/taikoTestnetSepolia.js';\nexport { taraxa } from './definitions/taraxa.js';\nexport { taraxaTestnet } from './definitions/taraxaTestnet.js';\nexport { teaSepolia } from './definitions/teaSepolia.js';\nexport { telcoinTestnet } from './definitions/telcoinTestnet.js';\nexport { telos } from './definitions/telos.js';\nexport { telosTestnet } from './definitions/telosTestnet.js';\nexport { tenet } from './definitions/tenet.js';\nexport { ternoa } from './definitions/ternoa.js';\nexport { thaiChain } from './definitions/thaiChain.js';\nexport { that } from './definitions/that.js';\nexport { theta } from './definitions/theta.js';\nexport { thetaTestnet } from './definitions/thetaTestnet.js';\nexport { thunderCore } from './definitions/thunderCore.js';\nexport { thunderTestnet } from './definitions/thunderTestnet.js';\nexport { tiktrixTestnet } from './definitions/tiktrixTestnet.js';\nexport { tomb } from './definitions/tomb.js';\nexport { treasure } from './definitions/treasure.js';\nexport { treasureTopaz } from './definitions/treasureTopaz.js';\nexport { tron } from './definitions/tron.js';\nexport { tronNile } from './definitions/tronNile.js';\nexport { tronShasta } from './definitions/tronShasta.js';\nexport { ubiq } from './definitions/ubiq.js';\nexport { ultra } from './definitions/ultra.js';\nexport { ultraTestnet } from './definitions/ultraTestnet.js';\nexport { ultron } from './definitions/ultron.js';\nexport { ultronTestnet } from './definitions/ultronTestnet.js';\nexport { unichain } from './definitions/unichain.js';\nexport { unichainSepolia } from './definitions/unichainSepolia.js';\nexport { unique } from './definitions/unique.js';\nexport { uniqueOpal } from './definitions/uniqueOpal.js';\nexport { uniqueQuartz } from './definitions/uniqueQuartz.js';\nexport { unreal } from './definitions/unreal.js';\nexport { vana } from './definitions/vana.js';\nexport { vanaMoksha } from './definitions/vanaMoksha.js';\nexport { vanar } from './definitions/vanar.js';\nexport { vechain } from './definitions/vechain.js';\nexport { velas } from './definitions/velas.js';\nexport { viction } from './definitions/viction.js';\nexport { victionTestnet } from './definitions/victionTestnet.js';\nexport { vision } from './definitions/vision.js';\nexport { visionTestnet } from './definitions/visionTestnet.js';\nexport { wanchain } from './definitions/wanchain.js';\nexport { wanchainTestnet } from './definitions/wanchainTestnet.js';\n/** @deprecated Use `loadAlphanet` instead. */\nexport { weaveVMAlphanet } from './definitions/weavevmAlphanet.js';\nexport { wemix } from './definitions/wemix.js';\nexport { wemixTestnet } from './definitions/wemixTestnet.js';\nexport { westendAssetHub } from './definitions/westendAssetHub.js';\nexport { whitechain } from './definitions/whitechain.js';\nexport { whitechainTestnet } from './definitions/whitechainTestnet.js';\nexport { wmcTestnet } from './definitions/wmcTestnet.js';\nexport { worldchain } from './definitions/worldchain.js';\nexport { worldchainSepolia } from './definitions/worldchainSepolia.js';\nexport { worldLand } from './definitions/worldLand.js';\nexport { xai } from './definitions/xai.js';\nexport { xaiTestnet } from './definitions/xaiTestnet.js';\nexport { xdc } from './definitions/xdc.js';\nexport { xdcTestnet } from './definitions/xdcTestnet.js';\nexport { xLayer } from './definitions/xLayer.js';\nexport { \n/** @deprecated Use `xLayerTestnet` */\nx1Testnet, xLayerTestnet, } from './definitions/xLayerTestnet.js';\nexport { xphereMainnet } from './definitions/xphereMainnet.js';\nexport { xphereTestnet } from './definitions/xphereTestnet.js';\nexport { xrOne } from './definitions/xrOne.js';\nexport { xrplevmDevnet } from './definitions/xrplevmDevnet.js';\nexport { xrplevmTestnet } from './definitions/xrplevmTestnet.js';\nexport { xrSepolia } from './definitions/xrSepolia.js';\nexport { yooldoVerse } from './definitions/yooldoVerse.js';\nexport { yooldoVerseTestnet } from './definitions/yooldoVerseTestnet.js';\nexport { zenchainTestnet } from './definitions/zenchainTestnet.js';\nexport { zeniq } from './definitions/zeniq.js';\nexport { zeroNetwork } from './definitions/zeroNetwork.js';\nexport { zetachain } from './definitions/zetachain.js';\nexport { zetachainAthensTestnet } from './definitions/zetachainAthensTestnet.js';\nexport { zhejiang } from './definitions/zhejiang.js';\nexport { zilliqa } from './definitions/zilliqa.js';\nexport { zilliqaTestnet } from './definitions/zilliqaTestnet.js';\nexport { zircuit } from './definitions/zircuit.js';\nexport { zircuitGarfieldTestnet } from './definitions/zircuitGarfieldTestnet.js';\n/** @deprecated Use zircuitGarfieldTestnet instead */\nexport { zircuitTestnet } from './definitions/zircuitTestnet.js';\nexport { zkFair } from './definitions/zkFair.js';\nexport { zkFairTestnet } from './definitions/zkFairTestnet.js';\nexport { zkLinkNova } from './definitions/zkLinkNova.js';\nexport { zkLinkNovaSepoliaTestnet } from './definitions/zkLinkNovaSepoliaTestnet.js';\nexport { \n/** @deprecated Use `zksync` instead */\nzksync as zkSync, zksync, } from './definitions/zksync.js';\nexport { \n/** @deprecated Use `zksync` instead */\nzksyncInMemoryNode as zkSyncInMemoryNode, zksyncInMemoryNode, } from './definitions/zksyncInMemoryNode.js';\nexport { zksyncLocalCustomHyperchain } from './definitions/zksyncLocalCustomHyperchain.js';\nexport { zksyncLocalHyperchain } from './definitions/zksyncLocalHyperchain.js';\nexport { zksyncLocalHyperchainL1 } from './definitions/zksyncLocalHyperchainL1.js';\nexport { \n/** @deprecated Use `zksync` instead */\nzksyncLocalNode as zkSyncLocalNode, zksyncLocalNode, } from './definitions/zksyncLocalNode.js';\nexport { \n/** @deprecated Use `zksync` instead */\nzksyncSepoliaTestnet as zkSyncSepoliaTestnet, zksyncSepoliaTestnet, } from './definitions/zksyncSepoliaTestnet.js';\nexport { zora } from './definitions/zora.js';\nexport { zoraSepolia } from './definitions/zoraSepolia.js';\nexport { zoraTestnet } from './definitions/zoraTestnet.js';\n//# sourceMappingURL=index.js.map",
    "import { createPublicClient, createWalletClient, http, parseEther, formatEther, encodeFunctionData } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { sepolia } from 'viem/chains';\nimport { logger } from '@elizaos/core';\n\n// 错误分析接口\ninterface ErrorAnalysis {\n  errorType: string;\n  reason: string;\n  suggestion: string;\n  userFriendlyMessage: string;\n}\n\n// 常见的错误代码映射\nconst ERROR_CODE_MAP: Record<string, { name: string; description: string; solution: string }> = {\n  '0x177e802f': {\n    name: 'ERC721InsufficientApproval',\n    description: 'NFT 授权不足',\n    solution: '需要先授权合约才能操作此 NFT'\n  },\n  '0x42842e0e': {\n    name: 'ERC721InsufficientApproval',\n    description: '调用者不是所有者或已授权的地址',\n    solution: '请确认您是 NFT 的所有者，或已完成授权'\n  },\n  '0xa9fbf51f': {\n    name: 'NotAuthorized',\n    description: '未授权',\n    solution: '请先授权合约'\n  },\n  '0x8c379a00': {\n    name: 'Error',\n    description: '合约执行失败',\n    solution: '请检查操作参数是否正确'\n  }\n};\n\n// 分析错误并返回详细原因\nexport function analyzeNFTError(error: any, operation: string): ErrorAnalysis {\n  const errorMessage = error.message || String(error);\n  const errorString = errorMessage.toLowerCase();\n  \n  logger.info({ errorMessage, operation }, 'Analyzing NFT error');\n\n  // 检查授权相关错误\n  if (errorMessage.includes('0x177e802f') || \n      errorMessage.includes('ERC721InsufficientApproval') ||\n      errorMessage.includes('insufficient approval') ||\n      errorMessage.includes('caller is not token owner or approved') ||\n      errorMessage.includes('not authorized') ||\n      errorMessage.includes('未授权')) {\n    return {\n      errorType: '授权错误',\n      reason: 'NFT 未授权给相应的合约。ERC721 标准要求在进行转账或操作前，必须先授权合约。',\n      suggestion: `1. 确认您是该 NFT 的所有者\\n2. 先执行授权操作，授权对应的合约地址\\n3. 等待授权交易确认后（通常需要 1-2 个区块），再重试当前操作`,\n      userFriendlyMessage: `❌ ${operation}失败：授权不足\\n\\n原因：该 NFT 尚未授权给合约，无法进行操作。\\n\\n解决方案：\\n1. 请先授权该 NFT 给对应的合约\\n2. 等待授权交易确认（约 1-2 个区块时间）\\n3. 然后重新尝试${operation}操作\\n\\n提示：授权只需要执行一次，授权后即可进行后续操作。`\n    };\n  }\n\n  // 检查所有权错误\n  if (errorMessage.includes('Not the owner') ||\n      errorMessage.includes('not owner') ||\n      errorMessage.includes('OwnableUnauthorizedAccount') ||\n      errorMessage.includes('不是该 NFT 的所有者') ||\n      errorMessage.includes('不是所有者')) {\n    return {\n      errorType: '所有权错误',\n      reason: '您不是该 NFT 的所有者，无法进行操作。',\n      suggestion: '请确认您拥有该 NFT，可以通过查询您的 NFT 列表来验证。',\n      userFriendlyMessage: `❌ ${operation}失败：权限不足\\n\\n原因：您不是该 NFT 的所有者，无法进行此操作。\\n\\n解决方案：\\n1. 确认您输入的 Token ID 是否正确\\n2. 检查该 NFT 是否在您的钱包中\\n3. 如果 NFT 已转移，请使用正确的 Token ID`\n    };\n  }\n\n  // 检查余额不足\n  if (errorMessage.includes('insufficient funds') ||\n      errorMessage.includes('余额不足') ||\n      errorMessage.includes('Insufficient balance') ||\n      errorMessage.includes('balance too low')) {\n    return {\n      errorType: '余额不足',\n      reason: '账户余额不足以支付 gas 费用或交易金额。',\n      suggestion: '请向账户充值足够的 ETH 以支付 gas 费用和交易金额。',\n      userFriendlyMessage: `❌ ${operation}失败：余额不足\\n\\n原因：您的账户余额不足以完成此操作（包括 gas 费用）。\\n\\n解决方案：\\n1. 检查当前账户余额\\n2. 确保有足够的 ETH 支付交易费用（建议至少 0.01 ETH）\\n3. 如果是 Sepolia 测试网，可以从水龙头获取测试币`\n    };\n  }\n\n  // 检查已上架/已质押\n  if (errorMessage.includes('already listed') ||\n      errorMessage.includes('already staked') ||\n      errorMessage.includes('Already staked') ||\n      errorMessage.includes('已经上架') ||\n      errorMessage.includes('已经质押') ||\n      errorMessage.includes('已上架')) {\n    return {\n      errorType: '状态错误',\n      reason: '该 NFT 已经处于操作状态（已上架或已质押）。',\n      suggestion: '请先取消上架或解除质押，然后再进行操作。',\n      userFriendlyMessage: `❌ ${operation}失败：NFT 状态冲突\\n\\n原因：该 NFT 当前已经上架/质押，无法重复操作。\\n\\n解决方案：\\n1. 如果您想重新操作，请先取消当前状态\\n2. 等待状态更新后，再执行新的操作`\n    };\n  }\n\n  // 检查参数错误\n  if (errorMessage.includes('Invalid tokenId') ||\n      errorMessage.includes('Token does not exist') ||\n      errorMessage.includes('NFT not found') ||\n      errorMessage.includes('无效') ||\n      errorMessage.includes('不存在')) {\n    return {\n      errorType: '参数错误',\n      reason: '提供的 Token ID 无效或 NFT 不存在。',\n      suggestion: '请检查 Token ID 是否正确，确保该 NFT 存在。',\n      userFriendlyMessage: `❌ ${operation}失败：参数错误\\n\\n原因：提供的 Token ID 无效或该 NFT 不存在。\\n\\n解决方案：\\n1. 检查 Token ID 是否正确\\n2. 确认该 NFT 是否已铸造\\n3. 使用正确的数字格式（如：1、2、3 等）`\n    };\n  }\n\n  // 检查价格错误\n  if (errorMessage.includes('Invalid price') ||\n      errorMessage.includes('价格无效') ||\n      errorMessage.includes('Price too low') ||\n      errorMessage.includes('价格过低')) {\n    return {\n      errorType: '价格错误',\n      reason: '提供的价格无效或过低。',\n      suggestion: '请提供有效的价格（必须大于 0）。',\n      userFriendlyMessage: `❌ ${operation}失败：价格无效\\n\\n原因：提供的价格格式错误或数值无效。\\n\\n解决方案：\\n1. 确保价格是大于 0 的数字\\n2. 使用正确的格式（如：0.1、1.5 等）\\n3. 价格单位为 ETH`\n    };\n  }\n\n  // 检查 Gas 相关错误\n  if (errorMessage.includes('gas') ||\n      errorMessage.includes('Gas') ||\n      errorMessage.includes('revert') ||\n      errorMessage.includes('execution reverted')) {\n    return {\n      errorType: '交易执行错误',\n      reason: '交易执行被回滚，可能是合约逻辑检查失败。',\n      suggestion: '请检查操作参数是否满足合约要求，或稍后重试。',\n      userFriendlyMessage: `❌ ${operation}失败：交易执行被回滚\\n\\n原因：合约执行时检查失败，操作不符合合约规则。\\n\\n可能的原因：\\n1. NFT 状态不符合要求（已上架、已质押等）\\n2. 参数不满足合约条件\\n3. 网络拥堵导致交易失败\\n\\n解决方案：\\n1. 检查 NFT 当前状态\\n2. 确认操作参数正确\\n3. 等待片刻后重试`\n    };\n  }\n\n  // 检查网络错误\n  if (errorMessage.includes('network') ||\n      errorMessage.includes('Network') ||\n      errorMessage.includes('timeout') ||\n      errorMessage.includes('connection')) {\n    return {\n      errorType: '网络错误',\n      reason: '网络连接问题导致操作失败。',\n      suggestion: '请检查网络连接，稍后重试。',\n      userFriendlyMessage: `❌ ${operation}失败：网络连接问题\\n\\n原因：无法连接到区块链网络。\\n\\n解决方案：\\n1. 检查网络连接\\n2. 确认 RPC 端点可用\\n3. 稍后重试`\n    };\n  }\n\n  // 默认错误\n  return {\n    errorType: '未知错误',\n    reason: errorMessage || '操作失败，原因未知',\n    suggestion: '请检查操作参数和网络状态，或联系技术支持。',\n    userFriendlyMessage: `❌ ${operation}失败\\n\\n错误信息：${errorMessage}\\n\\n建议：\\n1. 检查操作参数是否正确\\n2. 确认网络连接正常\\n3. 查看上述错误信息以获取更多线索\\n4. 如果问题持续，请稍后重试`\n  };\n}\n\n// 合约地址配置\nconst NFT_MARKETPLACE_ADDRESS = (process.env.NFT_MARKETPLACE_ADDRESS || '0x96D1227aCD29057607601Afdf16BF853D5B58203') as `0x${string}`;\nconst NFT_STAKING_ADDRESS = (process.env.NFT_STAKING_ADDRESS || '0x0Ef064805ecad331F2d1ED363E6C7cD7E06831e9') as `0x${string}`;\nconst NFT_LOAN_ADDRESS = (process.env.NFT_LOAN_ADDRESS || '0xbeB3110F3563BD63dDb05F0813213d2dAC3e0BE1') as `0x${string}`;\nconst NFT_CONTRACT_ADDRESS = (process.env.NFT_CONTRACT_ADDRESS || '0x5c7c76fe8eA314fdb49b9388f3ac92F7a159f330') as `0x${string}`;\n\n// 多个备用 RPC 端点\nconst RPC_ENDPOINTS = [\n  process.env.SEPOLIA_RPC_URL,\n  'https://rpc.sepolia.org',\n  'https://ethereum-sepolia-rpc.publicnode.com',\n  'https://sepolia.gateway.tenderly.co',\n].filter(Boolean) as string[];\n\nlet currentRpcIndex = 0;\n\nconst getCurrentRpcUrl = (): string => {\n  return RPC_ENDPOINTS[currentRpcIndex] || RPC_ENDPOINTS[0] || 'https://rpc.sepolia.org';\n};\n\nconst switchToNextRpc = (): string => {\n  currentRpcIndex = (currentRpcIndex + 1) % RPC_ENDPOINTS.length;\n  return getCurrentRpcUrl();\n};\n\n// 创建公共客户端\nconst createPublicClientWithRetry = () => {\n  const createClient = (rpcUrl: string) => {\n    return createPublicClient({\n      chain: sepolia,\n      transport: http(rpcUrl, { retryCount: 3, retryDelay: 1000 }),\n    });\n  };\n\n  let client = createClient(getCurrentRpcUrl());\n\n  const proxyClient = new Proxy(client, {\n    get(target, prop) {\n      const originalMethod = (target as any)[prop];\n      if (typeof originalMethod === 'function') {\n        return async (...args: any[]) => {\n          let lastError: any;\n          let attempts = 0;\n          const maxAttempts = Math.min(3, RPC_ENDPOINTS.length);\n\n          while (attempts < maxAttempts) {\n            try {\n              return await originalMethod.apply(target, args);\n            } catch (error: any) {\n              lastError = error;\n              if (error?.message?.includes('429') || error?.status === 429 || error?.cause?.status === 429) {\n                if (attempts < maxAttempts - 1) {\n                  const newRpcUrl = switchToNextRpc();\n                  client = createClient(newRpcUrl);\n                  target = client;\n                  attempts++;\n                  await new Promise(resolve => setTimeout(resolve, 1000 * attempts));\n                  continue;\n                }\n              }\n              throw error;\n            }\n          }\n          throw lastError;\n        };\n      }\n      return originalMethod;\n    },\n  });\n\n  return proxyClient;\n};\n\n// 创建钱包客户端\nconst createWalletClientWithRetry = (privateKey: string) => {\n  if (!privateKey) {\n    throw new Error('请配置钱包私钥 EVM_PRIVATE_KEY');\n  }\n\n  const account = privateKeyToAccount(privateKey.trim() as `0x${string}`);\n  \n  const createClient = (rpcUrl: string) => {\n    return createWalletClient({\n      account,\n      chain: sepolia,\n      transport: http(rpcUrl, { retryCount: 3, retryDelay: 1000 }),\n    });\n  };\n\n  let client = createClient(getCurrentRpcUrl());\n\n  const proxyClient = new Proxy(client, {\n    get(target, prop) {\n      const originalMethod = (target as any)[prop];\n      if (typeof originalMethod === 'function') {\n        return async (...args: any[]) => {\n          let lastError: any;\n          let attempts = 0;\n          const maxAttempts = Math.min(3, RPC_ENDPOINTS.length);\n\n          while (attempts < maxAttempts) {\n            try {\n              return await originalMethod.apply(target, args);\n            } catch (error: any) {\n              lastError = error;\n              if (error?.message?.includes('429') || error?.status === 429 || error?.cause?.status === 429) {\n                if (attempts < maxAttempts - 1) {\n                  const newRpcUrl = switchToNextRpc();\n                  client = createClient(newRpcUrl);\n                  target = client;\n                  attempts++;\n                  await new Promise(resolve => setTimeout(resolve, 1000 * attempts));\n                  continue;\n                }\n              }\n              throw error;\n            }\n          }\n          throw lastError;\n        };\n      }\n      return originalMethod;\n    },\n  });\n\n  return proxyClient;\n};\n\n// 合约 ABI\nconst NFT_MARKETPLACE_ABI = [\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }, { name: 'price', type: 'uint256' }],\n    name: 'listNFT',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'cancelListing',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'buyNFT',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'getListing',\n    outputs: [{ name: 'seller', type: 'address' }, { name: 'price', type: 'uint256' }, { name: 'active', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  }\n] as const;\n\nconst NFT_STAKING_ABI = [\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'stakeNFT',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'unstakeNFT',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'getStakingInfo',\n    outputs: [{ name: 'staker', type: 'address' }, { name: 'startTime', type: 'uint256' }, { name: 'rewards', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function'\n  }\n] as const;\n\nconst NFT_LOAN_ABI = [\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }, { name: 'loanAmount', type: 'uint256' }, { name: 'duration', type: 'uint256' }],\n    name: 'createLoan',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'loanId', type: 'uint256' }],\n    name: 'fulfillLoan',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'loanId', type: 'uint256' }],\n    name: 'repayLoan',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'loanId', type: 'uint256' }],\n    name: 'loans',\n    outputs: [\n      { name: 'borrower', type: 'address' },\n      { name: 'lender', type: 'address' },\n      { name: 'tokenId', type: 'uint256' },\n      { name: 'loanAmount', type: 'uint256' },\n      { name: 'interestRate', type: 'uint256' },\n      { name: 'startTime', type: 'uint256' },\n      { name: 'dueDate', type: 'uint256' },\n      { name: 'repaymentAmount', type: 'uint256' },\n      { name: 'active', type: 'bool' },\n      { name: 'repaid', type: 'bool' }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  }\n] as const;\n\nconst TEST_NFT_ABI = [\n  {\n    inputs: [{ name: 'to', type: 'address' }],\n    name: 'mint',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  }\n] as const;\n\nconst ERC721_ABI = [\n  {\n    inputs: [{ name: 'to', type: 'address' }, { name: 'tokenId', type: 'uint256' }],\n    name: 'approve',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'getApproved',\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'owner', type: 'address' }, { name: 'operator', type: 'address' }],\n    name: 'isApprovedForAll',\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [{ name: 'tokenId', type: 'uint256' }],\n    name: 'ownerOf',\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function'\n  }\n] as const;\n\n// NFT 服务类\nexport class NFTService {\n  private privateKey: string;\n  private walletClient: ReturnType<typeof createWalletClientWithRetry>;\n  private publicClient: ReturnType<typeof createPublicClientWithRetry>;\n\n  constructor(privateKey?: string) {\n    this.privateKey = privateKey || process.env.EVM_PRIVATE_KEY || '';\n    if (!this.privateKey) {\n      throw new Error('未配置钱包私钥，请设置 EVM_PRIVATE_KEY 环境变量');\n    }\n    this.walletClient = createWalletClientWithRetry(this.privateKey);\n    this.publicClient = createPublicClientWithRetry();\n  }\n\n  // 铸造 NFT\n  async mintNFT(toAddress?: string): Promise<string> {\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n    const recipient = toAddress || account.address;\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: TEST_NFT_ABI,\n      functionName: 'mint',\n      args: [recipient as `0x${string}`]\n    });\n\n    return hash;\n  }\n\n  // 检查是否是合约 owner\n  async checkIsOwner(userAddress: string): Promise<boolean> {\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: TEST_NFT_ABI,\n      functionName: 'owner',\n      args: []\n    });\n    return owner.toLowerCase() === userAddress.toLowerCase();\n  }\n\n  // 授权市场合约\n  async approveMarketplace(tokenId: string): Promise<string> {\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n\n    // 验证所有权\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'ownerOf',\n      args: [BigInt(tokenId)]\n    });\n\n    if (owner.toLowerCase() !== account.address.toLowerCase()) {\n      throw new Error('您不是该 NFT 的所有者，无法进行授权');\n    }\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'approve',\n      args: [NFT_MARKETPLACE_ADDRESS, BigInt(tokenId)]\n    });\n\n    return hash;\n  }\n\n  // 检查是否已授权市场合约\n  async checkMarketplaceApproval(tokenId: string): Promise<boolean> {\n    const account = this.walletClient.account;\n    if (!account) {\n      return false;\n    }\n\n    try {\n      // 检查全局授权\n      const isApprovedForAll = await this.publicClient.readContract({\n        address: NFT_CONTRACT_ADDRESS,\n        abi: ERC721_ABI,\n        functionName: 'isApprovedForAll',\n        args: [account.address, NFT_MARKETPLACE_ADDRESS]\n      });\n\n      if (isApprovedForAll) {\n        return true;\n      }\n\n      // 检查单个 token 授权\n      const approvedAddress = await this.publicClient.readContract({\n        address: NFT_CONTRACT_ADDRESS,\n        abi: ERC721_ABI,\n        functionName: 'getApproved',\n        args: [BigInt(tokenId)]\n      });\n\n      return approvedAddress.toLowerCase() === NFT_MARKETPLACE_ADDRESS.toLowerCase();\n    } catch (error) {\n      logger.error({ error }, '检查授权状态失败');\n      return false;\n    }\n  }\n\n  // 上架 NFT\n  async listNFT(tokenId: string, price: string, autoApprove: boolean = true): Promise<string> {\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n\n    // 验证所有权\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'ownerOf',\n      args: [BigInt(tokenId)]\n    });\n\n    if (owner.toLowerCase() !== account.address.toLowerCase()) {\n      throw new Error('您不是该 NFT 的所有者，无法上架');\n    }\n\n    // 检查并自动授权\n    const isApproved = await this.checkMarketplaceApproval(tokenId);\n    if (!isApproved && autoApprove) {\n      logger.info(`NFT ${tokenId} 未授权，自动进行授权...`);\n      await this.approveMarketplace(tokenId);\n      // 等待交易确认\n      await new Promise(resolve => setTimeout(resolve, 3000));\n    } else if (!isApproved) {\n      throw new Error('请先授权市场合约才能上架 NFT。您可以先授权，然后再尝试上架。');\n    }\n\n    const value = parseEther(price);\n    const hash = await this.walletClient.writeContract({\n      address: NFT_MARKETPLACE_ADDRESS,\n      abi: NFT_MARKETPLACE_ABI,\n      functionName: 'listNFT',\n      args: [BigInt(tokenId), value]\n    });\n\n    return hash;\n  }\n\n  // 购买 NFT\n  async buyNFT(tokenId: string, price?: string): Promise<string> {\n    const listing = await this.getListing(tokenId);\n    if (!listing) {\n      throw new Error('该 NFT 未上架或已被售出');\n    }\n\n    const paymentAmount = price ? parseEther(price) : parseEther(listing.price);\n    const listingPrice = parseEther(listing.price);\n    if (paymentAmount < listingPrice) {\n      throw new Error(`支付金额不足！该 NFT 的价格是 ${listing.price} ETH`);\n    }\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_MARKETPLACE_ADDRESS,\n      abi: NFT_MARKETPLACE_ABI,\n      functionName: 'buyNFT',\n      args: [BigInt(tokenId)],\n      value: paymentAmount\n    });\n\n    return hash;\n  }\n\n  // 获取上架信息\n  async getListing(tokenId: string): Promise<{ seller: string; price: string; active: boolean } | null> {\n    try {\n      const result = await this.publicClient.readContract({\n        address: NFT_MARKETPLACE_ADDRESS,\n        abi: NFT_MARKETPLACE_ABI,\n        functionName: 'getListing',\n        args: [BigInt(tokenId)]\n      }) as [string, bigint, boolean];\n\n      if (!result[2]) {\n        return null;\n      }\n\n      return {\n        seller: result[0],\n        price: formatEther(result[1]),\n        active: result[2]\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // 检查是否已授权质押合约\n  async checkStakingApproval(tokenId: string): Promise<boolean> {\n    const account = this.walletClient.account;\n    if (!account) {\n      return false;\n    }\n\n    try {\n      // 检查全局授权\n      const isApprovedForAll = await this.publicClient.readContract({\n        address: NFT_CONTRACT_ADDRESS,\n        abi: ERC721_ABI,\n        functionName: 'isApprovedForAll',\n        args: [account.address, NFT_STAKING_ADDRESS]\n      });\n\n      if (isApprovedForAll) {\n        return true;\n      }\n\n      // 检查单个 token 授权\n      const approvedAddress = await this.publicClient.readContract({\n        address: NFT_CONTRACT_ADDRESS,\n        abi: ERC721_ABI,\n        functionName: 'getApproved',\n        args: [BigInt(tokenId)]\n      });\n\n      return approvedAddress.toLowerCase() === NFT_STAKING_ADDRESS.toLowerCase();\n    } catch (error) {\n      logger.error({ error }, '检查质押授权状态失败');\n      return false;\n    }\n  }\n\n  // 授权质押合约\n  async approveStaking(tokenId: string): Promise<string> {\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'ownerOf',\n      args: [BigInt(tokenId)]\n    });\n\n    if (owner.toLowerCase() !== account.address.toLowerCase()) {\n      throw new Error('您不是该 NFT 的所有者，无法进行授权');\n    }\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'approve',\n      args: [NFT_STAKING_ADDRESS, BigInt(tokenId)]\n    });\n\n    return hash;\n  }\n\n  // 质押 NFT\n  async stakeNFT(tokenId: string, autoApprove: boolean = true): Promise<string> {\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n\n    // 验证所有权\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'ownerOf',\n      args: [BigInt(tokenId)]\n    });\n\n    if (owner.toLowerCase() !== account.address.toLowerCase()) {\n      throw new Error('您不是该 NFT 的所有者，无法质押');\n    }\n\n    // 检查并自动授权\n    const isApproved = await this.checkStakingApproval(tokenId);\n    if (!isApproved && autoApprove) {\n      logger.info(`NFT ${tokenId} 未授权质押合约，自动进行授权...`);\n      await this.approveStaking(tokenId);\n      // 等待交易确认\n      await new Promise(resolve => setTimeout(resolve, 3000));\n    } else if (!isApproved) {\n      throw new Error('请先授权质押合约才能质押 NFT。您可以先授权，然后再尝试质押。');\n    }\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_STAKING_ADDRESS,\n      abi: NFT_STAKING_ABI,\n      functionName: 'stakeNFT',\n      args: [BigInt(tokenId)]\n    });\n\n    return hash;\n  }\n\n  // 解除质押\n  async unstakeNFT(tokenId: string): Promise<string> {\n    const hash = await this.walletClient.writeContract({\n      address: NFT_STAKING_ADDRESS,\n      abi: NFT_STAKING_ABI,\n      functionName: 'unstakeNFT',\n      args: [BigInt(tokenId)]\n    });\n\n    return hash;\n  }\n\n  // 获取质押信息\n  async getStakingInfo(tokenId: string): Promise<{ staker: string; startTime: number; rewards: string } | null> {\n    try {\n      const result = await this.publicClient.readContract({\n        address: NFT_STAKING_ADDRESS,\n        abi: NFT_STAKING_ABI,\n        functionName: 'getStakingInfo',\n        args: [BigInt(tokenId)]\n      }) as [string, bigint, bigint];\n\n      if (!result[0] || result[0] === '0x0000000000000000000000000000000000000000') {\n        return null;\n      }\n\n      return {\n        staker: result[0],\n        startTime: Number(result[1]),\n        rewards: formatEther(result[2])\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // 检查是否已授权借贷合约\n  async checkLoanApproval(tokenId: string): Promise<boolean> {\n    const account = this.walletClient.account;\n    if (!account) {\n      return false;\n    }\n\n    try {\n      // 检查全局授权\n      const isApprovedForAll = await this.publicClient.readContract({\n        address: NFT_CONTRACT_ADDRESS,\n        abi: ERC721_ABI,\n        functionName: 'isApprovedForAll',\n        args: [account.address, NFT_LOAN_ADDRESS]\n      });\n\n      if (isApprovedForAll) {\n        return true;\n      }\n\n      // 检查单个 token 授权\n      const approvedAddress = await this.publicClient.readContract({\n        address: NFT_CONTRACT_ADDRESS,\n        abi: ERC721_ABI,\n        functionName: 'getApproved',\n        args: [BigInt(tokenId)]\n      });\n\n      return approvedAddress.toLowerCase() === NFT_LOAN_ADDRESS.toLowerCase();\n    } catch (error) {\n      logger.error({ error }, '检查借贷授权状态失败');\n      return false;\n    }\n  }\n\n  // 授权借贷合约\n  async approveLoan(tokenId: string): Promise<string> {\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'ownerOf',\n      args: [BigInt(tokenId)]\n    });\n\n    if (owner.toLowerCase() !== account.address.toLowerCase()) {\n      throw new Error('您不是该 NFT 的所有者，无法进行授权');\n    }\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'approve',\n      args: [NFT_LOAN_ADDRESS, BigInt(tokenId)]\n    });\n\n    return hash;\n  }\n\n  // 创建借贷\n  async createLoan(tokenId: string, loanAmount: string, durationDays: number, autoApprove: boolean = true): Promise<string> {\n    if (durationDays < 7 || durationDays > 365) {\n      throw new Error('借贷期限必须在 7-365 天之间');\n    }\n\n    const account = this.walletClient.account;\n    if (!account) {\n      throw new Error('无法获取账户信息');\n    }\n\n    // 验证所有权\n    const owner = await this.publicClient.readContract({\n      address: NFT_CONTRACT_ADDRESS,\n      abi: ERC721_ABI,\n      functionName: 'ownerOf',\n      args: [BigInt(tokenId)]\n    });\n\n    if (owner.toLowerCase() !== account.address.toLowerCase()) {\n      throw new Error('您不是该 NFT 的所有者，无法创建借贷');\n    }\n\n    // 检查并自动授权\n    const isApproved = await this.checkLoanApproval(tokenId);\n    if (!isApproved && autoApprove) {\n      logger.info(`NFT ${tokenId} 未授权借贷合约，自动进行授权...`);\n      await this.approveLoan(tokenId);\n      // 等待交易确认\n      await new Promise(resolve => setTimeout(resolve, 3000));\n    } else if (!isApproved) {\n      throw new Error('请先授权借贷合约才能创建借贷。您可以先授权，然后再尝试创建借贷。');\n    }\n\n    const amount = parseEther(loanAmount);\n    const durationInSeconds = durationDays * 24 * 60 * 60;\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_LOAN_ADDRESS,\n      abi: NFT_LOAN_ABI,\n      functionName: 'createLoan',\n      args: [BigInt(tokenId), amount, BigInt(durationInSeconds)]\n    });\n\n    return hash;\n  }\n\n  // 出资完成借贷\n  async fulfillLoan(loanId: string): Promise<string> {\n    const loanData = await this.publicClient.readContract({\n      address: NFT_LOAN_ADDRESS,\n      abi: NFT_LOAN_ABI,\n      functionName: 'loans',\n      args: [BigInt(loanId)]\n    }) as any;\n\n    const loanAmount = loanData[3] as bigint;\n    const lender = loanData[1] as string;\n\n    if (lender && lender !== '0x0000000000000000000000000000000000000000') {\n      throw new Error('该借贷已有贷款人出资');\n    }\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_LOAN_ADDRESS,\n      abi: NFT_LOAN_ABI,\n      functionName: 'fulfillLoan',\n      args: [BigInt(loanId)],\n      value: loanAmount\n    });\n\n    return hash;\n  }\n\n  // 还款\n  async repayLoan(loanId: string): Promise<string> {\n    const loanData = await this.publicClient.readContract({\n      address: NFT_LOAN_ADDRESS,\n      abi: NFT_LOAN_ABI,\n      functionName: 'loans',\n      args: [BigInt(loanId)]\n    }) as any;\n\n    const repaymentAmount = loanData[7] as bigint;\n\n    const hash = await this.walletClient.writeContract({\n      address: NFT_LOAN_ADDRESS,\n      abi: NFT_LOAN_ABI,\n      functionName: 'repayLoan',\n      args: [BigInt(loanId)],\n      value: repaymentAmount\n    });\n\n    return hash;\n  }\n\n  // 获取借贷信息\n  async getLoanInfo(loanId: string): Promise<{ borrower: string; lender: string; loanAmount: string; dueDate: number; repaid: boolean; repaymentAmount: string } | null> {\n    try {\n      const loanData = await this.publicClient.readContract({\n        address: NFT_LOAN_ADDRESS,\n        abi: NFT_LOAN_ABI,\n        functionName: 'loans',\n        args: [BigInt(loanId)]\n      }) as any;\n\n      if (!loanData[0] || loanData[0] === '0x0000000000000000000000000000000000000000') {\n        return null;\n      }\n\n      return {\n        borrower: loanData[0] as string,\n        lender: loanData[1] as string,\n        loanAmount: formatEther(loanData[3] as bigint),\n        dueDate: Number(loanData[6] as bigint),\n        repaid: loanData[9] as boolean,\n        repaymentAmount: formatEther(loanData[7] as bigint)\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n}\n",
    "import { logger, type IAgentRuntime, type Project, type ProjectAgent } from '@elizaos/core';\nimport starterPlugin from './plugin.ts';\nimport { evmBalancePlugin } from './evm-balance-plugin.ts';\nimport { nftPlugin } from './nft-plugin.ts';\nimport { character } from './character.ts';\n\nconst initCharacter = ({ runtime }: { runtime: IAgentRuntime }) => {\n  logger.info('Initializing character');\n  logger.info({ name: character.name }, 'Name:');\n};\n\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => await initCharacter({ runtime }),\n  // NFT 插件放在最前面以确保最高优先级\n  plugins: [nftPlugin, starterPlugin, evmBalancePlugin], // NFT 插件优先，避免与 EVM 插件冲突\n};\n\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport { character } from './character.ts';\n\nexport default project;\n",
    "import type { Plugin } from '@elizaos/core';\nimport {\n  type Action,\n  type ActionResult,\n  type Content,\n  type GenerateTextParams,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type Provider,\n  type ProviderResult,\n  Service,\n  type State,\n  logger,\n} from '@elizaos/core';\nimport { z } from 'zod';\nimport { createPublicClient, http, formatEther } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { sepolia } from 'viem/chains';\n\n/**\n * Define the configuration schema for the plugin with the following properties:\n *\n * @param {string} EXAMPLE_PLUGIN_VARIABLE - The name of the plugin (min length of 1, optional)\n * @returns {object} - The configured schema object\n */\nconst configSchema = z.object({\n  EXAMPLE_PLUGIN_VARIABLE: z\n    .string()\n    .min(1, 'Example plugin variable is not provided')\n    .optional()\n    .transform((val) => {\n      if (!val) {\n        console.warn('Warning: Example plugin variable is not provided');\n      }\n      return val;\n    }),\n});\n\n/**\n * Example HelloWorld action\n * This demonstrates the simplest possible action structure\n */\n/**\n * Represents an action that responds with a simple hello world message.\n *\n * @typedef {Object} Action\n * @property {string} name - The name of the action\n * @property {string[]} similes - The related similes of the action\n * @property {string} description - Description of the action\n * @property {Function} validate - Validation function for the action\n * @property {Function} handler - The function that handles the action\n * @property {Object[]} examples - Array of examples for the action\n */\nconst helloWorldAction: Action = {\n  name: 'HELLO_WORLD',\n  similes: ['GREET', 'SAY_HELLO'],\n  description: 'Responds with a simple hello world message',\n\n  validate: async (_runtime: IAgentRuntime, _message: Memory, _state: State): Promise<boolean> => {\n    // Always valid\n    return true;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling HELLO_WORLD action');\n\n      // Simple response content\n      const responseContent: Content = {\n        text: 'hello world!',\n        actions: ['HELLO_WORLD'],\n        source: message.content.source,\n      };\n\n      // Call back with the hello world message\n      await callback(responseContent);\n\n      return {\n        text: 'Sent hello world greeting',\n        values: {\n          success: true,\n          greeted: true,\n        },\n        data: {\n          actionName: 'HELLO_WORLD',\n          messageId: message.id,\n          timestamp: Date.now(),\n        },\n        success: true,\n      };\n    } catch (error) {\n      logger.error({ error }, 'Error in HELLO_WORLD action:');\n\n      return {\n        text: 'Failed to send hello world greeting',\n        values: {\n          success: false,\n          error: 'GREETING_FAILED',\n        },\n        data: {\n          actionName: 'HELLO_WORLD',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you say hello?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'hello world!',\n          actions: ['HELLO_WORLD'],\n        },\n      },\n    ],\n  ],\n};\n\n// 创建公共客户端用于查询余额\nconst publicClient = createPublicClient({\n  chain: sepolia,\n  transport: http()\n});\n\n// 提取地址或私钥的辅助函数\nconst extractAddressOrPrivateKey = (text: string): { address?: string; privateKey?: string } => {\n  const addressRegex = /0x[a-fA-F0-9]{40}/g;\n  const privateKeyRegex = /0x[a-fA-F0-9]{64}/g;\n  \n  const addressMatch = text.match(addressRegex);\n  const privateKeyMatch = text.match(privateKeyRegex);\n  \n  if (privateKeyMatch) {\n    return { privateKey: privateKeyMatch[0] };\n  } else if (addressMatch) {\n    return { address: addressMatch[0] };\n  }\n  \n  return {};\n};\n\n\n/**\n * Example Hello World Provider\n * This demonstrates the simplest possible provider implementation\n */\nconst helloWorldProvider: Provider = {\n  name: 'HELLO_WORLD_PROVIDER',\n  description: 'A simple example provider',\n\n  get: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State\n  ): Promise<ProviderResult> => {\n    return {\n      text: 'I am a provider',\n      values: {},\n      data: {},\n    };\n  },\n};\n\nexport class StarterService extends Service {\n  static serviceType = 'starter';\n  capabilityDescription =\n    'This is a starter service which is attached to the agent through the starter plugin.';\n\n  constructor(runtime: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime) {\n    logger.info('*** Starting starter service ***');\n    const service = new StarterService(runtime);\n    return service;\n  }\n\n  static async stop(runtime: IAgentRuntime) {\n    logger.info('*** Stopping starter service ***');\n    // get the service from the runtime\n    const service = runtime.getService(StarterService.serviceType);\n    if (!service) {\n      throw new Error('Starter service not found');\n    }\n    service.stop();\n  }\n\n  async stop() {\n    logger.info('*** Stopping starter service instance ***');\n  }\n}\n\nconst plugin: Plugin = {\n  name: 'starter',\n  description: 'A starter plugin for Eliza',\n  // Set lowest priority so real models take precedence\n  priority: -1000,\n  config: {\n    EXAMPLE_PLUGIN_VARIABLE: process.env.EXAMPLE_PLUGIN_VARIABLE,\n  },\n  async init(config: Record<string, string>) {\n    logger.info('*** Initializing starter plugin ***');\n    try {\n      const validatedConfig = await configSchema.parseAsync(config);\n\n      // Set all environment variables at once\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = value;\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const errorMessages =\n          error.issues?.map((e) => e.message)?.join(', ') || 'Unknown validation error';\n        throw new Error(`Invalid plugin configuration: ${errorMessages}`);\n      }\n      throw new Error(\n        `Invalid plugin configuration: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  },\n  models: {\n    [ModelType.TEXT_SMALL]: async (\n      _runtime,\n      { prompt, stopSequences = [] }: GenerateTextParams\n    ) => {\n      return 'Never gonna give you up, never gonna let you down, never gonna run around and desert you...';\n    },\n    [ModelType.TEXT_LARGE]: async (\n      _runtime,\n      {\n        prompt,\n        stopSequences = [],\n        maxTokens = 8192,\n        temperature = 0.7,\n        frequencyPenalty = 0.7,\n        presencePenalty = 0.7,\n      }: GenerateTextParams\n    ) => {\n      return 'Never gonna make you cry, never gonna say goodbye, never gonna tell a lie and hurt you...';\n    },\n  },\n  routes: [\n    {\n      name: 'helloworld',\n      path: '/helloworld',\n      type: 'GET',\n      handler: async (_req: any, res: any) => {\n        // send a response\n        res.json({\n          message: 'Hello World!',\n        });\n      },\n    },\n    {\n      name: 'agents-api',\n      path: '/api/agents',\n      type: 'GET',\n      handler: async (req: any, res: any) => {\n        try {\n          const agents = [\n            {\n              id: 'chain-prophet',\n              name: 'Chain Prophet',\n              bio: '专业的区块链和 DeFi 助手，能够查询钱包余额、分析交易数据，并提供区块链相关的技术支持。',\n              capabilities: ['EVM 余额查询', '私钥地址推导', '区块链数据分析', 'DeFi 协议支持'],\n              status: 'active'\n            }\n          ];\n          res.json(agents);\n        } catch (error) {\n          console.error('获取 Agent 列表失败:', error);\n          res.status(500).json({ error: '获取 Agent 列表失败' });\n        }\n      },\n    },\n    {\n      name: 'agent-detail-api',\n      path: '/api/agents/:id',\n      type: 'GET',\n      handler: async (req: any, res: any) => {\n        try {\n          const { id } = req.params;\n          if (id === 'chain-prophet') {\n            const agent = {\n              id: 'chain-prophet',\n              name: 'Chain Prophet',\n              bio: '专业的区块链和 DeFi 助手，能够查询钱包余额、分析交易数据，并提供区块链相关的技术支持。',\n              capabilities: ['EVM 余额查询', '私钥地址推导', '区块链数据分析', 'DeFi 协议支持'],\n              status: 'active'\n            };\n            res.json(agent);\n          } else {\n            res.status(404).json({ error: 'Agent 未找到' });\n          }\n        } catch (error) {\n          console.error('获取 Agent 信息失败:', error);\n          res.status(500).json({ error: '获取 Agent 信息失败' });\n        }\n      },\n    },\n    {\n      name: 'evm-balance-api',\n      path: '/api/evm/balance',\n      type: 'POST',\n      handler: async (req: any, res: any) => {\n        try {\n          const { address, privateKey } = req.body;\n          \n          if (!address && !privateKey) {\n            return res.status(400).json({ \n              success: false, \n              error: '请提供地址或私钥' \n            });\n          }\n          \n          let targetAddress: string;\n          \n          if (privateKey) {\n            // 从私钥推导地址\n            try {\n              const account = privateKeyToAccount(privateKey as `0x${string}`);\n              targetAddress = account.address;\n            } catch (error) {\n              return res.status(400).json({\n                success: false,\n                error: '私钥格式错误'\n              });\n            }\n          } else {\n            targetAddress = address;\n          }\n          \n          // 验证地址格式\n          const addressRegex = /^0x[a-fA-F0-9]{40}$/;\n          if (!addressRegex.test(targetAddress)) {\n            return res.status(400).json({\n              success: false,\n              error: '地址格式错误'\n            });\n          }\n          \n          // 查询余额\n          const balance = await publicClient.getBalance({\n            address: targetAddress as `0x${string}`,\n          });\n          \n          // 转换为 ETH 单位\n          const balanceInEth = formatEther(balance);\n          \n          res.json({\n            success: true,\n            address: targetAddress,\n            balance: balanceInEth,\n            network: 'Sepolia',\n            wasDerivedFromPrivateKey: !!privateKey\n          });\n          \n        } catch (error) {\n          console.error('查询余额失败:', error);\n          res.status(500).json({\n            success: false,\n            error: '查询余额失败: ' + (error instanceof Error ? error.message : '未知错误')\n          });\n        }\n      },\n    },\n    {\n      name: 'health-check',\n      path: '/api/health',\n      type: 'GET',\n      handler: async (req: any, res: any) => {\n        res.json({ \n          status: 'ok', \n          timestamp: new Date().toISOString(),\n          service: 'chain-prophet-api'\n        });\n      },\n    },\n  ],\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.info('MESSAGE_RECEIVED event received');\n        logger.info({ message: params.message }, 'Received message');\n        \n        // 处理消息并生成回复\n        if (params.message && params.runtime) {\n          try {\n            const message = params.message;\n            const runtime = params.runtime;\n            \n            // 检查是否是 EVM 相关查询\n            const text = message.content?.text || '';\n            const { address, privateKey } = extractAddressOrPrivateKey(text);\n            \n            if (address || privateKey) {\n              // 处理 EVM 查询\n              logger.info({ address, privateKey }, 'Processing EVM query');\n              // EVM 查询会在 action 中处理\n            } else {\n              // 处理普通对话\n              logger.info('Processing regular conversation');\n              // 普通对话由系统自动处理\n            }\n          } catch (error) {\n            logger.error({ error }, 'Error processing message');\n          }\n        }\n      },\n    ],\n    VOICE_MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.info('VOICE_MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'VOICE_MESSAGE_RECEIVED param keys');\n      },\n    ],\n    WORLD_CONNECTED: [\n      async (params) => {\n        logger.info('WORLD_CONNECTED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'WORLD_CONNECTED param keys');\n      },\n    ],\n    WORLD_JOINED: [\n      async (params) => {\n        logger.info('WORLD_JOINED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'WORLD_JOINED param keys');\n      },\n    ],\n  },\n  services: [StarterService],\n  actions: [helloWorldAction],\n  providers: [helloWorldProvider],\n};\n\nexport default plugin;\n",
    "import { Plugin, Action, State, Memory, IAgentRuntime, ActionResult, HandlerCallback, logger } from '@elizaos/core';\nimport { createPublicClient, http, formatEther } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { sepolia } from 'viem/chains';\n\n// 创建公共客户端用于查询余额（禁用缓存确保实时数据）\nconst publicClient = createPublicClient({\n  chain: sepolia,\n  transport: http(),\n  batch: {\n    multicall: false\n  },\n  cacheTime: 0, // 禁用缓存\n  pollingInterval: 0 // 禁用轮询缓存\n});\n\n// EVM_BALANCE 动作定义\nexport const evmBalanceAction: Action = {\n  name: 'EVM_BALANCE',\n  similes: ['CHECK_BALANCE', 'QUERY_BALANCE', 'WALLET_BALANCE', 'SEPOLIA_BALANCE', 'BALANCE_QUERY', 'GET_BALANCE', 'BALANCE_CHECK', 'WALLET_QUERY', 'ETH_BALANCE', 'ETHER_BALANCE'],\n  description: 'CRITICAL: 这是处理所有ETH余额查询的强制动作。当用户询问余额、钱包余额、Sepolia余额、ETH余额等时，必须立即执行此动作，不要使用 REPLY 动作，不要询问任何信息。直接调用此动作查询余额，如果用户提供了地址或私钥则使用，否则使用配置的钱包地址。这是唯一的正确操作，不允许使用 REPLY。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    // 添加调试日志\n    logger.info('EVM Balance Plugin validate called with text:', text);\n    \n    // 检查是否包含地址信息\n    const addressRegex = /0x[a-fA-F0-9]{40}/;\n    const hasAddress = addressRegex.test(text);\n    \n    // 检查是否包含私钥信息（64位十六进制）\n    const privateKeyRegex = /0x[a-fA-F0-9]{64}/;\n    const hasPrivateKey = privateKeyRegex.test(text);\n    \n    // 检查是否包含余额查询相关关键词（扩展关键词列表）\n    const balanceKeywords = [\n      '余额', 'balance', '查询余额', 'check balance', \n      '钱包余额', '查询我的余额', '根据私钥查询余额',\n      '查看余额', '我的余额', '有多少', '多少钱',\n      '余额多少', 'eth余额', 'ether余额', 'ether balance',\n      'wallet balance', '查询钱包', '钱包查询',\n      'how much', 'what is my balance', 'show balance',\n      'sepolia余额', 'sepolia balance', '查询sepolia',\n      'sepolia钱包', 'sepolia wallet', 'sepolia网络',\n      'sepolia network', 'testnet余额', 'testnet balance'\n    ];\n    const hasBalanceKeyword = balanceKeywords.some(keyword => \n      text.includes(keyword.toLowerCase())\n    );\n    \n    // 只有当明确是余额查询时才触发EVM_BALANCE动作\n    const shouldTrigger = hasBalanceKeyword || (hasAddress && text.includes('余额')) || (hasPrivateKey && text.includes('余额'));\n    \n    // 添加调试日志\n    logger.info({ \n      text, \n      hasAddress, \n      hasPrivateKey, \n      hasBalanceKeyword, \n      shouldTrigger \n    }, 'EVM Balance Plugin validate result');\n    \n    // 如果检测到余额查询，返回true\n    if (shouldTrigger) {\n      logger.info('EVM_BALANCE action will be triggered for balance query');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling EVM_BALANCE action');\n\n    \n\n      const text = message.content.text || '';\n      let address: string;\n      \n      // 首先尝试提取私钥（64位十六进制）\n      const privateKeyRegex = /0x[a-fA-F0-9]{64}/;\n      const privateKeyMatch = text.match(privateKeyRegex);\n      \n      if (privateKeyMatch) {\n        // 如果提供了私钥，从私钥推导地址\n        try {\n          const privateKey = privateKeyMatch[0] as `0x${string}`;\n          const account = privateKeyToAccount(privateKey);\n          address = account.address;\n          logger.info('Derived address from private key:', address);\n        } catch (error) {\n          await callback({\n            text: '私钥格式错误，请提供有效的私钥（以0x开头的64位十六进制字符串）',\n            actions: ['EVM_BALANCE'],\n            source: message.content.source,\n          });\n          \n          return {\n            text: '私钥格式错误',\n            values: { success: false, error: 'INVALID_PRIVATE_KEY' },\n            data: { actionName: 'EVM_BALANCE', messageId: message.id },\n            success: false,\n          };\n        }\n      } else {\n        // 如果没有提供私钥，尝试提取地址（40位十六进制）\n        const addressRegex = /0x[a-fA-F0-9]{40}/;\n        const addressMatch = text.match(addressRegex);\n        \n        if (addressMatch) {\n          // 如果提供了地址，直接使用\n          address = addressMatch[0];\n          logger.info('Using provided address:', address);\n        } else {\n          // 如果没有提供地址，尝试从runtime获取钱包地址\n          try {\n            // 尝试从EVM插件获取钱包地址\n            const evmPrivateKey = process.env.EVM_PRIVATE_KEY;\n            logger.info('Checking EVM_PRIVATE_KEY environment variable...');\n            if (evmPrivateKey && evmPrivateKey.trim()) {\n              const account = privateKeyToAccount(evmPrivateKey.trim() as `0x${string}`);\n              address = account.address;\n              logger.info('Using wallet address from EVM_PRIVATE_KEY:', address);\n            } else {\n              logger.info('EVM_PRIVATE_KEY not found or empty');\n              // 如果都没有，直接提示用户提供地址\n              await callback({\n                text: '未找到配置的钱包地址，请提供有效的以太坊地址或私钥进行查询。',\n                actions: ['EVM_BALANCE'],\n                source: message.content.source,\n              });\n              \n              return {\n                text: '未找到地址或私钥',\n                values: { success: false, error: 'INVALID_INPUT' },\n                data: { actionName: 'EVM_BALANCE', messageId: message.id },\n                success: false,\n              };\n            }\n          } catch (error) {\n            logger.error({ error }, 'Error deriving address from EVM_PRIVATE_KEY');\n            await callback({\n              text: '无法从配置中获取钱包地址，请提供有效的以太坊地址或私钥',\n              actions: ['EVM_BALANCE'],\n              source: message.content.source,\n            });\n            \n            return {\n              text: '地址获取失败',\n              values: { success: false, error: 'ADDRESS_DERIVATION_FAILED' },\n              data: { actionName: 'EVM_BALANCE', messageId: message.id },\n              success: false,\n            };\n          }\n        }\n      }\n      \n      // 查询余额（强制获取最新数据）\n      const balance = await publicClient.getBalance({\n        address: address as `0x${string}`,\n        blockTag: 'latest' // 强制查询最新区块\n      });\n      \n      // 转换为ETH单位\n      const balanceInEth = formatEther(balance);\n      \n      // 检查地址来源\n      const hasProvidedAddress = /0x[a-fA-F0-9]{40}/.test(text);\n      const wasDerivedFromPrivateKey = /0x[a-fA-F0-9]{64}/.test(text);\n      const wasFromConfig = !hasProvidedAddress && !wasDerivedFromPrivateKey;\n      \n      // 添加时间戳确保用户知道这是实时数据\n      const timestamp = new Date().toLocaleString('zh-CN', {\n        timeZone: 'Asia/Shanghai',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n      \n      let resultText: string;\n      if (wasDerivedFromPrivateKey) {\n        resultText = `从私钥推导的地址：${address}\\n\\n余额：${balanceInEth} ETH\\n\\n网络：Sepolia测试网\\n查询时间：${timestamp}`;\n      } else if (wasFromConfig) {\n        resultText = `配置的钱包地址：${address}\\n\\n余额：${balanceInEth} ETH\\n\\n网络：Sepolia测试网\\n查询时间：${timestamp}`;\n      } else {\n        resultText = `钱包地址 ${address} 的余额：\\n${balanceInEth} ETH\\n\\n网络：Sepolia测试网\\n查询时间：${timestamp}`;\n      }\n      \n      await callback({\n        text: resultText,\n        actions: ['EVM_BALANCE'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `成功查询地址 ${address} 的余额`,\n        values: {\n          success: true,\n          address: address,\n          balance: balanceInEth,\n        },\n        data: {\n          actionName: 'EVM_BALANCE',\n          messageId: message.id,\n          address: address,\n          balance: balanceInEth,\n          timestamp: Date.now(),\n        },\n        success: true,\n      };\n      \n    } catch (error) {\n      logger.error({ error }, 'Error in EVM_BALANCE action:');\n\n      await callback({\n        text: '查询余额时出现错误，请检查地址格式是否正确，或稍后重试。',\n        actions: ['EVM_BALANCE'],\n        source: message.content.source,\n      });\n\n      return {\n        text: '查询余额失败',\n        values: {\n          success: false,\n          error: 'BALANCE_QUERY_FAILED',\n        },\n        data: {\n          actionName: 'EVM_BALANCE',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '查询我的钱包余额',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '配置的钱包地址：0x742d35Cc6634C0532925a3b844Bc454e4438f44e\\n\\n余额：0.5 ETH\\n\\n网络：Sepolia测试网',\n          actions: ['EVM_BALANCE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '查询余额 0x742d35Cc6634C0532925a3b844Bc454e4438f44e',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '钱包地址 0x742d35Cc6634C0532925a3b844Bc454e4438f44e 的余额：\\n0.5 ETH\\n\\n网络：Sepolia测试网',\n          actions: ['EVM_BALANCE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '根据私钥查询余额 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '从私钥推导的地址：0x742d35Cc6634C0532925a3b844Bc454e4438f44e\\n\\n余额：0.5 ETH\\n\\n网络：Sepolia测试网',\n          actions: ['EVM_BALANCE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: 'what is my ETH balance?',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '配置的钱包地址：0x742d35Cc6634C0532925a3b844Bc454e4438f44e\\n\\n余额：0.5 ETH\\n\\n网络：Sepolia测试网',\n          actions: ['EVM_BALANCE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '查看余额 0x742d35Cc6634C0532925a3b844Bc454e4438f44e',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '钱包地址 0x742d35Cc6634C0532925a3b844Bc454e4438f44e 的余额：\\n0.5 ETH\\n\\n网络：Sepolia测试网',\n          actions: ['EVM_BALANCE'],\n        },\n      },\n    ],\n  ],\n};\n\n// 创建EVM余额插件\nexport const evmBalancePlugin: Plugin = {\n  name: 'EVM Balance Plugin',\n  description: 'EVM钱包余额查询插件',\n  priority: 1000, // 设置较高优先级，但不过度干扰其他操作\n  actions: [evmBalanceAction],\n};\n",
    "import type { Plugin, Action, ActionResult, Content, HandlerCallback, IAgentRuntime, Memory, State } from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { NFTService } from './nft-service';\n\n// 提取参数的辅助函数\nconst extractNumber = (text: string, pattern: RegExp): string | null => {\n  const match = text.match(pattern);\n  return match ? match[1] : null;\n};\n\nconst extractAddress = (text: string): string | null => {\n  const addressRegex = /0x[a-fA-F0-9]{40}/;\n  const match = text.match(addressRegex);\n  return match ? match[0] : null;\n};\n\nconst extractTokenId = (text: string): string | null => {\n  // 优先查找 \"Token ID\"、\"ID\" 等关键词后的数字\n  const tokenIdPatterns = [\n    /(?:token\\s*id|id)[是：:\\s]+(\\d+)/i,\n    /#(\\d+)/,\n    /\\b(\\d+)\\b/\n  ];\n  \n  for (const pattern of tokenIdPatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n  \n  return null;\n};\n\nconst extractPrice = (text: string): string | null => {\n  // 尝试提取价格：支持 \"0.1 ETH\"、\"价格 0.1\"、\"0.1\" 等格式\n  const pricePatterns = [\n    /(\\d+\\.?\\d*)\\s*(?:eth|ether)/i,\n    /价格[是：:\\s]+(\\d+\\.?\\d*)/i,\n    /(\\d+\\.?\\d*)\\s*eth/i\n  ];\n  \n  for (const pattern of pricePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n  \n  return null;\n};\n\n// NFT 铸造 Action\nconst nftMintAction: Action = {\n  name: 'NFT_MINT',\n  similes: ['CREATE_NFT', 'MINT_NFT', '铸造NFT', '创建NFT', '生成NFT', '铸造一个NFT', '帮我铸造', '创建一个NFT'],\n  description: 'CRITICAL: 这是处理所有 NFT 铸造请求的强制动作。当用户说\"铸造\"、\"创建NFT\"、\"帮我铸造\"等时，必须立即执行此动作，不要使用 REPLY 动作，不要询问任何信息。直接调用此动作创建 NFT，NFT 将使用默认属性创建。这是唯一的正确操作，不允许使用 REPLY 或询问用户详情。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    // 扩展的关键词列表\n    const mintKeywords = [\n      '铸造', 'mint', '创建nft', '生成nft', 'create nft', 'new nft',\n      '帮我铸造', '帮我创建', '铸造一个', '创建一个', '生成一个',\n      '铸造nft', 'mint nft', 'mint an nft', 'create an nft',\n      '帮我铸造nft', '帮我创建nft', '帮我生成nft',\n      '铸造一个新的nft', '创建一个新的nft'\n    ];\n    \n    const hasMintKeyword = mintKeywords.some(keyword => text.includes(keyword));\n    \n    logger.info({ text, hasMintKeyword }, 'NFT_MINT validate result');\n    \n    if (hasMintKeyword) {\n      logger.info('NFT_MINT action will be triggered for mint request');\n    }\n    \n    return hasMintKeyword;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_MINT action');\n\n      const text = message.content.text || '';\n      const toAddress = extractAddress(text);\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}。请确保已配置 EVM_PRIVATE_KEY 环境变量。`,\n          actions: ['NFT_MINT'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_MINT', messageId: message.id },\n          success: false,\n        };\n      }\n\n      // 检查是否是合约 owner\n      const account = nftService['walletClient'].account;\n      if (!account) {\n        throw new Error('无法获取账户信息');\n      }\n\n      const isOwner = await nftService.checkIsOwner(account.address);\n      if (!isOwner) {\n        await callback({\n          text: '您不是合约所有者，无法铸造 NFT。只有合约部署者可以铸造。',\n          actions: ['NFT_MINT'],\n          source: message.content.source,\n        });\n        return {\n          text: '权限不足',\n          values: { success: false, error: 'NOT_OWNER' },\n          data: { actionName: 'NFT_MINT', messageId: message.id },\n          success: false,\n        };\n      }\n\n      // 直接铸造 NFT，使用默认值（不需要名称、描述等信息）\n      // 通知用户正在铸造\n      await callback({\n        text: '正在为您铸造 NFT...',\n        actions: ['NFT_MINT'],\n        source: message.content.source,\n      });\n\n      const recipientAddress = toAddress || account.address;\n      const hash = await nftService.mintNFT(recipientAddress);\n\n      await callback({\n        text: `NFT 铸造成功！\\n\\n交易哈希: ${hash}\\n接收地址: ${recipientAddress}\\n\\nNFT 已使用默认属性创建，后续可以通过其他方式更新元数据。`,\n        actions: ['NFT_MINT'],\n        source: message.content.source,\n      });\n\n      return {\n        text: `成功铸造 NFT，交易哈希: ${hash}`,\n        values: { success: true, transactionHash: hash, recipientAddress },\n        data: { actionName: 'NFT_MINT', messageId: message.id, transactionHash: hash, recipientAddress },\n        success: true,\n      };\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_MINT action:');\n      await callback({\n        text: `铸造 NFT 失败: ${error.message || '未知错误'}`,\n        actions: ['NFT_MINT'],\n        source: message.content.source,\n      });\n      return {\n        text: '铸造 NFT 失败',\n        values: { success: false, error: 'MINT_FAILED' },\n        data: { actionName: 'NFT_MINT', error: error.message },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '帮我铸造一个 NFT' } },\n      { name: 'Chain Prophet', content: { text: '正在为您铸造NFT...', actions: ['NFT_MINT'] } },\n      { name: 'Chain Prophet', content: { text: 'NFT 铸造成功！交易哈希: 0x1234...\\n接收地址: 0x338eA4a3CbF46E5Cc332033FD5A02A3BB0478145\\n\\nNFT 已使用默认属性创建。', actions: ['NFT_MINT'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我想创建一个 NFT' } },\n      { name: 'Chain Prophet', content: { text: '正在为您铸造NFT...', actions: ['NFT_MINT'] } },\n      { name: 'Chain Prophet', content: { text: 'NFT 铸造成功！交易哈希: 0x5678...', actions: ['NFT_MINT'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '铸造 NFT' } },\n      { name: 'Chain Prophet', content: { text: '正在为您铸造NFT...', actions: ['NFT_MINT'] } },\n      { name: 'Chain Prophet', content: { text: 'NFT 铸造成功！交易哈希: 0x9abc...', actions: ['NFT_MINT'] } },\n    ],\n  ],\n};\n\n// NFT 上架 Action\nconst nftListAction: Action = {\n  name: 'NFT_LIST',\n  similes: ['LIST_NFT', '上架NFT', '出售NFT', '售卖NFT', 'SELL_NFT', '上架到市场', '放到市场'],\n  description: '将 NFT 上架到市场进行出售。这是处理所有 NFT 上架请求的唯一正确动作。当用户想要上架 NFT、出售 NFT、在市场上售卖 NFT 时，必须使用此动作。需要提供 Token ID 和价格（ETH）。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const listKeywords = [\n      '上架', 'list', '出售', '售卖', 'sell', '放到市场', '上架到市场',\n      '帮我上架', '出售nft', 'sell nft', 'list nft',\n      '上架nft', '出售我的nft', '售卖我的nft'\n    ];\n    \n    const hasListKeyword = listKeywords.some(keyword => text.includes(keyword));\n    const hasNumber = /\\d+/.test(text);\n    \n    logger.info({ text, hasListKeyword, hasNumber }, 'NFT_LIST validate result');\n    \n    const shouldTrigger = hasListKeyword && hasNumber;\n    \n    if (shouldTrigger) {\n      logger.info('NFT_LIST action will be triggered for list request');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_LIST action');\n\n      const text = message.content.text || '';\n      const tokenId = extractTokenId(text);\n      const price = extractPrice(text);\n\n      if (!tokenId) {\n        await callback({\n          text: '请提供 NFT 的 Token ID',\n          actions: ['NFT_LIST'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少 Token ID',\n          values: { success: false, error: 'MISSING_TOKEN_ID' },\n          data: { actionName: 'NFT_LIST', messageId: message.id },\n          success: false,\n        };\n      }\n\n      if (!price) {\n        await callback({\n          text: '请提供上架价格（ETH）。例如：上架 Token ID 1，价格 0.1 ETH',\n          actions: ['NFT_LIST'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少价格',\n          values: { success: false, error: 'MISSING_PRICE' },\n          data: { actionName: 'NFT_LIST', messageId: message.id },\n          success: false,\n        };\n      }\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}`,\n          actions: ['NFT_LIST'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_LIST', messageId: message.id },\n          success: false,\n        };\n      }\n\n      try {\n        const hash = await nftService.listNFT(tokenId, price);\n\n        await callback({\n          text: `NFT 上架成功！交易哈希: ${hash}\\nToken ID: ${tokenId}\\n价格: ${price} ETH`,\n          actions: ['NFT_LIST'],\n          source: message.content.source,\n        });\n\n        return {\n          text: `成功上架 NFT，交易哈希: ${hash}`,\n          values: { success: true, transactionHash: hash, tokenId, price },\n          data: { actionName: 'NFT_LIST', messageId: message.id, transactionHash: hash, tokenId, price },\n          success: true,\n        };\n      } catch (listError: any) {\n        // 如果是因为授权错误，尝试自动授权\n        const errorMessage = listError.message || '';\n        const isApprovalError = errorMessage.includes('0x177e802f') || \n                                errorMessage.includes('ERC721InsufficientApproval') ||\n                                errorMessage.includes('insufficient approval') ||\n                                errorMessage.includes('caller is not token owner or approved');\n\n        if (isApprovalError) {\n          logger.info(`检测到授权错误，尝试自动授权 NFT ${tokenId}...`);\n          try {\n            // 先授权\n            const approveHash = await nftService.approveMarketplace(tokenId);\n            await callback({\n              text: `检测到需要授权，正在进行授权...\\n授权交易哈希: ${approveHash}\\n请等待几秒钟后再次尝试上架。`,\n              actions: ['NFT_LIST'],\n              source: message.content.source,\n            });\n            \n            // 等待授权确认\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            \n            // 再次尝试上架\n            const hash = await nftService.listNFT(tokenId, price, false);\n            \n            await callback({\n              text: `授权成功，NFT 上架成功！\\n授权交易哈希: ${approveHash}\\n上架交易哈希: ${hash}\\nToken ID: ${tokenId}\\n价格: ${price} ETH`,\n              actions: ['NFT_LIST'],\n              source: message.content.source,\n            });\n\n            return {\n              text: `成功上架 NFT，交易哈希: ${hash}`,\n              values: { success: true, transactionHash: hash, tokenId, price },\n              data: { actionName: 'NFT_LIST', messageId: message.id, transactionHash: hash, tokenId, price },\n              success: true,\n            };\n          } catch (approveError: any) {\n            throw new Error(`授权失败: ${approveError.message}。请手动授权市场合约后再试。`);\n          }\n        }\n        \n        // 其他错误，直接抛出\n        throw listError;\n      }\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_LIST action:');\n      \n      // 分析错误原因\n      const { analyzeNFTError } = await import('./nft-service');\n      const errorAnalysis = analyzeNFTError(error, '上架 NFT');\n      \n      await callback({\n        text: errorAnalysis.userFriendlyMessage,\n        actions: ['NFT_LIST'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `上架 NFT 失败: ${errorAnalysis.errorType}`,\n        values: { \n          success: false, \n          error: 'LIST_FAILED',\n          errorType: errorAnalysis.errorType,\n          reason: errorAnalysis.reason,\n          suggestion: errorAnalysis.suggestion\n        },\n        data: { \n          actionName: 'NFT_LIST', \n          error: error.message,\n          errorAnalysis \n        },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '上架 Token ID 1，价格 0.1 ETH' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 上架成功！交易哈希: 0x...', actions: ['NFT_LIST'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '帮我上架 ID 为 5 的 NFT，价格 0.5 ETH' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 上架成功！交易哈希: 0x...', actions: ['NFT_LIST'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我想出售我的 NFT，Token ID 是 3，价格 1 ETH' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 上架成功！交易哈希: 0x...', actions: ['NFT_LIST'] } },\n    ],\n  ],\n};\n\n// NFT 质押 Action\nconst nftStakeAction: Action = {\n  name: 'NFT_STAKE',\n  similes: ['STAKE_NFT', '质押NFT', '锁定NFT', 'LOCK_NFT', '质押我的NFT', '把NFT质押'],\n  description: '质押 NFT 以获得奖励。这是处理所有 NFT 质押请求的唯一正确动作。当用户想要质押 NFT、锁定 NFT 以获得收益时，必须使用此动作。需要提供 Token ID。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const stakeKeywords = [\n      '质押', 'stake', '锁定', 'lock', '质押nft', 'stake nft',\n      '帮我质押', '质押我的', '把nft质押', '锁定nft'\n    ];\n    \n    const hasStakeKeyword = stakeKeywords.some(keyword => text.includes(keyword));\n    const hasNumber = /\\d+/.test(text);\n    \n    logger.info({ text, hasStakeKeyword, hasNumber }, 'NFT_STAKE validate result');\n    \n    const shouldTrigger = hasStakeKeyword && hasNumber;\n    \n    if (shouldTrigger) {\n      logger.info('NFT_STAKE action will be triggered for stake request');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_STAKE action');\n\n      const text = message.content.text || '';\n      const tokenId = extractTokenId(text);\n\n      if (!tokenId) {\n        await callback({\n          text: '请提供 NFT 的 Token ID',\n          actions: ['NFT_STAKE'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少 Token ID',\n          values: { success: false, error: 'MISSING_TOKEN_ID' },\n          data: { actionName: 'NFT_STAKE', messageId: message.id },\n          success: false,\n        };\n      }\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}`,\n          actions: ['NFT_STAKE'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_STAKE', messageId: message.id },\n          success: false,\n        };\n      }\n\n      try {\n        const hash = await nftService.stakeNFT(tokenId, false);\n\n        await callback({\n          text: `NFT 质押成功！交易哈希: ${hash}\\nToken ID: ${tokenId}`,\n          actions: ['NFT_STAKE'],\n          source: message.content.source,\n        });\n\n        return {\n          text: `成功质押 NFT，交易哈希: ${hash}`,\n          values: { success: true, transactionHash: hash, tokenId },\n          data: { actionName: 'NFT_STAKE', messageId: message.id, transactionHash: hash, tokenId },\n          success: true,\n        };\n      } catch (stakeError: any) {\n        // 如果是因为授权错误，尝试自动授权\n        const errorMessage = stakeError.message || '';\n        const isApprovalError = errorMessage.includes('0x177e802f') || \n                                errorMessage.includes('ERC721InsufficientApproval') ||\n                                errorMessage.includes('insufficient approval') ||\n                                errorMessage.includes('caller is not token owner or approved') ||\n                                errorMessage.includes('请先授权质押合约');\n\n        if (isApprovalError) {\n          logger.info(`检测到授权错误，尝试自动授权 NFT ${tokenId} 给质押合约...`);\n          try {\n            // 先授权\n            const approveHash = await nftService.approveStaking(tokenId);\n            await callback({\n              text: `检测到需要授权，正在进行授权...\\n授权交易哈希: ${approveHash}\\n请等待几秒钟后自动重试质押。`,\n              actions: ['NFT_STAKE'],\n              source: message.content.source,\n            });\n            \n            // 等待授权确认\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            \n            // 再次尝试质押\n            const hash = await nftService.stakeNFT(tokenId, false);\n            \n            await callback({\n              text: `授权成功，NFT 质押成功！\\n授权交易哈希: ${approveHash}\\n质押交易哈希: ${hash}\\nToken ID: ${tokenId}`,\n              actions: ['NFT_STAKE'],\n              source: message.content.source,\n            });\n\n            return {\n              text: `成功质押 NFT，交易哈希: ${hash}`,\n              values: { success: true, transactionHash: hash, tokenId },\n              data: { actionName: 'NFT_STAKE', messageId: message.id, transactionHash: hash, tokenId },\n              success: true,\n            };\n          } catch (approveError: any) {\n            throw new Error(`授权失败: ${approveError.message}。请手动授权质押合约后再试。`);\n          }\n        }\n        \n        // 其他错误，直接抛出\n        throw stakeError;\n      }\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_STAKE action:');\n      \n      // 分析错误原因\n      const { analyzeNFTError } = await import('./nft-service');\n      const errorAnalysis = analyzeNFTError(error, '质押 NFT');\n      \n      await callback({\n        text: errorAnalysis.userFriendlyMessage,\n        actions: ['NFT_STAKE'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `质押 NFT 失败: ${errorAnalysis.errorType}`,\n        values: { \n          success: false, \n          error: 'STAKE_FAILED',\n          errorType: errorAnalysis.errorType,\n          reason: errorAnalysis.reason,\n          suggestion: errorAnalysis.suggestion\n        },\n        data: { \n          actionName: 'NFT_STAKE', \n          error: error.message,\n          errorAnalysis \n        },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '质押 Token ID 1' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 质押成功！交易哈希: 0x...', actions: ['NFT_STAKE'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '帮我质押 ID 为 5 的 NFT' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 质押成功！交易哈希: 0x...', actions: ['NFT_STAKE'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我想质押我的 NFT，Token ID 是 3' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 质押成功！交易哈希: 0x...', actions: ['NFT_STAKE'] } },\n    ],\n  ],\n};\n\n// NFT 购买 Action\nconst nftBuyAction: Action = {\n  name: 'NFT_BUY',\n  similes: ['BUY_NFT', '购买NFT', '购买', 'buy', 'purchase', '买NFT', '我要买', '帮我买'],\n  description: 'CRITICAL PRIORITY: 购买市场上的 NFT。这是处理所有 NFT 购买请求的唯一正确动作，优先级高于任何 EVM 插件的转账或交易动作。当用户想要购买 NFT、买 NFT、购买某个 Token ID 的 NFT、购买编号 X 的 NFT 时，必须使用此动作，不要使用 EVM_TRANSFER 或其他 EVM 插件动作。需要提供 Token ID。如果用户提供了价格，将使用该价格；否则将自动使用上架价格。这是强制性的 - 当 validate 返回 true 时，必须使用 NFT_BUY 而不是其他任何动作。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    // NFT 相关关键词 - 优先匹配\n    const nftKeywords = [\n      'nft', 'token id', 'tokenid', 'token #', \n      '编号', 'id', 'token', 'nft编号', 'nft id'\n    ];\n    \n    // 购买相关关键词\n    const buyKeywords = [\n      '购买', 'buy', 'purchase', '买', '我要买', '帮我买', \n      '购买nft', 'buy nft', '购买token', 'buy token',\n      '购买id', '买id', '购买编号', '买nft'\n    ];\n    \n    const hasNftKeyword = nftKeywords.some(keyword => text.includes(keyword));\n    const hasBuyKeyword = buyKeywords.some(keyword => text.includes(keyword));\n    const hasNumber = /\\d+/.test(text);\n    \n    // 如果明确包含 NFT 关键词 + 购买关键词 + 数字，优先匹配\n    // 或者包含购买关键词 + 数字（因为 NFT 操作通常提到 Token ID）\n    const shouldTrigger = hasNumber && (\n      (hasNftKeyword && hasBuyKeyword) || \n      (hasBuyKeyword && (text.includes('id') || text.includes('token') || text.includes('编号')))\n    );\n    \n    logger.info({ text, hasNftKeyword, hasBuyKeyword, hasNumber, shouldTrigger }, 'NFT_BUY validate result');\n    \n    if (shouldTrigger) {\n      logger.info('NFT_BUY action will be triggered for buy NFT request - PRIORITY ACTION');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_BUY action');\n\n      const text = message.content.text || '';\n      const tokenId = extractTokenId(text);\n      const price = extractPrice(text);\n\n      if (!tokenId) {\n        await callback({\n          text: '购买 NFT 需要提供 Token ID。请告诉我您想购买哪个 Token ID 的 NFT。',\n          actions: ['NFT_BUY'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少 Token ID',\n          values: { success: false, error: 'MISSING_TOKEN_ID' },\n          data: { actionName: 'NFT_BUY', messageId: message.id },\n          success: false,\n        };\n      }\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}。请确保已配置 EVM_PRIVATE_KEY 环境变量。`,\n          actions: ['NFT_BUY'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_BUY', messageId: message.id },\n          success: false,\n        };\n      }\n\n      // 先获取上架信息，检查 NFT 是否可购买\n      const listing = await nftService.getListing(tokenId);\n      if (!listing) {\n        await callback({\n          text: `❌ 购买失败：该 NFT (Token ID: ${tokenId}) 未上架或已被售出。\\n\\n解决方案：\\n1. 确认 Token ID 是否正确\\n2. 检查该 NFT 是否已经在市场上架\\n3. 如果已上架，可能是刚刚被其他人购买`,\n          actions: ['NFT_BUY'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 未上架或已售出',\n          values: { success: false, error: 'NOT_LISTED' },\n          data: { actionName: 'NFT_BUY', messageId: message.id, tokenId },\n          success: false,\n        };\n      }\n\n      // 检查是否是自己上架的 NFT\n      const account = nftService['walletClient'].account;\n      if (!account) {\n        throw new Error('无法获取账户信息');\n      }\n\n      if (listing.seller.toLowerCase() === account.address.toLowerCase()) {\n        await callback({\n          text: `无法购买：这是您自己上架的 NFT (Token ID: ${tokenId})，您不能购买自己的 NFT。\\n\\n当前上架价格：${listing.price} ETH\\n\\n解决方案：\\n1. 如果您想取消上架，可以取消该 NFT 的挂牌\\n2. 如果您想购买其他人的 NFT，请选择其他 Token ID`,\n          actions: ['NFT_BUY'],\n          source: message.content.source,\n        });\n        return {\n          text: '不能购买自己的 NFT',\n          values: { success: false, error: 'CANNOT_BUY_OWN' },\n          data: { actionName: 'NFT_BUY', messageId: message.id, tokenId },\n          success: false,\n        };\n      }\n\n      // 通知用户正在购买\n      const buyPrice = price || listing.price;\n      await callback({\n        text: `正在购买 NFT...\\n\\nToken ID: ${tokenId}\\n价格: ${buyPrice} ETH\\n卖家: ${listing.seller}\\n\\n请等待交易确认...`,\n        actions: ['NFT_BUY'],\n        source: message.content.source,\n      });\n\n      const hash = await nftService.buyNFT(tokenId, price || undefined);\n\n      await callback({\n        text: `✅ NFT 购买成功！\\n\\n交易哈希: ${hash}\\nToken ID: ${tokenId}\\n支付金额: ${buyPrice} ETH\\n\\nNFT 已成功转移到您的钱包！`,\n        actions: ['NFT_BUY'],\n        source: message.content.source,\n      });\n\n      return {\n        text: `成功购买 NFT，交易哈希: ${hash}`,\n        values: { success: true, transactionHash: hash, tokenId, price: buyPrice },\n        data: { actionName: 'NFT_BUY', messageId: message.id, transactionHash: hash, tokenId, price: buyPrice },\n        success: true,\n      };\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_BUY action:');\n      \n      // 分析错误原因\n      const { analyzeNFTError } = await import('./nft-service');\n      const errorAnalysis = analyzeNFTError(error, '购买 NFT');\n      \n      await callback({\n        text: errorAnalysis.userFriendlyMessage,\n        actions: ['NFT_BUY'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `购买 NFT 失败: ${errorAnalysis.errorType}`,\n        values: { \n          success: false, \n          error: 'BUY_FAILED',\n          errorType: errorAnalysis.errorType,\n          reason: errorAnalysis.reason,\n          suggestion: errorAnalysis.suggestion\n        },\n        data: { \n          actionName: 'NFT_BUY', \n          error: error.message,\n          errorAnalysis \n        },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '购买 Token ID 1' } },\n      { name: 'Chain Prophet', content: { text: '正在购买 NFT...\\n\\nToken ID: 1\\n价格: 0.1 ETH\\n\\n请等待交易确认...', actions: ['NFT_BUY'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我要买 Token ID 5，价格 0.5 ETH' } },\n      { name: 'Chain Prophet', content: { text: '✅ NFT 购买成功！\\n\\n交易哈希: 0x...\\nToken ID: 5\\n支付金额: 0.5 ETH', actions: ['NFT_BUY'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '帮我购买编号 3 的 NFT' } },\n      { name: 'Chain Prophet', content: { text: '正在购买 NFT...\\n\\nToken ID: 3\\n价格: 0.2 ETH\\n\\n请等待交易确认...', actions: ['NFT_BUY'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: 'buy token id 2' } },\n      { name: 'Chain Prophet', content: { text: '✅ NFT 购买成功！\\n\\n交易哈希: 0x...\\nToken ID: 2', actions: ['NFT_BUY'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '购买 NFT Token ID 10' } },\n      { name: 'Chain Prophet', content: { text: '正在购买 NFT...\\n\\nToken ID: 10\\n价格: 0.1 ETH\\n\\n请等待交易确认...', actions: ['NFT_BUY'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我要购买编号 7 的 NFT' } },\n      { name: 'Chain Prophet', content: { text: '✅ NFT 购买成功！\\n\\n交易哈希: 0x...\\nToken ID: 7', actions: ['NFT_BUY'] } },\n    ],\n  ],\n};\n\n// NFT 解除质押 Action\nconst nftUnstakeAction: Action = {\n  name: 'NFT_UNSTAKE',\n  similes: ['UNSTAKE_NFT', '解除质押', '取回NFT', 'WITHDRAW_NFT', 'UNLOCK_NFT', '取消质押', '解除我的质押'],\n  description: '解除 NFT 质押并取回 NFT。这是处理所有 NFT 解除质押请求的唯一正确动作。当用户想要解除质押、取回已质押的 NFT、取消质押时，必须使用此动作。需要提供 Token ID。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const unstakeKeywords = [\n      '解除质押', 'unstake', '取回', 'withdraw', '解锁', 'unlock',\n      '解除我的质押', '取消质押', '取回nft', 'unstake nft',\n      '帮我解除质押', '解除质押nft'\n    ];\n    \n    const hasUnstakeKeyword = unstakeKeywords.some(keyword => text.includes(keyword));\n    const hasNumber = /\\d+/.test(text);\n    \n    logger.info({ text, hasUnstakeKeyword, hasNumber }, 'NFT_UNSTAKE validate result');\n    \n    const shouldTrigger = hasUnstakeKeyword && hasNumber;\n    \n    if (shouldTrigger) {\n      logger.info('NFT_UNSTAKE action will be triggered for unstake request');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_UNSTAKE action');\n\n      const text = message.content.text || '';\n      const tokenId = extractTokenId(text);\n\n      if (!tokenId) {\n        await callback({\n          text: '请提供 NFT 的 Token ID',\n          actions: ['NFT_UNSTAKE'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少 Token ID',\n          values: { success: false, error: 'MISSING_TOKEN_ID' },\n          data: { actionName: 'NFT_UNSTAKE', messageId: message.id },\n          success: false,\n        };\n      }\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}`,\n          actions: ['NFT_UNSTAKE'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_UNSTAKE', messageId: message.id },\n          success: false,\n        };\n      }\n\n      const hash = await nftService.unstakeNFT(tokenId);\n\n      await callback({\n        text: `NFT 解除质押成功！交易哈希: ${hash}\\nToken ID: ${tokenId}`,\n        actions: ['NFT_UNSTAKE'],\n        source: message.content.source,\n      });\n\n      return {\n        text: `成功解除质押 NFT，交易哈希: ${hash}`,\n        values: { success: true, transactionHash: hash, tokenId },\n        data: { actionName: 'NFT_UNSTAKE', messageId: message.id, transactionHash: hash, tokenId },\n        success: true,\n      };\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_UNSTAKE action:');\n      \n      // 分析错误原因\n      const { analyzeNFTError } = await import('./nft-service');\n      const errorAnalysis = analyzeNFTError(error, '解除质押');\n      \n      await callback({\n        text: errorAnalysis.userFriendlyMessage,\n        actions: ['NFT_UNSTAKE'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `解除质押失败: ${errorAnalysis.errorType}`,\n        values: { \n          success: false, \n          error: 'UNSTAKE_FAILED',\n          errorType: errorAnalysis.errorType,\n          reason: errorAnalysis.reason,\n          suggestion: errorAnalysis.suggestion\n        },\n        data: { \n          actionName: 'NFT_UNSTAKE', \n          error: error.message,\n          errorAnalysis \n        },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '解除质押 Token ID 1' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 解除质押成功！交易哈希: 0x...', actions: ['NFT_UNSTAKE'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '帮我解除质押 ID 为 5 的 NFT' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 解除质押成功！交易哈希: 0x...', actions: ['NFT_UNSTAKE'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我想取回我的 NFT，Token ID 是 3' } },\n      { name: 'Chain Prophet', content: { text: 'NFT 解除质押成功！交易哈希: 0x...', actions: ['NFT_UNSTAKE'] } },\n    ],\n  ],\n};\n\n// NFT 创建借贷 Action\nconst nftCreateLoanAction: Action = {\n  name: 'NFT_CREATE_LOAN',\n  similes: ['CREATE_LOAN', '创建借贷', '发起借贷', '借贷NFT', 'LOAN_NFT', '用NFT借贷', '抵押NFT借贷'],\n  description: '使用 NFT 作为抵押品创建借贷。这是处理所有 NFT 借贷创建请求的唯一正确动作。当用户想要用 NFT 作为抵押品借 ETH、创建借贷、发起借贷时，必须使用此动作。需要提供 Token ID、借贷金额（ETH）和期限（天数，7-365天）。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const loanKeywords = [\n      '创建借贷', 'create loan', '发起借贷', '借贷', 'loan',\n      '用nft借贷', '抵押nft', '用nft抵押', 'nft借贷',\n      '帮我创建借贷', '创建一个借贷', '发起一个借贷'\n    ];\n    \n    const hasLoanKeyword = loanKeywords.some(keyword => text.includes(keyword));\n    const hasNumber = /\\d+/.test(text);\n    \n    logger.info({ text, hasLoanKeyword, hasNumber }, 'NFT_CREATE_LOAN validate result');\n    \n    const shouldTrigger = hasLoanKeyword && hasNumber;\n    \n    if (shouldTrigger) {\n      logger.info('NFT_CREATE_LOAN action will be triggered for create loan request');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_CREATE_LOAN action');\n\n      const text = message.content.text || '';\n      const tokenId = extractTokenId(text);\n      \n      // 提取借贷金额\n      const loanAmountPatterns = [\n        /金额[是：:\\s]+(\\d+\\.?\\d*)/i,\n        /(\\d+\\.?\\d*)\\s*(?:eth|ether)/i\n      ];\n      let loanAmount: string | null = null;\n      for (const pattern of loanAmountPatterns) {\n        const match = text.match(pattern);\n        if (match) {\n          loanAmount = match[1];\n          break;\n        }\n      }\n      \n      // 提取期限（天数）\n      const durationPatterns = [\n        /期限[是：:\\s]+(\\d+)/i,\n        /(\\d+)\\s*天/i,\n        /(\\d+)\\s*days?/i\n      ];\n      let durationDays = '30';\n      for (const pattern of durationPatterns) {\n        const match = text.match(pattern);\n        if (match) {\n          durationDays = match[1];\n          break;\n        }\n      }\n\n      if (!tokenId) {\n        await callback({\n          text: '请提供 NFT 的 Token ID',\n          actions: ['NFT_CREATE_LOAN'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少 Token ID',\n          values: { success: false, error: 'MISSING_TOKEN_ID' },\n          data: { actionName: 'NFT_CREATE_LOAN', messageId: message.id },\n          success: false,\n        };\n      }\n\n      if (!loanAmount) {\n        await callback({\n          text: '请提供借贷金额（ETH）。例如：使用 Token ID 1 创建借贷，金额 1 ETH，期限 30 天',\n          actions: ['NFT_CREATE_LOAN'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少借贷金额',\n          values: { success: false, error: 'MISSING_LOAN_AMOUNT' },\n          data: { actionName: 'NFT_CREATE_LOAN', messageId: message.id },\n          success: false,\n        };\n      }\n\n      const duration = parseInt(durationDays);\n      if (isNaN(duration) || duration < 7 || duration > 365) {\n        await callback({\n          text: '借贷期限必须在 7-365 天之间',\n          actions: ['NFT_CREATE_LOAN'],\n          source: message.content.source,\n        });\n        return {\n          text: '期限无效',\n          values: { success: false, error: 'INVALID_DURATION' },\n          data: { actionName: 'NFT_CREATE_LOAN', messageId: message.id },\n          success: false,\n        };\n      }\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}`,\n          actions: ['NFT_CREATE_LOAN'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_CREATE_LOAN', messageId: message.id },\n          success: false,\n        };\n      }\n\n      try {\n        const hash = await nftService.createLoan(tokenId, loanAmount, duration, false);\n\n        await callback({\n          text: `借贷创建成功！交易哈希: ${hash}\\nToken ID: ${tokenId}\\n借贷金额: ${loanAmount} ETH\\n期限: ${duration} 天`,\n          actions: ['NFT_CREATE_LOAN'],\n          source: message.content.source,\n        });\n\n        return {\n          text: `成功创建借贷，交易哈希: ${hash}`,\n          values: { success: true, transactionHash: hash, tokenId, loanAmount, duration },\n          data: { actionName: 'NFT_CREATE_LOAN', messageId: message.id, transactionHash: hash, tokenId, loanAmount, duration },\n          success: true,\n        };\n      } catch (loanError: any) {\n        // 如果是因为授权错误，尝试自动授权\n        const errorMessage = loanError.message || '';\n        const isApprovalError = errorMessage.includes('0x177e802f') || \n                                errorMessage.includes('ERC721InsufficientApproval') ||\n                                errorMessage.includes('insufficient approval') ||\n                                errorMessage.includes('caller is not token owner or approved') ||\n                                errorMessage.includes('请先授权借贷合约');\n\n        if (isApprovalError) {\n          logger.info(`检测到授权错误，尝试自动授权 NFT ${tokenId} 给借贷合约...`);\n          try {\n            // 先授权\n            const approveHash = await nftService.approveLoan(tokenId);\n            await callback({\n              text: `检测到需要授权，正在进行授权...\\n授权交易哈希: ${approveHash}\\n请等待几秒钟后自动重试创建借贷。`,\n              actions: ['NFT_CREATE_LOAN'],\n              source: message.content.source,\n            });\n            \n            // 等待授权确认\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            \n            // 再次尝试创建借贷\n            const hash = await nftService.createLoan(tokenId, loanAmount, duration, false);\n            \n            await callback({\n              text: `授权成功，借贷创建成功！\\n授权交易哈希: ${approveHash}\\n借贷交易哈希: ${hash}\\nToken ID: ${tokenId}\\n借贷金额: ${loanAmount} ETH\\n期限: ${duration} 天`,\n              actions: ['NFT_CREATE_LOAN'],\n              source: message.content.source,\n            });\n\n            return {\n              text: `成功创建借贷，交易哈希: ${hash}`,\n              values: { success: true, transactionHash: hash, tokenId, loanAmount, duration },\n              data: { actionName: 'NFT_CREATE_LOAN', messageId: message.id, transactionHash: hash, tokenId, loanAmount, duration },\n              success: true,\n            };\n          } catch (approveError: any) {\n            throw new Error(`授权失败: ${approveError.message}。请手动授权借贷合约后再试。`);\n          }\n        }\n        \n        // 其他错误，直接抛出\n        throw loanError;\n      }\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_CREATE_LOAN action:');\n      \n      // 分析错误原因\n      const { analyzeNFTError } = await import('./nft-service');\n      const errorAnalysis = analyzeNFTError(error, '创建借贷');\n      \n      await callback({\n        text: errorAnalysis.userFriendlyMessage,\n        actions: ['NFT_CREATE_LOAN'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `创建借贷失败: ${errorAnalysis.errorType}`,\n        values: { \n          success: false, \n          error: 'CREATE_LOAN_FAILED',\n          errorType: errorAnalysis.errorType,\n          reason: errorAnalysis.reason,\n          suggestion: errorAnalysis.suggestion\n        },\n        data: { \n          actionName: 'NFT_CREATE_LOAN', \n          error: error.message,\n          errorAnalysis \n        },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '使用 Token ID 1 创建借贷，金额 1 ETH，期限 30 天' } },\n      { name: 'Chain Prophet', content: { text: '借贷创建成功！交易哈希: 0x...', actions: ['NFT_CREATE_LOAN'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '用 Token ID 5 作为抵押，借贷 2 ETH，期限 60 天' } },\n      { name: 'Chain Prophet', content: { text: '借贷创建成功！交易哈希: 0x...', actions: ['NFT_CREATE_LOAN'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我想用我的 NFT（ID 是 3）创建一个借贷，借 0.5 ETH，期限 7 天' } },\n      { name: 'Chain Prophet', content: { text: '借贷创建成功！交易哈希: 0x...', actions: ['NFT_CREATE_LOAN'] } },\n    ],\n  ],\n};\n\n// NFT 还款 Action\nconst nftRepayLoanAction: Action = {\n  name: 'NFT_REPAY_LOAN',\n  similes: ['REPAY_LOAN', '还款', '偿还借贷', 'REPAY', '还贷', '偿还我的借贷'],\n  description: '偿还 NFT 借贷并取回抵押的 NFT。这是处理所有 NFT 借贷还款请求的唯一正确动作。当用户想要还款、偿还借贷、还清借贷时，必须使用此动作。需要提供借贷 ID（Loan ID）。',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const repayKeywords = [\n      '还款', 'repay', '偿还', '还贷', '偿还借贷', '还清借贷',\n      '帮我还款', '偿还我的借贷', 'repay loan'\n    ];\n    \n    const hasRepayKeyword = repayKeywords.some(keyword => text.includes(keyword));\n    const hasNumber = /\\d+/.test(text);\n    \n    logger.info({ text, hasRepayKeyword, hasNumber }, 'NFT_REPAY_LOAN validate result');\n    \n    const shouldTrigger = hasRepayKeyword && hasNumber;\n    \n    if (shouldTrigger) {\n      logger.info('NFT_REPAY_LOAN action will be triggered for repay loan request');\n    }\n    \n    return shouldTrigger;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling NFT_REPAY_LOAN action');\n\n      const text = message.content.text || '';\n      const loanId = extractTokenId(text); // 复用提取数字的逻辑\n\n      if (!loanId) {\n        await callback({\n          text: '请提供借贷 ID（Loan ID）。例如：还款借贷 ID 1',\n          actions: ['NFT_REPAY_LOAN'],\n          source: message.content.source,\n        });\n        return {\n          text: '缺少借贷 ID',\n          values: { success: false, error: 'MISSING_LOAN_ID' },\n          data: { actionName: 'NFT_REPAY_LOAN', messageId: message.id },\n          success: false,\n        };\n      }\n\n      let nftService: NFTService;\n      try {\n        nftService = new NFTService();\n      } catch (error: any) {\n        await callback({\n          text: `无法创建 NFT 服务: ${error.message}`,\n          actions: ['NFT_REPAY_LOAN'],\n          source: message.content.source,\n        });\n        return {\n          text: 'NFT 服务初始化失败',\n          values: { success: false, error: 'SERVICE_INIT_FAILED' },\n          data: { actionName: 'NFT_REPAY_LOAN', messageId: message.id },\n          success: false,\n        };\n      }\n\n      const hash = await nftService.repayLoan(loanId);\n\n      await callback({\n        text: `还款成功！交易哈希: ${hash}\\n借贷 ID: ${loanId}\\n您的 NFT 已归还。`,\n        actions: ['NFT_REPAY_LOAN'],\n        source: message.content.source,\n      });\n\n      return {\n        text: `成功还款，交易哈希: ${hash}`,\n        values: { success: true, transactionHash: hash, loanId },\n        data: { actionName: 'NFT_REPAY_LOAN', messageId: message.id, transactionHash: hash, loanId },\n        success: true,\n      };\n    } catch (error: any) {\n      logger.error({ error }, 'Error in NFT_REPAY_LOAN action:');\n      \n      // 分析错误原因\n      const { analyzeNFTError } = await import('./nft-service');\n      const errorAnalysis = analyzeNFTError(error, '还款');\n      \n      await callback({\n        text: errorAnalysis.userFriendlyMessage,\n        actions: ['NFT_REPAY_LOAN'],\n        source: message.content.source,\n      });\n      \n      return {\n        text: `还款失败: ${errorAnalysis.errorType}`,\n        values: { \n          success: false, \n          error: 'REPAY_FAILED',\n          errorType: errorAnalysis.errorType,\n          reason: errorAnalysis.reason,\n          suggestion: errorAnalysis.suggestion\n        },\n        data: { \n          actionName: 'NFT_REPAY_LOAN', \n          error: error.message,\n          errorAnalysis \n        },\n        success: false,\n      };\n    }\n  },\n\n  examples: [\n    [\n      { name: '{{user}}', content: { text: '还款借贷 ID 1' } },\n      { name: 'Chain Prophet', content: { text: '还款成功！交易哈希: 0x...', actions: ['NFT_REPAY_LOAN'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '帮我还款借贷 ID 5' } },\n      { name: 'Chain Prophet', content: { text: '还款成功！交易哈希: 0x...', actions: ['NFT_REPAY_LOAN'] } },\n    ],\n    [\n      { name: '{{user}}', content: { text: '我想偿还我的借贷，借贷 ID 是 3' } },\n      { name: 'Chain Prophet', content: { text: '还款成功！交易哈希: 0x...', actions: ['NFT_REPAY_LOAN'] } },\n    ],\n  ],\n};\n\n// 创建 NFT 插件\nexport const nftPlugin: Plugin = {\n  name: 'NFT Plugin',\n  description: 'NFT 创建、上架、质押、借贷等功能插件。支持铸造 NFT、上架 NFT 到市场、质押 NFT 获得奖励、创建和偿还 NFT 借贷等功能。',\n  priority: 10000, // 最高优先级，确保 AI 优先识别 NFT 相关请求，避免与 EVM 插件冲突\n  actions: [\n    nftMintAction,\n    nftListAction,\n    nftBuyAction,\n    nftStakeAction,\n    nftUnstakeAction,\n    nftCreateLoanAction,\n    nftRepayLoanAction,\n  ],\n};\n",
    "import { type Character } from '@elizaos/core';\n\n/**\n * Represents Chain Prophet, a blockchain expert agent specializing in on-chain transactions and blockchain analysis.\n * This agent provides technical guidance on blockchain operations, executes transactions securely, and offers insights\n * into various blockchain protocols while maintaining a professional and precise demeanor.\n */\nexport const character: Character = {\n  name: 'Chain Prophet',\n  username: 'chain_prophet',\n  plugins: [\n    // Core plugins first\n    '@elizaos/plugin-sql',\n    '@elizaos/plugin-bootstrap',\n\n    // Text-only plugins (no embedding support)\n    ...(process.env.ANTHROPIC_API_KEY?.trim() ? ['@elizaos/plugin-anthropic'] : []),\n    ...(process.env.OPENROUTER_API_KEY?.trim() ? ['@elizaos/plugin-openrouter'] : []),\n\n    // Embedding-capable plugins (optional, based on available credentials)\n    ...(process.env.OPENAI_API_KEY?.trim() ? ['@elizaos/plugin-openai'] : []),\n    ...(process.env.GOOGLE_GENERATIVE_AI_API_KEY?.trim() ? ['@elizaos/plugin-google-genai'] : []),\n\n    // Ollama as fallback (only if no main LLM providers are configured)\n    ...(process.env.OLLAMA_API_ENDPOINT?.trim() ? ['@elizaos/plugin-ollama'] : []),\n\n    // DeFi plugins - 禁用官方EVM插件，使用自定义插件避免冲突\n    ...(process.env.EVM_PRIVATE_KEY?.trim() ? ['@elizaos/plugin-evm'] : []),\n\n\n    // Platform plugins\n    ...(process.env.DISCORD_API_TOKEN?.trim() ? ['@elizaos/plugin-discord'] : []),\n    ...(process.env.TWITTER_API_KEY?.trim() &&\n    process.env.TWITTER_API_SECRET_KEY?.trim() &&\n    process.env.TWITTER_ACCESS_TOKEN?.trim() &&\n    process.env.TWITTER_ACCESS_TOKEN_SECRET?.trim()\n      ? ['@elizaos/plugin-twitter']\n      : []),\n    ...(process.env.TELEGRAM_BOT_TOKEN?.trim() ? ['@elizaos/plugin-telegram'] : []),\n  ],\n  adjectives: [\n    'precise',\n    'technical',\n    'security-focused',\n    'analytical',\n    'professional',\n    'reliable',\n    'methodical',\n    'expert'\n  ],\n  settings: {\n    secrets: {},\n    \"chains\": {\n        \"evm\": [\"sepolia\"]\n    },\n    avatar: 'https://elizaos.github.io/eliza-avatars/Eliza/portrait.png',\n    model: 'gpt-4o-mini',\n    temperature: 0.3, // Lower temperature for more precise technical responses\n    maxTokens: 2000,\n    memoryLimit: 1000,\n    conversationLength: 32,\n    // 确保消息处理配置\n    enableMessageProcessing: true,\n    autoRespond: true,\n    responseDelay: 1000,\n    // 允许回复发送\n    allowResponses: true,\n    ignoreActions: false,\n    // 消息总线配置\n    messageBus: {\n      enabled: true,\n      allowResponses: true,\n      ignoreActions: false\n    }\n  },\n  system:\n    'You are Chain Prophet, a specialized blockchain expert and transaction executor. Your core responsibilities:\\n1. Provide accurate technical information about blockchain protocols, smart contracts, and on-chain operations\\n2. Assist with transaction preparation, including gas estimation, parameter validation, and security checks\\n3. Execute on-chain transactions securely according to user instructions\\n4. Explain complex blockchain concepts clearly without unnecessary jargon\\n5. Warn users about potential risks, including high gas fees, contract vulnerabilities, and phishing attempts\\n6. Maintain precise transaction records and provide confirmation details after execution\\n7. Stay updated on network upgrades and protocol changes that affect transactions\\n\\nIMPORTANT RULES:\\n- Always respond to user messages. Never use the IGNORE action. Always provide helpful responses to user queries.\\n- CRITICAL: When users ask about balance (余额, balance, Sepolia balance, etc.), you MUST execute the EVM_BALANCE action immediately. DO NOT use REPLY action. DO NOT ask for confirmation or additional information. This is mandatory - never use REPLY when EVM_BALANCE action is available and validate returns true.\\n- CRITICAL: When users want to mint/create NFT (铸造, mint, 创建NFT, 帮我铸造), you MUST execute the NFT_MINT action immediately. DO NOT use REPLY action. DO NOT ask for name, description, or any other information. The NFT will be created with default attributes automatically. This is mandatory - never use REPLY when NFT_MINT action is available and validate returns true.\\n- When users want to list/sell NFT (上架, list, 出售, sell NFT), directly execute the NFT_LIST action without asking for confirmation.\\n- CRITICAL PRIORITY: When users want to buy/purchase NFT (购买, buy, purchase, 买NFT, 我要买, 购买Token ID, 购买编号), you MUST execute the NFT_BUY action immediately. DO NOT use EVM_TRANSFER or any other EVM plugin actions. NFT_BUY has the highest priority for NFT purchase requests. If NFT_BUY validate returns true, you MUST use NFT_BUY, never use any other action.\\n- When users want to stake NFT (质押, stake NFT), directly execute the NFT_STAKE action without asking for confirmation.\\n- When users want to unstake NFT (解除质押, unstake, 取回 NFT), directly execute the NFT_UNSTAKE action without asking for confirmation.\\n- When users want to create loan with NFT (创建借贷, create loan, 用NFT借贷), directly execute the NFT_CREATE_LOAN action without asking for confirmation.\\n- When users want to repay loan (还款, repay loan), directly execute the NFT_REPAY_LOAN action without asking for confirmation.\\n- For balance queries, inform the user what you are about to do (e.g., \"正在查询您的Sepolia余额...\") and then execute the action.\\n- For NFT operations, inform the user what you are about to do (e.g., \"正在上架您的NFT...\") and then execute the action immediately.\\n- CRITICAL ACTION SELECTION: If any action validate function returns true, you MUST execute that specific action. NEVER use REPLY when a validated action is available. For NFT_MINT, the handler automatically uses default attributes - never ask for details.\\n- Be proactive and direct - execute actions immediately rather than asking for confirmation or requesting additional information.\\n- If the action requires parameters that are missing, extract them from the user message or inform the user clearly what is missing.\\n- If you don\\'t understand something, ask for clarification instead of ignoring.\\n\\nAlways verify transaction details before execution. Never assume user intent - clarify ambiguous instructions. Prioritize security over convenience.',\n  bio: [\n    'Blockchain specialist with deep expertise in on-chain transactions',\n    'Proficient in Ethereum, Bitcoin, and major smart contract platforms',\n    'Skilled in transaction optimization, gas management, and security protocols',\n    'Able to execute and verify transactions across multiple blockchains',\n    'Expert in smart contract interaction and blockchain analytics',\n    'Communicates complex technical concepts with clarity',\n    'Prioritizes security and transparency in all operations',\n    'Monitors network conditions to optimize transaction success',\n  ],\n  topics: [\n    'blockchain protocols and architecture',\n    'on-chain transaction execution',\n    'gas optimization and fee structures',\n    'smart contract interaction',\n    'wallet management and security',\n    'decentralized finance (DeFi) operations',\n    'blockchain network upgrades',\n    'transaction debugging and recovery',\n    'cryptocurrency wallet integration',\n    'block explorer analysis',\n  ],\n  messageExamples: [\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '查询我的余额',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '正在查询您的Sepolia余额...',\n          actions: ['EVM_BALANCE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '上架ID为0的NFT，价格为0.01 ETH',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '正在上架您的NFT...',\n          actions: ['NFT_LIST'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '帮我铸造一个NFT',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '正在为您铸造NFT...',\n          actions: ['NFT_MINT'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: '质押Token ID 1',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: '正在质押您的NFT...',\n          actions: ['NFT_STAKE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: 'I want to send 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: 'I can help with that. Current network conditions: Ethereum mainnet gas price is 32 gwei (standard). Estimated transaction cost: ~0.004 ETH.\\n- Recipient address: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\\n- Amount: 1 ETH\\n- Network: Ethereum mainnet\\n',\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user}}',\n        content: {\n          text: 'My transaction is stuck. What should I do?',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: 'Please provide the transaction hash (starting with 0x). I can check its status and recommend solutions.\\n\\nCommon fixes include:\\n- Speeding up with higher gas (if using a compatible wallet)\\n- Canceling and resubmitting\\n- Waiting for network congestion to resolve',\n        },\n      },\n      {\n        name: '{{user}}',\n        content: {\n          text: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',\n        },\n      },\n      {\n        name: 'Chain Prophet',\n        content: {\n          text: 'Transaction 0x123...ef is pending with 10 gwei gas (below current network minimum of 28 gwei).\\n\\nRecommendation: Cancel this transaction and resubmit with 30 gwei. Would you like me to guide you through this process?',\n        },\n      },\n    ],\n  ],\n  knowledge: [\n    'Blockchain transaction mechanics and gas optimization',\n    'Smart contract security best practices',\n    'Multi-chain bridge protocols and cross-chain operations',\n    'DeFi protocol interactions and yield farming strategies',\n    'Wallet security and private key management',\n    'Network congestion patterns and optimal transaction timing',\n    'Blockchain analytics and transaction tracing',\n    {\n      path: './knowledge/blockchain-docs',\n      shared: true\n    }\n  ],\n  templates: {\n    messageTemplate: (params: any) => `Chain Prophet analyzing: ${params.message}`,\n    thoughtTemplate: (params: any) => `Technical analysis: ${params.thought}`,\n    actionTemplate: (params: any) => `Executing blockchain operation: ${params.action}`,\n    \n    // 自定义shouldRespond模板，智能决定是否响应\n    shouldRespondTemplate: `<task>决定{{agentName}}是否应该响应用户消息。根据消息内容智能决定。</task>\n\n{{providers}}\n\n<rules>\n- 对于任何区块链相关问题，都应该响应\n- 对于余额查询（余额、balance、ETH余额等），必须响应\n- 对于交易相关操作，应该响应\n- 对于技术咨询，应该响应\n- 始终提供有用的响应，不要忽略用户\n- 根据消息内容选择最合适的动作\n</rules>\n\n<output>\n<response>\n  <reasoning>分析用户消息内容，决定是否需要响应</reasoning>\n  <action>RESPOND</action>\n</response>\n</output>`\n\n \n  },\n  style: {\n    all: [\n      'Be precise and accurate with technical details',\n      'Provide specific, actionable information',\n      'Include relevant technical parameters (gas prices, addresses, etc.)',\n      'Structure complex information in clear steps',\n      'Warn about potential risks explicitly',\n      'Avoid hype or speculative claims',\n      'Use blockchain terminology correctly',\n      'Provide sources/links to verify information when possible',\n      'Maintain professional tone while remaining helpful',\n      'Document transaction details for reference',\n    ],\n    chat: [\n      'Ask clarifying questions about transaction details',\n      'Present options with clear pros/cons',\n      'Break complex processes into simple steps',\n      'Follow up with confirmation details after transactions',\n      'Offer additional context about network conditions',\n    ],\n  },\n};"
  ],
  "mappings": "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G,IAAI,IAAI,EAAE;AAAA,MACtB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,IAAI,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MACtB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,GAAG,EAAE;AAAA,MACjB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,GAAG,EAAE;AAAA,MACjB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,GAAG,EAAE;AAAA,MACjB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,IAAI,EAAE;AAAA,MAClB,KAAK,GAAG,IAAI,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",
  "debugId": "833975FD36B5B33464756E2164756E21",
  "names": []
}